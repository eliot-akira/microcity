{"version":3,"file":"index.min.js.map","sources":["../src/tiles/tileValues.ts","../src/tiles/tileSet.ts","../src/random.ts","../src/map/direction.ts","../src/debugAssert.ts","../src/map/position.ts","../src/map/bounds.ts","../src/tiles/tileFlags.ts","../src/tiles/tile.ts","../src/map/gameMap.ts","../src/map/mapGenerator.ts","../src/map/blockMap.ts","../src/tiles/tileUtils.ts","../src/utils.ts","../src/sprites/spriteConstants.ts","../src/zones/zoneUtils.ts","../src/sprites/spriteUtils.ts","../src/stats/traffic.ts","../src/zones/commercial.ts","../src/zones/industrial.ts","../src/zones/residential.ts","../src/map/blockMapUtils.ts","../src/eventEmitter.ts","../src/messages/index.ts","../src/stats/budget.ts","../src/stats/census.ts","../src/stats/disasterManager.ts","../src/stats/emergencyServices.ts","../src/stats/evaluation.ts","../src/map/mapScanner.ts","../src/tiles/miscTiles.ts","../src/stats/powerManager.ts","../src/stats/repairManager.ts","../src/tiles/road.ts","../src/sprites/baseSprite.ts","../src/sprites/airplaneSprite.ts","../src/sprites/boatSprite.ts","../src/sprites/copterSprite.ts","../src/sprites/explosionSprite.ts","../src/sprites/monsterSprite.ts","../src/sprites/tornadoSprite.ts","../src/sprites/trainSprite.ts","../src/sprites/spriteManager.ts","../src/tiles/stadium.ts","../src/stats/transport.ts","../src/stats/valves.ts","../src/simulation.ts","../src/storage.ts","../src/stats/worldEffects.ts","../src/tools/baseTool.ts","../src/windows/modalWindow.ts","../src/windows/budgetWindow.ts","../src/windows/debugWindow.ts","../src/windows/disasterWindow.ts","../src/messages/text.ts","../src/windows/evaluationWindow.ts","../src/tiles/tileHistory.ts","../src/tiles/animationManager.ts","../src/mouseBox.ts","../src/gameCanvas.ts","../src/windows/infoBar.ts","../src/tools/connector.ts","../src/tools/connectingTool.ts","../src/tools/buildingTool.ts","../src/tools/bulldozerTool.ts","../src/tools/parkTool.ts","../src/tools/railTool.ts","../src/tools/roadTool.ts","../src/tools/queryTool.ts","../src/tools/wireTool.ts","../src/tools/gameTools.ts","../src/inputStatus.ts","../src/windows/notification.ts","../src/windows/queryWindow.ts","../src/windows/rci.ts","../src/windows/saveWindow.ts","../src/windows/screenshotLinkWindow.ts","../src/windows/screenshotWindow.ts","../src/windows/settingsWindow.ts","../src/windows/touchWarnWindow.ts","../src/game.ts","../src/index.ts"],"sourcesContent":["// TODO Add comment for each tile\n\nexport const DIRT = 0 // Clear tile\n// tile 1 ?\n\n/* Water */\nexport const RIVER = 2\nexport const REDGE = 3\nexport const CHANNEL = 4\nexport const FIRSTRIVEDGE = 5\n// tile 6 -- 19 ?\nexport const LASTRIVEDGE = 20\nexport const WATER_LOW = RIVER // First water tile\nexport const WATER_HIGH = LASTRIVEDGE // Last water tile (inclusive)\n\nexport const TREEBASE = 21\nexport const WOODS_LOW = TREEBASE\nexport const LASTTREE = 36\nexport const WOODS = 37\nexport const UNUSED_TRASH1 = 38\nexport const UNUSED_TRASH2 = 39\nexport const WOODS_HIGH = UNUSED_TRASH2 // Why is an 'UNUSED' tile used?\nexport const WOODS2 = 40\nexport const WOODS3 = 41\nexport const WOODS4 = 42\nexport const WOODS5 = 43\n\n/* Rubble (4 tiles) */\nexport const RUBBLE = 44\nexport const LASTRUBBLE = 47\n\nexport const FLOOD = 48\n// tile 49, 50 ?\nexport const LASTFLOOD = 51\n\nexport const RADTILE = 52 // Radio-active contaminated tile\n\nexport const UNUSED_TRASH3 = 53\nexport const UNUSED_TRASH4 = 54\nexport const UNUSED_TRASH5 = 55\n\n/* Fire animation (8 tiles) */\nexport const FIRE = 56\nexport const FIREBASE = FIRE\nexport const LASTFIRE = 63\n\nexport const HBRIDGE = 64 // Horizontal bridge\nexport const ROADBASE = HBRIDGE\nexport const VBRIDGE = 65 // Vertical bridge\n\n// Road\n\nexport const ROADS = 66\nexport const ROADS2 = 67\nexport const ROADS3 = 68\nexport const ROADS4 = 69\nexport const ROADS5 = 70\nexport const ROADS6 = 71\nexport const ROADS7 = 72\nexport const ROADS8 = 73\nexport const ROADS9 = 74\nexport const ROADS10 = 75\nexport const INTERSECTION = 76\nexport const HROADPOWER = 77\nexport const VROADPOWER = 78\nexport const BRWH = 79\nexport const LTRFBASE = 80 // First tile with low traffic\n// tile 81 -- 94 ?\nexport const BRWV = 95\n// tile 96 -- 110 ?\nexport const BRWXXX1 = 111\n// tile 96 -- 110 ?\nexport const BRWXXX2 = 127\n// tile 96 -- 110 ?\nexport const BRWXXX3 = 143\nexport const HTRFBASE = 144 // First tile with high traffic\n// tile 145 -- 158 ?\nexport const BRWXXX4 = 159\n// tile 160 -- 174 ?\nexport const BRWXXX5 = 175\n// tile 176 -- 190 ?\nexport const BRWXXX6 = 191\n// tile 192 -- 205 ?\nexport const LASTROAD = 206\nexport const BRWXXX7 = 207\n\n/* Power lines */\nexport const HPOWER = 208\nexport const VPOWER = 209\nexport const LHPOWER = 210\nexport const LVPOWER = 211\nexport const LVPOWER2 = 212\nexport const LVPOWER3 = 213\nexport const LVPOWER4 = 214\nexport const LVPOWER5 = 215\nexport const LVPOWER6 = 216\nexport const LVPOWER7 = 217\nexport const LVPOWER8 = 218\nexport const LVPOWER9 = 219\nexport const LVPOWER10 = 220\nexport const RAILHPOWERV = 221 // Horizontal rail, vertical power\nexport const RAILVPOWERH = 222 // Vertical rail, horizontal power\nexport const POWERBASE = HPOWER\nexport const LASTPOWER = RAILVPOWERH\n\nexport const UNUSED_TRASH6 = 223\n\n/* Rail */\nexport const HRAIL = 224\nexport const VRAIL = 225\nexport const LHRAIL = 226\nexport const LVRAIL = 227\nexport const LVRAIL2 = 228\nexport const LVRAIL3 = 229\nexport const LVRAIL4 = 230\nexport const LVRAIL5 = 231\nexport const LVRAIL6 = 232\nexport const LVRAIL7 = 233\nexport const LVRAIL8 = 234\nexport const LVRAIL9 = 235\nexport const LVRAIL10 = 236\nexport const HRAILROAD = 237\nexport const VRAILROAD = 238\nexport const RAILBASE = HRAIL\nexport const LASTRAIL = 238\n\nexport const ROADVPOWERH = 239 /* bogus? */\n\n// Residential zone tiles\n\nexport const RESBASE = 240 // Empty residential, tiles 240--248\nexport const FREEZ = 244 // center-tile of 3x3 empty residential\n\nexport const HOUSE = 249 // Single tile houses until 260\nexport const LHTHR = HOUSE\nexport const HHTHR = 260\n\nexport const RZB = 265 // center tile first 3x3 tile residential\n\nexport const HOSPITALBASE = 405 // Center of hospital (tiles 405--413)\nexport const HOSPITAL = 409 // Center of hospital (tiles 405--413)\n\nexport const CHURCHBASE = 414 // Center of church (tiles 414--422)\nexport const CHURCH0BASE = 414 // numbered alias\nexport const CHURCH = 418 // Center of church (tiles 414--422)\nexport const CHURCH0 = 418 // numbered alias\n\n// Commercial zone tiles\n\nexport const COMBASE = 423 // Empty commercial, tiles 423--431\n// tile 424 -- 426 ?\nexport const COMCLR = 427\n// tile 428 -- 435 ?\nexport const CZB = 436\n// tile 437 -- 608 ?\nexport const COMLAST = 609\n// tile 610, 611 ?\n\n// Industrial zone tiles.\nexport const INDBASE = 612 // Top-left tile of empty industrial zone.\nexport const INDCLR = 616 // Center tile of empty industrial zone.\nexport const LASTIND = 620 // Last tile of empty industrial zone.\n\n// Industrial zone population 0, value 0: 621 -- 629\nexport const IND1 = 621 // Top-left tile of first non-empty industry zone.\nexport const IZB = 625 // Center tile of first non-empty industry zone.\n\n// Industrial zone population 1, value 0: 630 -- 638\n\n// Industrial zone population 2, value 0: 639 -- 647\nexport const IND2 = 641\nexport const IND3 = 644\n\n// Industrial zone population 3, value 0: 648 -- 656\nexport const IND4 = 649\nexport const IND5 = 650\n\n// Industrial zone population 0, value 1: 657 -- 665\n\n// Industrial zone population 1, value 1: 666 -- 674\n\n// Industrial zone population 2, value 1: 675 -- 683\nexport const IND6 = 676\nexport const IND7 = 677\n\n// Industrial zone population 3, value 1: 684 -- 692\nexport const IND8 = 686\nexport const IND9 = 689\n\n// Seaport\nexport const PORTBASE = 693 // Top-left tile of the seaport.\nexport const PORT = 698 // Center tile of the seaport.\nexport const LASTPORT = 708 // Last tile of the seaport.\n\nexport const AIRPORTBASE = 709\n// tile 710 ?\nexport const RADAR = 711\n// tile 712 -- 715 ?\nexport const AIRPORT = 716\n// tile 717 -- 744 ?\n\n// Coal power plant (4x4).\nexport const COALBASE = 745 // First tile of coal power plant.\nexport const POWERPLANT = 750 // 'Center' tile of coal power plant.\nexport const LASTPOWERPLANT = 760 // Last tile of coal power plant.\n\n// Fire station (3x3).\nexport const FIRESTBASE = 761 // First tile of fire station.\nexport const FIRESTATION = 765 // 'Center tile' of fire station.\n// 769 last tile fire station.\n\nexport const POLICESTBASE = 770\n// tile 771 -- 773 ?\nexport const POLICESTATION = 774\n// tile 775 -- 778 ?\n\n// Stadium (4x4).\nexport const STADIUMBASE = 779 // First tile stadium.\nexport const STADIUM = 784 // 'Center tile' stadium.\n// Last tile stadium 794.\n\n// tile 785 -- 799 ?\nexport const FULLSTADIUM = 800\n// tile 801 -- 810 ?\n\n// Nuclear power plant (4x4).\nexport const NUCLEARBASE = 811 // First tile nuclear power plant.\nexport const NUCLEAR = 816 // 'Center' tile nuclear power plant.\nexport const LASTZONE = 826 // Also last tile nuclear power plant.\n\nexport const LIGHTNINGBOLT = 827\nexport const HBRDG0 = 828\nexport const HBRDG1 = 829\nexport const HBRDG2 = 830\nexport const HBRDG3 = 831\nexport const HBRDG_END = 832\nexport const RADAR0 = 832\nexport const RADAR1 = 833\nexport const RADAR2 = 834\nexport const RADAR3 = 835\nexport const RADAR4 = 836\nexport const RADAR5 = 837\nexport const RADAR6 = 838\nexport const RADAR7 = 839\nexport const FOUNTAIN = 840\n// tile 841 -- 843: fountain animation.\nexport const INDBASE2 = 844\nexport const TELEBASE = 844\n// tile 845 -- 850 ?\nexport const TELELAST = 851\nexport const SMOKEBASE = 852\n// tile 853 -- 859 ?\nexport const TINYEXP = 860\n// tile 861 -- 863 ?\nexport const SOMETINYEXP = 864\n// tile 865 -- 866 ?\nexport const LASTTINYEXP = 867\n// tile 868 -- 882 ?\nexport const TINYEXPLAST = 883\n// tile 884 -- 915 ?\n\nexport const COALSMOKE1 = 916 // Chimney animation at coal power plant (2, 0).\n// 919 last animation tile for chimney at coal power plant (2, 0).\n\nexport const COALSMOKE2 = 920 // Chimney animation at coal power plant (3, 0).\n// 923 last animation tile for chimney at coal power plant (3, 0).\n\nexport const COALSMOKE3 = 924 // Chimney animation at coal power plant (2, 1).\n// 927 last animation tile for chimney at coal power plant (2, 1).\n\nexport const COALSMOKE4 = 928 // Chimney animation at coal power plant (3, 1).\n// 931 last animation tile for chimney at coal power plant (3, 1).\n\nexport const FOOTBALLGAME1 = 932\n// tile 933 -- 939 ?\nexport const FOOTBALLGAME2 = 940\n// tile 941 -- 947 ?\nexport const VBRDG0 = 948\nexport const VBRDG1 = 949\nexport const VBRDG2 = 950\nexport const VBRDG3 = 951\n\nexport const NUKESWIRL1 = 952\nexport const NUKESWIRL2 = 953\nexport const NUKESWIRL3 = 954\nexport const NUKESWIRL4 = 955\n\n// export const  956-959 unused (originally)\n// original tile count = 960;\n\n// Extended zones: 956-1019\nexport const CHURCH1BASE = 956\nexport const CHURCH1 = 960\nexport const CHURCH2BASE = 965\nexport const CHURCH2 = 969\nexport const CHURCH3BASE = 974\nexport const CHURCH3 = 978\nexport const CHURCH4BASE = 983\nexport const CHURCH4 = 987\nexport const CHURCH5BASE = 992\nexport const CHURCH5 = 996\nexport const CHURCH6BASE = 1001\nexport const CHURCH6 = 1005\nexport const CHURCH7BASE = 1010\nexport const CHURCH7 = 1014\nexport const CHURCH7LAST = 1018\n\n// tiles 1020-1023 unused\n\nexport const TILE_COUNT = 1024\n\nexport const TILE_INVALID = -1 // Invalid tile (not used in the world map).\n","import { TILE_COUNT } from './tileValues'\n\n// Tiles must be 16px square\nconst TILE_SIZE = 16\nconst TILES_PER_ROW = Math.sqrt(TILE_COUNT)\nconst ACCEPTABLE_DIMENSION = TILES_PER_ROW * TILE_SIZE\n\nclass TileSet {\n\n  constructor(image, callback, errorCallback) {\n  // if (!(this instanceof TileSet)) { return new TileSet(image, callback, errorCallback) }\n\n    if (callback === undefined || errorCallback === undefined) {\n      if (callback === undefined && errorCallback === undefined) {\n        throw new Error(\n          'Tileset constructor called with no callback or errorCallback'\n        )\n      } else {\n        throw new Error(\n          'Tileset constructor called with no '\n          + (callback === undefined ? 'callback' : 'errorCallback')\n        )\n      }\n    }\n\n    this.isValid = false\n\n    // if (!(image instanceof Image)) {\n    //   // Spin the event loop\n    //   window.setTimeout(errorCallback, 0)\n    //   return\n    // }\n\n    // Verify image\n    const width = image.width\n    const height = image.height\n\n    // We expect tilesets to be square, and of the required width/height\n    if (width !== height || width !== ACCEPTABLE_DIMENSION) {\n    // // Spin the event loop\n    // window.setTimeout(errorCallback, 0)\n    // return\n    }\n\n    const tileWidth = (this.tileWidth = TILE_SIZE)\n\n    // We paint the image onto a canvas so we can split it up\n    const c = document.createElement('canvas')\n    c.width = tileWidth\n    c.height = tileWidth\n    const cx = c.getContext('2d')\n\n    // Count how many tiles we have created\n    const tileCount = TILE_COUNT\n    let notifications = 0\n    const self = this\n\n    // Callback triggered by an image load. Checks to see if we are done creating images,\n    // and if so notifies the caller.\n    const imageLoad = function () {\n      notifications++\n\n      if (notifications === tileCount) {\n        self.isValid = true\n        // Spin the event loop\n        window.setTimeout(callback, 0)\n\n      }\n    }\n\n    // Break up the source image into tiles by painting each tile onto a canvas, computing the dataURI\n    // of the canvas, and using that to create a new image, which we install on ourselves as a new property\n    for (let i = 0; i < tileCount; i++) {\n      cx.clearRect(0, 0, tileWidth, tileWidth)\n\n      const sourceX = (i % TILES_PER_ROW) * tileWidth\n      const sourceY = Math.floor(i / TILES_PER_ROW) * tileWidth\n      cx.drawImage(\n        image,\n        sourceX,\n        sourceY,\n        tileWidth,\n        tileWidth,\n        0,\n        0,\n        tileWidth,\n        tileWidth\n      )\n\n      this[i] = new Image()\n      this[i].onload = imageLoad\n      this[i].src = c.toDataURL()\n    }\n  }\n\n}\n\nexport { TileSet }\n","\ninterface MathGlobal {\n  random(): number;\n  floor(n: number): number;\n}\n\ntype UpperBoundedRNG = (maxValue: number) => number;\n\ntype SixteenBitRNG = () => number;\n\nfunction getChance(chance: number, rng: SixteenBitRNG = getRandom16): boolean {\n  // tslint:disable-next-line:no-bitwise\n  return (rng() & chance) === 0\n}\n\nfunction getERandom(max: number, rng: UpperBoundedRNG = getRandom): number {\n  const firstCandidate = rng(max)\n  const secondCandidate = rng(max)\n  return Math.min(firstCandidate, secondCandidate)\n}\n\nfunction getRandom(max: number, mathGlobal: MathGlobal = Math): number {\n  return mathGlobal.floor(mathGlobal.random() * (max + 1))\n}\n\nfunction getRandom16(rng: UpperBoundedRNG = getRandom): number {\n  return rng(65535)\n}\n\nfunction getRandom16Signed(rng: SixteenBitRNG = getRandom16) {\n  const value = rng()\n\n  if (value < 32768) {\n    return value\n  } else {\n    return -(2 ** 16) + value\n  }\n}\n\nconst Random = {\n  getChance,\n  getERandom,\n  getRandom,\n  getRandom16,\n  getRandom16Signed,\n}\n\nexport { Random }\n","import { Random } from '../random'\n\nexport type DirectionFn = (direction: Direction) => void;\n\nexport interface Direction {\n  oppositeDirection(): Direction;\n  rotateClockwise(): Direction;\n  rotateCounterClockwise(): Direction;\n}\n\nclass DirectionValue implements Direction {\n\n  constructor(private readonly name: string) {}\n\n  oppositeDirection(): Direction {\n    return this.transform(4)\n  }\n\n  rotateClockwise(): Direction {\n    return this.transform(1)\n  }\n\n  rotateCounterClockwise(): Direction {\n    return this.transform(allDirections.length - 1)\n  }\n\n  toString(): string {\n    return this.name\n  }\n\n  private transform(delta: number): Direction {\n    const ourIndex = directionIndex(this)\n    const desired = ourIndex + delta\n    return allDirections[desired % allDirections.length]\n  }\n}\n\nexport const NORTH = Object.freeze(new DirectionValue('NORTH'))\nexport const NORTHEAST = Object.freeze(new DirectionValue('NORTHEAST'))\nexport const EAST = Object.freeze(new DirectionValue('EAST'))\nexport const SOUTHEAST = Object.freeze(new DirectionValue('SOUTHEAST'))\nexport const SOUTH = Object.freeze(new DirectionValue('SOUTH'))\nexport const SOUTHWEST = Object.freeze(new DirectionValue('SOUTHWEST'))\nexport const WEST = Object.freeze(new DirectionValue('WEST'))\nexport const NORTHWEST = Object.freeze(new DirectionValue('NORTHWEST'))\n\nconst allDirections = [\n  NORTH,\n  NORTHEAST,\n  EAST,\n  SOUTHEAST,\n  SOUTH,\n  SOUTHWEST,\n  WEST,\n  NORTHWEST,\n]\n\nfunction directionIndex(direction: DirectionValue): number {\n  return allDirections.indexOf(direction)\n}\n\nconst cardinalDirections = [\n  NORTH,\n  EAST,\n  SOUTH,\n  WEST,\n]\n\nexport function forEachCardinalDirection(callback: DirectionFn) {\n  cardinalDirections.forEach((dir) => callback(dir))\n}\n\nexport function getRandomCardinalDirection(): Direction {\n  return getRandomDirectionFrom(cardinalDirections)\n}\n\nexport function getRandomDirection(): Direction {\n  return getRandomDirectionFrom(allDirections)\n}\n\nfunction getRandomDirectionFrom(directionArray: Direction[]): Direction {\n  const maxIndex = directionArray.length - 1\n  const index = Random.getRandom(maxIndex)\n  return directionArray[index]\n}\n","export function assert(assertionPassed: boolean, message: string) {\n  if (!assertionPassed) {\n    alert(`Assertion failed: ${message}`)\n  }\n}\n","import * as Direction from './direction'\n\nclass DirectionDelta {\n\n  constructor(readonly xDelta: number, readonly yDelta: number) {}\n}\n\ntype MovementDirection = Direction.Direction;\n\nfunction getDeltaFor(direction: MovementDirection): DirectionDelta {\n  switch (direction) {\n    case Direction.NORTH:\n      return new DirectionDelta(0, -1)\n    case Direction.NORTHEAST:\n      return new DirectionDelta(1, -1)\n    case Direction.EAST:\n      return new DirectionDelta(1, 0)\n    case Direction.SOUTHEAST:\n      return new DirectionDelta(1, 1)\n    case Direction.SOUTH:\n      return new DirectionDelta(0, 1)\n    case Direction.SOUTHWEST:\n      return new DirectionDelta(-1, 1)\n    case Direction.WEST:\n      return new DirectionDelta(-1, 0)\n    case Direction.NORTHWEST:\n      return new DirectionDelta(-1, -1)\n    default:\n      throw new Error(`Unexpected direction!`)\n  }\n}\n\nexport class Position {\n\n  static move(position: Position, direction: MovementDirection): Position {\n    const { x, y } = position\n    const { xDelta, yDelta } = getDeltaFor(direction)\n    return new Position(x + xDelta, y + yDelta)\n  }\n\n  static origin(): Position {\n    return new Position(0, 0)\n  }\n\n  constructor(readonly x: number, readonly y: number) {}\n\n  toString(): string {\n    return `(${this.x}, ${this.y})`\n  }\n}\n","import { assert } from \"../debugAssert\";\nimport { Position } from \"./position\";\n\nexport class Bounds {\n\n    static fromOrigin(width: number, height: number): Bounds {\n        return new Bounds(0, 0, width, height);\n    }\n\n    private readonly exclusiveEndX: number;\n    private readonly exclusiveEndY: number;\n\n    constructor(private readonly inclusiveStartX: number,\n                private readonly inclusiveStartY: number,\n                widthCount: number,\n                heightCount: number) {\n        assert(widthCount > 0, \"bounded region must have a width\");\n        assert(heightCount > 0, \"bounded region must have a width\");\n\n        this.exclusiveEndX = inclusiveStartX + widthCount;\n        this.exclusiveEndY = inclusiveStartY + heightCount;\n    }\n\n    contains(position: Position): boolean {\n        const {x, y} = position;\n        return this.xInBounds(x) && this.yInBounds(y);\n    }\n\n    toString(): string {\n        const upperCorner = new Position(this.inclusiveStartX, this.inclusiveStartY);\n        const lowerCorner = new Position(this.exclusiveEndX - 1, this.exclusiveEndY - 1);\n        return `Bounds Rectangle: ${upperCorner} - ${lowerCorner}`;\n    }\n\n    private xInBounds(x: number): boolean {\n        return x >= this.inclusiveStartX && x < this.exclusiveEndX;\n    }\n\n    private yInBounds(y: number): boolean {\n        return y >= this.inclusiveStartY && y < this.exclusiveEndY;\n    }\n}\n","// Bit-masks for statusBits\nexport const NOFLAGS = 0x0000\nexport const POWERBIT = 0x8000 // bit 15, tile has power.\nexport const CONDBIT = 0x4000 // bit 14. tile can conduct electricity.\nexport const BURNBIT = 0x2000 // bit 13, tile can be lit.\nexport const BULLBIT = 0x1000 // bit 12, tile is bulldozable.\nexport const ANIMBIT = 0x0800 // bit 11, tile is animated.\nexport const ZONEBIT = 0x0400 // bit 10, tile is the center tile of the zone.\n\nexport const BLBNBIT = BULLBIT | BURNBIT\nexport const BLBNCNBIT = BULLBIT | BURNBIT | CONDBIT\nexport const BNCNBIT = BURNBIT | CONDBIT\nexport const ASCBIT = ANIMBIT | CONDBIT | BURNBIT\nexport const ALLBITS = POWERBIT | CONDBIT | BURNBIT | BULLBIT | ANIMBIT | ZONEBIT\n\nexport const BIT_START = 0x400\nexport const BIT_END = 0x8000\nexport const BIT_MASK = BIT_START - 1\n","import * as TileFlags from './tileFlags'\nimport { DIRT, TILE_COUNT, TILE_INVALID } from './tileValues'\n\n/*\nConsider changing logic below.\nMost tile properties, (e.g. whether it is a zone, population, conductiveness,\npollution emitted) are completely defined by the tile value.  We may want a set\nof prototype objects that are essentially immutable, and a TileCreator()\nfunction that returns an object with the correct proto tile, where mutable\nstate such as animation can live.\n\nThis would allow us to cull the getTile/getValue pattern all over the code.\nOne could also have the map then track zones, so that populationDensityScan\nno longer needs to perform another full map scan.\n*/\n\nexport class Tile {\n\n  private value: number\n\n  constructor(value: number = DIRT, flags: number = 0) {\n    this.validateArguments(value, flags, 'Tile constructor')\n    this.value = value | flags\n  }\n\n  getValue(): number {\n    return this.valueFromCombinedValue(this.value)\n  }\n\n  getFlags(): number {\n    return this.flagsFromCombinedValue(this.value)\n  }\n\n  getRawValue(): number {\n    // TODO: Can we remove the caller of this to avoid leaking this implementation detail?\n    return this.value\n  }\n\n  addFlags(flags: number) {\n    this.validateFlags(flags, 'addFlags')\n\n    if (flags === TileFlags.NOFLAGS) {\n      return\n    }\n\n    this.value |= flags\n  }\n\n  setValue(desiredValue: number) {\n    if (desiredValue < TILE_INVALID) {\n      throw new Error(`setValue called with out-of-range value ${desiredValue}`)\n    }\n\n    // TODO: Fix cases where this can be called with a \"combined\" value + flags value so we can simplify\n    const value = this.valueFromCombinedValue(desiredValue)\n    const bitMask = this.flagsToSetFromCombinedValue(desiredValue)\n    this.set(value, bitMask)\n  }\n\n  setFlags(flags: number) {\n    this.validateFlags(flags, 'setFlags')\n\n    const existingValue = this.value & ~TileFlags.ALLBITS\n    this.value = existingValue | flags\n  }\n\n  removeFlags(flags: number) {\n    this.validateFlags(flags, 'removeFlags')\n\n    if (flags === TileFlags.NOFLAGS) {\n      return\n    }\n\n    this.value &= ~flags\n  }\n\n  setFrom(tile: Tile) {\n    if (!tile) {\n      console.log('Tile is undefined')\n      return\n    }\n    this.value = tile.value\n  }\n\n  set(value: number, flags: number) {\n    this.validateArguments(value, flags, 'set')\n\n    this.value = value | flags\n  }\n\n  isAnimated(): boolean {\n    return this.checkBits(TileFlags.ANIMBIT)\n  }\n\n  isBulldozable(): boolean {\n    return this.checkBits(TileFlags.BULLBIT)\n  }\n\n  isConductive(): boolean {\n    return this.checkBits(TileFlags.CONDBIT)\n  }\n\n  isCombustible(): boolean {\n    return this.checkBits(TileFlags.BURNBIT)\n  }\n\n  isPowered(): boolean {\n    return this.checkBits(TileFlags.POWERBIT)\n  }\n\n  isZone(): boolean {\n    return this.checkBits(TileFlags.ZONEBIT)\n  }\n\n  toString(): string {\n    const qualities = [\n      'animated', 'bulldozable', 'combustible', 'conductive', 'powered', 'zone'\n    ]\n    const qualitiesText = qualities.map((quality) => this.getQualityText(quality)).join(', ')\n\n    const tileValue = this.getValue()\n    return `Tile# ${tileValue}: ${qualitiesText}`\n  }\n\n  private getQualityText(quality: string): string {\n    const predicate = this.predicateForQuality(quality)\n    const qualityValue = this[predicate]()\n    return `${quality}: ${this.summariseBoolean(qualityValue)}`\n  }\n\n  private predicateForQuality(quality: string) {\n    return `is${quality[0].toUpperCase()}${quality.slice(1)}`\n  }\n\n  private summariseBoolean(bool: boolean): string {\n    return bool ? `✔` : `✘`\n  }\n\n  private valueFromCombinedValue(value: number): number {\n    return value & TileFlags.BIT_MASK\n  }\n\n  private flagsFromCombinedValue(value: number): number {\n    return value & TileFlags.ALLBITS\n  }\n\n  private flagsToSetFromCombinedValue(value: number): number {\n    const embeddedFlags = this.flagsFromCombinedValue(value)\n    return embeddedFlags > 0 ? embeddedFlags : this.getFlags()\n  }\n\n  private checkBits(flag: number): boolean {\n    return (this.value & flag) > 0\n  }\n\n  private validateArguments(value: number, flags: number, context: string) {\n    this.validateValue(value, context)\n    this.validateFlags(flags, context)\n  }\n\n  private validateValue(value: number, context: string) {\n    if (this.valueIsInvalid(value)) {\n      throw new Error(`${context} called with out-of-range value ${value}`)\n    }\n  }\n\n  private validateFlags(flags: number, context: string) {\n    if (this.flagsAreInvalid(flags)) {\n      throw new Error(`${context} called with out-of-range flags 0x${flags.toString(16)}`)\n    }\n  }\n\n  private valueIsInvalid(value: number): boolean {\n    return value < TILE_INVALID || value >= TILE_COUNT\n  }\n\n  private flagsAreInvalid(flags: number): boolean {\n    return flags !== 0 && (flags < TileFlags.BIT_START || (flags & ~TileFlags.ALLBITS) !== 0)\n  }\n}\n","import { Bounds } from './bounds'\nimport * as Direction from './direction'\nimport { MiscUtils } from '../utils'\nimport { Position } from './position'\nimport { Tile } from '../tiles/tile'\nimport { BNCNBIT, ZONEBIT } from '../tiles/tileFlags'\nimport { TILE_INVALID } from '../tiles/tileValues'\n\nfunction GameMap(width, height, defaultValue) {\n\n  // if (!(this instanceof GameMap)) { return new GameMap(width, height, defaultValue) }\n\n  if (\n    arguments.length > 1\n    && typeof width === 'number'\n    && (width < 1 || height < 1)\n  ) {\n    throw new Error(\n      'GameMap constructor called with invalid width or height '\n        + width\n        + ' '\n        + height\n    )\n  }\n\n  const defaultWidth = 120 // 240\n  const defaultHeight = 100 // 240\n\n  // Argument shuffling\n  if (arguments.length === 0) {\n    width = defaultWidth\n    height = defaultHeight\n\n    defaultValue = new Tile().getValue()\n  } else if (arguments.length === 1) {\n    if (typeof width === 'number') {\n      // Default value\n      defaultValue = width\n    } else {\n      // Tile\n      defaultValue = width.getValue()\n    }\n\n    width = defaultWidth\n    height = defaultHeight\n  } else if (arguments.length === 2) {\n    defaultValue = new Tile().getValue()\n  } else if (arguments.length === 3) {\n    if (typeof defaultValue === 'object') defaultValue = defaultValue.getValue()\n  }\n\n  this.width = width\n  this.height = height\n  this.bounds = Bounds.fromOrigin(width, height)\n\n  const data = []\n  for (let i = 0, l = width * height; i < l; i++) { data[i] = new Tile(defaultValue) }\n  this._data = data\n\n  // Generally set externally\n  this.cityCentreX = Math.floor(this.width / 2)\n  this.cityCentreY = Math.floor(this.height / 2)\n  this.pollutionMaxX = this.cityCentreX\n  this.pollutionMaxY = this.cityCentreY\n}\n\nconst saveProps = [\n  'cityCentreX',\n  'cityCentreY',\n  'pollutionMaxX',\n  'pollutionMaxY',\n  'width',\n  'height',\n]\n\nGameMap.prototype.save = function (saveData) {\n  for (let i = 0, l = saveProps.length; i < l; i++) {\n    saveData[saveProps[i]] = this[saveProps[i]]\n  }\n\n  saveData.map = this._data.map(function (t) {\n    return { value: t.getRawValue() }\n  })\n}\n\nGameMap.prototype.load = function (saveData) {\n  for (var i = 0, l = saveProps.length; i < l; i++) {\n    this[saveProps[i]] = saveData[saveProps[i]] || this[saveProps[i]]\n  }\n\n  const map = saveData.map\n  for (i = 0, l = map.length; i < l; i++) {\n    this.setTileValue(\n      i % this.width,\n      Math.floor(i / this.width),\n      map[i].value\n    )\n  }\n}\n\nGameMap.prototype._calculateIndex = function (x, y) {\n  return x + y * this.width\n}\n\nGameMap.prototype.isPositionInBounds = function (pos) {\n  return this.bounds.contains(pos)\n}\n\nGameMap.prototype.testBounds = function (x, y) {\n  return this.isPositionInBounds(new Position(x, y))\n}\n\nGameMap.prototype.getTile = function (x, y, newTile) {\n  // Argument-shuffling\n  if (typeof x === 'object') {\n    y = x.y\n    x = x.x\n  }\n\n  const width = this.width\n  const height = this.height\n\n  if (x < 0 || y < 0 || x >= width || y >= height) {\n    console.warn('getTile called with bad bounds', x, y)\n    return new Tile(TILE_INVALID)\n  }\n\n  const tileIndex = x + y * width\n  const tile = this._data[tileIndex]\n\n  // Return the original tile if we're not given a tile to fill\n  if (!newTile) return tile\n\n  newTile.setFrom(tile)\n  return tile\n}\n\nGameMap.prototype.getTileValue = function (x, y) {\n  if (arguments.length < 1) {\n    throw new Error(\n      'GameMap getTileValue called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (typeof x === 'object') {\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap getTileValue called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  if (!this._data[tileIndex]) return\n  return this._data[tileIndex].getValue()\n}\n\nGameMap.prototype.getTileFlags = function (x, y) {\n  if (arguments.length < 1) {\n    throw new Error(\n      'GameMap getTileFlags called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (typeof x === 'object') {\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap getTileFlags called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  return this._data[tileIndex].getFlags()\n}\n\nGameMap.prototype.getTiles = function (x, y, w, h) {\n  if (arguments.length < 3) {\n    throw new Error(\n      'GameMap getTiles called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 3) {\n    h = w\n    w = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap getTiles called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const res = []\n  for (let a = y, ylim = y + h; a < ylim; a++) {\n    res[a - y] = []\n    for (let b = x, xlim = x + w; b < xlim; b++) {\n      const tileIndex = this._calculateIndex(b, a)\n      res[a - y].push(this._data[tileIndex])\n    }\n  }\n  return res\n}\n\nGameMap.prototype.getTileValuesForPainting = function (x, y, w, h, result) {\n  result = result || []\n\n  if (arguments.length < 3) {\n    throw new Error(\n      'GameMap getTileValuesForPainting called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 3) {\n    h = w\n    w = y\n    y = x.y\n    x = x.x\n  }\n\n  const width = this.width\n  const height = this.height\n  // Result is stored in row-major order\n  for (let a = y, ylim = y + h; a < ylim; a++) {\n    for (let b = x, xlim = x + w; b < xlim; b++) {\n      if (a < 0 || b < 0 || a >= height || b >= width) {\n        result[(a - y) * w + (b - x)] = TILE_INVALID\n        continue\n      }\n\n      const tileIndex = b + a * width\n\n      if (!this._data[tileIndex]) console.log(tileIndex, width, height, this._data)\n\n      result[(a - y) * w + (b - x)] = this._data[tileIndex].getRawValue()\n    }\n  }\n\n  return result\n}\n\nGameMap.prototype.getTileFromMapOrDefault = function (pos, dir, defaultTile) {\n  switch (dir) {\n    case Direction.NORTH:\n      if (pos.y > 0) return this.getTileValue(pos.x, pos.y - 1)\n      return defaultTile\n\n    case Direction.EAST:\n      if (pos.x < this.width - 1) return this.getTileValue(pos.x + 1, pos.y)\n\n      return defaultTile\n\n    case Direction.SOUTH:\n      if (pos.y < this.height - 1) return this.getTileValue(pos.x, pos.y + 1)\n\n      return defaultTile\n\n    case Direction.WEST:\n      if (pos.x > 0) return this.getTileValue(pos.x - 1, pos.y)\n\n      return defaultTile\n\n    default:\n      return defaultTile\n  }\n}\n\nGameMap.prototype.setTile = function (x, y, value, flags) {\n  if (arguments.length < 3) {\n    throw new Error(\n      'GameMap setTile called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 3) {\n    flags = value\n    value = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap setTile called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  this._data[tileIndex].set(value, flags)\n}\n\nGameMap.prototype.setTo = function (x, y, tile) {\n  if (arguments.length < 2) {\n    throw new Error(\n      'GameMap setTo called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (tile === undefined) {\n    tile = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) { throw new Error('GameMap setTo called with invalid bounds ' + x + ', ' + y) }\n\n  const tileIndex = this._calculateIndex(x, y)\n  this._data[tileIndex] = tile\n}\n\nGameMap.prototype.setTileValue = function (x, y, value) {\n  if (arguments.length < 2) {\n    throw new Error(\n      'GameMap setTileValue called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 2) {\n    value = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    // throw new Error(\n      console.log('GameMap setTileValue called with invalid bounds ' + x + ', ' + y)\n    // )\n    ReadableStreamDefaultController\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  if (!this._data[tileIndex]) return\n  this._data[tileIndex].setValue(value)\n}\n\nGameMap.prototype.setTileFlags = function (x, y, flags) {\n  if (arguments.length < 2) {\n    throw new Error(\n      'GameMap setTileFlags called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 2) {\n    flags = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap setTileFlags called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  this._data[tileIndex].setFlags(flags)\n}\n\nGameMap.prototype.addTileFlags = function (x, y, flags) {\n  if (arguments.length < 2) {\n    throw new Error(\n      'GameMap addTileFlags called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 2) {\n    flags = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap addTileFlags called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  this._data[tileIndex].addFlags(flags)\n}\n\nGameMap.prototype.removeTileFlags = function (x, y, flags) {\n  if (arguments.length < 2) {\n    throw new Error(\n      'GameMap removeTileFlags called with too few arguments'\n        + [].toString.apply(arguments)\n    )\n  }\n\n  // Argument-shuffling\n  if (arguments.length === 2) {\n    flags = y\n    y = x.y\n    x = x.x\n  }\n\n  if (!this.testBounds(x, y)) {\n    throw new Error(\n      'GameMap removeTileFlags called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  const tileIndex = this._calculateIndex(x, y)\n  this._data[tileIndex].removeFlags(flags)\n}\n\nGameMap.prototype.putZone = function (centreX, centreY, centreTile, size) {\n  let x, y\n\n  if (\n    !this.testBounds(centreX, centreY)\n    || !this.testBounds(centreX - 1 + size - 1, centreY - 1 + size - 1)\n  ) {\n    throw new Error(\n      'GameMap putZone called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  let tile = centreTile - 1 - size\n  const startX = centreX - 1\n  const startY = centreY - 1\n\n  for (y = startY; y < startY + size; y++) {\n    for (x = startX; x < startX + size; x++) {\n      if (x === centreX && y === centreY) { this.setTo(x, y, new Tile(tile, BNCNBIT | ZONEBIT)) } else this.setTo(x, y, new Tile(tile, BNCNBIT))\n      tile += 1\n    }\n  }\n}\n\nexport { GameMap }\n","import {\n  forEachCardinalDirection,\n  getRandomCardinalDirection,\n  getRandomDirection,\n} from './direction'\nimport { GameMap } from './gameMap'\nimport { Position } from './position'\nimport { Random } from '../random'\nimport { BLBNBIT, BULLBIT } from '../tiles/tileFlags'\nimport {\n  CHANNEL,\n  DIRT,\n  REDGE,\n  RIVER,\n  WATER_LOW,\n  WATER_HIGH,\n  WOODS,\n  WOODS_LOW,\n  WOODS_HIGH,\n} from '../tiles/tileValues'\n\nlet TERRAIN_CREATE_ISLAND\nconst TERRAIN_TREE_LEVEL = -1\nconst TERRAIN_LAKE_LEVEL = -1\nconst TERRAIN_CURVE_LEVEL = -1\nconst ISLAND_RADIUS = 18\n\nconst clearMap = function (map) {\n  for (let x = 0; x < map.width; x++) {\n    for (let y = 0; y < map.height; y++) {\n      map.setTile(x, y, DIRT, 0)\n    }\n  }\n}\n\nconst clearUnnatural = function (map) {\n  for (let x = 0; x < map.width; x++) {\n    for (let y = 0; y < map.height; y++) {\n      const tileValue = map.getTileValue(x, y)\n      if (tileValue > WOODS) map.setTile(x, y, DIRT, 0)\n    }\n  }\n}\n\nvar makeNakedIsland = function (map) {\n  const terrainIslandRadius = ISLAND_RADIUS\n  let x, y\n\n  for (x = 0; x < map.width; x++) {\n    for (y = 0; y < map.height; y++) {\n      if (x < 5 || x >= map.width - 5 || y < 5 || y >= map.height - 5) {\n        map.setTile(x, y, RIVER, 0)\n      } else {\n        map.setTile(x, y, DIRT, 0)\n      }\n    }\n  }\n\n  for (x = 0; x < map.width - 5; x += 2) {\n    let mapY = Random.getERandom(terrainIslandRadius)\n    plopBRiver(map, new Position(x, mapY))\n\n    mapY = map.height - 10 - Random.getERandom(terrainIslandRadius)\n    plopBRiver(map, new Position(x, mapY))\n\n    plopSRiver(map, new Position(x, 0))\n    plopSRiver(map, new Position(x, map.height - 6))\n  }\n\n  for (y = 0; y < map.height - 5; y += 2) {\n    let mapX = Random.getERandom(terrainIslandRadius)\n    plopBRiver(map, new Position(mapX, y))\n\n    mapX = map.width - 10 - Random.getERandom(terrainIslandRadius)\n    plopBRiver(map, new Position(mapX, y))\n\n    plopSRiver(map, new Position(0, y))\n    plopSRiver(map, new Position(map.width - 6, y))\n  }\n}\n\nvar makeIsland = function (map) {\n  makeNakedIsland(map)\n  smoothRiver(map)\n  doTrees(map)\n}\n\nvar makeLakes = function (map) {\n  let numLakes\n  if (TERRAIN_LAKE_LEVEL < 0) numLakes = Random.getRandom(10)\n  else numLakes = TERRAIN_LAKE_LEVEL / 2\n\n  while (numLakes > 0) {\n    const x = Random.getRandom(map.width - 21) + 10\n    const y = Random.getRandom(map.height - 20) + 10\n\n    makeSingleLake(map, new Position(x, y))\n    numLakes--\n  }\n}\n\nvar makeSingleLake = function (map, pos) {\n  let numPlops = Random.getRandom(12) + 2\n\n  while (numPlops > 0) {\n    const plopPos = new Position(\n      pos,\n      Random.getRandom(12) - 6,\n      Random.getRandom(12) - 6\n    )\n\n    if (Random.getRandom(4)) plopSRiver(map, plopPos)\n    else plopBRiver(map, plopPos)\n\n    numPlops--\n  }\n}\n\nconst treeSplash = function (map, x, y) {\n  let numTrees\n\n  if (TERRAIN_TREE_LEVEL < 0) numTrees = Random.getRandom(150) + 50\n  else numTrees = Random.getRandom(100 + TERRAIN_TREE_LEVEL * 2) + 50\n\n  let treePos = new Position(x, y)\n\n  while (numTrees > 0) {\n    const dir = getRandomDirection()\n    treePos = Position.move(treePos, dir)\n\n    if (!map.isPositionInBounds(treePos)) return\n\n    if (map.getTileValue(treePos) === DIRT) map.setTile(treePos, WOODS, BLBNBIT)\n\n    numTrees--\n  }\n}\n\nvar doTrees = function (map) {\n  let amount\n\n  if (TERRAIN_TREE_LEVEL < 0) amount = Random.getRandom(100) + 50\n  else amount = TERRAIN_TREE_LEVEL + 3\n\n  for (let x = 0; x < amount; x++) {\n    const xloc = Random.getRandom(map.width - 1)\n    const yloc = Random.getRandom(map.height - 1)\n    treeSplash(map, xloc, yloc)\n  }\n\n  smoothTrees(map)\n  smoothTrees(map)\n}\n\nconst riverEdges = [\n  13 | BULLBIT,\n  13 | BULLBIT,\n  17 | BULLBIT,\n  15 | BULLBIT,\n  5 | BULLBIT,\n  RIVER,\n  19 | BULLBIT,\n  17 | BULLBIT,\n  9 | BULLBIT,\n  11 | BULLBIT,\n  RIVER,\n  13 | BULLBIT,\n  7 | BULLBIT,\n  9 | BULLBIT,\n  5 | BULLBIT,\n  RIVER,\n]\n\nvar smoothRiver = function (map) {\n  const dx = [-1, 0, 1, 0]\n  const dy = [0, 1, 0, -1]\n\n  for (let x = 0; x < map.width; x++) {\n    for (let y = 0; y < map.height; y++) {\n      if (map.getTileValue(x, y) === REDGE) {\n        let bitIndex = 0\n\n        for (let z = 0; z < 4; z++) {\n          bitIndex = bitIndex << 1\n          const xTemp = x + dx[z]\n          const yTemp = y + dy[z]\n          if (\n            map.testBounds(xTemp, yTemp)\n            && map.getTileValue(xTemp, yTemp) !== DIRT\n            && (map.getTileValue(xTemp, yTemp) < WOODS_LOW\n              || map.getTileValue(xTemp, yTemp) > WOODS_HIGH)\n          ) {\n            bitIndex++\n          }\n        }\n\n        let temp = riverEdges[bitIndex & 15]\n        if (temp !== RIVER && Random.getRandom(1)) temp++\n\n        map.setTileValue(x, y, temp, 0)\n      }\n    }\n  }\n}\n\nconst isTree = function (tileValue) {\n  return tileValue >= WOODS_LOW && tileValue <= WOODS_HIGH\n}\n\nvar smoothTrees = function (map) {\n  for (let x = 0; x < map.width; x++) {\n    for (let y = 0; y < map.height; y++) {\n      if (isTree(map.getTileValue(x, y))) smoothTreesAt(map, x, y, false)\n    }\n  }\n}\n\nconst treeTable = [0, 0, 0, 34, 0, 0, 36, 35, 0, 32, 0, 33, 30, 31, 29, 37]\n\nvar smoothTreesAt = function (map, x, y, preserve) {\n  const dx = [-1, 0, 1, 0]\n  const dy = [0, 1, 0, -1]\n  if (!isTree(map.getTileValue(x, y))) return\n\n  let bitIndex = 0\n  for (let i = 0; i < 4; i++) {\n    bitIndex = bitIndex << 1\n    const xTemp = x + dx[i]\n    const yTemp = y + dy[i]\n    if (map.testBounds(xTemp, yTemp) && isTree(map.getTileValue(xTemp, yTemp))) { bitIndex++ }\n  }\n\n  let temp = treeTable[bitIndex & 15]\n  if (temp) {\n    if (temp !== WOODS) {\n      if ((x + y) & 1) temp = temp - 8\n    }\n    map.setTile(x, y, temp, BLBNBIT)\n  } else {\n    if (!preserve) map.setTileValue(x, y, temp, 0)\n  }\n}\n\nvar doRivers = function (map, terrainPos) {\n  let riverDir = getRandomCardinalDirection()\n  doBRiver(map, terrainPos, riverDir, riverDir)\n\n  riverDir = riverDir.oppositeDirection()\n  const terrainDir = doBRiver(map, terrainPos, riverDir, riverDir)\n\n  riverDir = getRandomCardinalDirection()\n  doSRiver(map, terrainPos, riverDir, terrainDir)\n}\n\nvar doBRiver = function (map, pos, riverDir, terrainDir) {\n  let rate1, rate2\n\n  if (TERRAIN_CURVE_LEVEL < 0) {\n    rate1 = 100\n    rate2 = 200\n  } else {\n    rate1 = TERRAIN_CURVE_LEVEL + 10\n    rate2 = TERRAIN_CURVE_LEVEL + 100\n  }\n\n  while (map.testBounds(pos.x + 4, pos.y + 4)) {\n    plopBRiver(map, pos)\n    if (Random.getRandom(rate1) < 10) {\n      terrainDir = riverDir\n    } else {\n      if (Random.getRandom(rate2) > 90) { terrainDir = terrainDir.rotateClockwise() }\n      if (Random.getRandom(rate2) > 90) { terrainDir = terrainDir.rotateCounterClockwise() }\n    }\n    pos = Position.move(pos, terrainDir)\n  }\n\n  return terrainDir\n}\n\nvar doSRiver = function (map, pos, riverDir, terrainDir) {\n  let rate1, rate2\n\n  if (TERRAIN_CURVE_LEVEL < 0) {\n    rate1 = 100\n    rate2 = 200\n  } else {\n    rate1 = TERRAIN_CURVE_LEVEL + 10\n    rate2 = TERRAIN_CURVE_LEVEL + 100\n  }\n\n  while (map.testBounds(pos.x + 3, pos.y + 3)) {\n    plopSRiver(map, pos)\n    if (Random.getRandom(rate1) < 10) {\n      terrainDir = riverDir\n    } else {\n      if (Random.getRandom(rate2) > 90) { terrainDir = terrainDir.rotateClockwise() }\n      if (Random.getRandom(rate2) > 90) { terrainDir = terrainDir.rotateCounterClockwise() }\n    }\n    pos = Position.move(pos, terrainDir)\n  }\n\n  return terrainDir\n}\n\nconst putOnMap = function (map, newVal, x, y) {\n  if (newVal === 0) return\n\n  if (!map.testBounds(x, y)) return\n\n  const tileValue = map.getTileValue(x, y)\n\n  if (tileValue !== DIRT) {\n    if (tileValue === RIVER) {\n      if (newVal !== CHANNEL) return\n    }\n    if (tileValue === CHANNEL) return\n  }\n  map.setTile(x, y, newVal, 0)\n}\n\nvar plopBRiver = function (map, pos) {\n  const BRMatrix = [\n    [0, 0, 0, REDGE, REDGE, REDGE, 0, 0, 0],\n    [0, 0, REDGE, RIVER, RIVER, RIVER, REDGE, 0, 0],\n    [0, REDGE, RIVER, RIVER, RIVER, RIVER, RIVER, REDGE, 0],\n    [REDGE, RIVER, RIVER, RIVER, RIVER, RIVER, RIVER, RIVER, REDGE],\n    [REDGE, RIVER, RIVER, RIVER, CHANNEL, RIVER, RIVER, RIVER, REDGE],\n    [REDGE, RIVER, RIVER, RIVER, RIVER, RIVER, RIVER, RIVER, REDGE],\n    [0, REDGE, RIVER, RIVER, RIVER, RIVER, RIVER, REDGE, 0],\n    [0, 0, REDGE, RIVER, RIVER, RIVER, REDGE, 0, 0],\n    [0, 0, 0, REDGE, REDGE, REDGE, 0, 0, 0],\n  ]\n\n  for (let x = 0; x < 9; x++) {\n    for (let y = 0; y < 9; y++) {\n      putOnMap(map, BRMatrix[y][x], pos.x + x, pos.y + y)\n    }\n  }\n}\n\nvar plopSRiver = function (map, pos) {\n  const SRMatrix = [\n    [0, 0, REDGE, REDGE, 0, 0],\n    [0, REDGE, RIVER, RIVER, REDGE, 0],\n    [REDGE, RIVER, RIVER, RIVER, RIVER, REDGE],\n    [REDGE, RIVER, RIVER, RIVER, RIVER, REDGE],\n    [0, REDGE, RIVER, RIVER, REDGE, 0],\n    [0, 0, REDGE, REDGE, 0, 0],\n  ]\n\n  for (let x = 0; x < 6; x++) {\n    for (let y = 0; y < 6; y++) {\n      putOnMap(map, SRMatrix[y][x], pos.x + x, pos.y + y)\n    }\n  }\n}\n\nconst smoothWater = function (map) {\n  let x, y, tile, pos, dir\n\n  for (x = 0; x < map.width; x++) {\n    for (y = 0; y < map.height; y++) {\n      tile = map.getTileValue(x, y)\n\n      if (tile >= WATER_LOW && tile <= WATER_HIGH) {\n        pos = new Position(x, y)\n        let stop = false\n\n        forEachCardinalDirection((dir) => {\n          if (stop) {\n            return\n          }\n\n          tile = map.getTileFromMap(pos, dir, WATER_LOW)\n\n          /* If nearest object is not water: */\n          if (tile < WATER_LOW || tile > WATER_HIGH) {\n            map.setTileValue(x, y, REDGE, 0) /* set river edge */\n            stop = true // Continue with next tile\n          }\n        })\n      }\n    }\n  }\n\n  for (x = 0; x < map.width; x++) {\n    for (y = 0; y < map.height; y++) {\n      tile = map.getTileValue(x, y)\n\n      if (tile !== CHANNEL && tile >= WATER_LOW && tile <= WATER_HIGH) {\n        var makeRiver = true\n\n        pos = new Position(x, y)\n\n        forEachCardinalDirection((dir) => {\n          if (!makeRiver) {\n            return\n          }\n\n          tile = map.getTileFromMapOrDefault(pos, dir, WATER_LOW)\n\n          if (tile < WATER_LOW || tile > WATER_HIGH) {\n            makeRiver = false\n          }\n        })\n\n        if (makeRiver) map.setTileValue(x, y, RIVER, 0)\n      }\n    }\n  }\n\n  for (x = 0; x < map.width; x++) {\n    for (y = 0; y < map.height; y++) {\n      tile = map.getTileValue(x, y)\n\n      if (tile >= WOODS_LOW && tile <= WOODS_HIGH) {\n        pos = new Position(x, y)\n        let stop = false\n\n        forEachCardinalDirection((dir) => {\n          if (stop) {\n            return\n          }\n\n          tile = map.getTileFromMapOrDefault(pos, dir, TILE_INVALID)\n\n          if (tile === RIVER || tile === CHANNEL) {\n            map.setTileValue(x, y, REDGE, 0) /* make it water's edge */\n            stop = true\n          }\n        })\n      }\n    }\n  }\n}\n\nconst MapGenerator = function (w, h) {\n  w = w || 120 // 120\n  h = h || 100 // 100\n\n  TERRAIN_CREATE_ISLAND = Random.getRandom(2) - 1\n\n  const map = new GameMap(w, h)\n\n  // Construct land.\n  if (TERRAIN_CREATE_ISLAND < 0) {\n    if (Random.getRandom(100) < 10) {\n      makeIsland(map)\n      return map\n    }\n  }\n\n  if (TERRAIN_CREATE_ISLAND === 1) makeNakedIsland(map)\n  else clearMap(map)\n\n  // Lay a river.\n  if (TERRAIN_CURVE_LEVEL !== 0) {\n    const terrainXStart = 40 + Random.getRandom(map.width - 80)\n    const terrainYStart = 33 + Random.getRandom(map.height - 67)\n\n    const terrainPos = new Position(terrainXStart, terrainYStart)\n    doRivers(map, terrainPos)\n  }\n\n  // Lay a few lakes.\n  if (TERRAIN_LAKE_LEVEL !== 0) makeLakes(map)\n\n  smoothRiver(map)\n\n  // And add trees.\n  if (TERRAIN_TREE_LEVEL !== 0) doTrees(map)\n\n  return map\n}\n\nexport { MapGenerator }\n","interface BlockCoordinate {\n  x: number;\n  y: number;\n}\n\ntype ForEachFunction = (x: number, y: number) => any;\n\ntype TransformationFunction = (n: number) => number;\n\nconst ID: TransformationFunction = (n) => n;\n\n/*\n *\n * BlockMaps are data maps where each entry corresponds to data representing a block of tiles in the original\n * game map.\n *\n */\n\nexport class BlockMap {\n\n  // tslint:disable-next-line:variable-name\n  private _width: number;\n  // tslint:disable-next-line:variable-name\n  private _height: number;\n  private data: number[] = [];\n\n  // Construct a block map. Takes three integers: the game map's width and height, and the block size (i.e. how many\n  // tiles in each direction should map to the same block). The BlockMap entries will be initialised to zero.\n  constructor(readonly gameMapWidth: number, readonly gameMapHeight: number, readonly blockSize: number) {\n    this._width = this.convertToBlockCount(this.gameMapWidth);\n    this._height = this.convertToBlockCount(this.gameMapHeight);\n    this.clear();\n  }\n\n  get width(): number {\n    return this._width;\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  public get(blockX: number, blockY: number): number {\n    const index = this.toIndex(blockX, blockY);\n    return this.data[index];\n  }\n\n  public set(blockX: number, blockY: number, value: number) {\n    const index = this.toIndex(blockX, blockY);\n    this.data[index] = value;\n  }\n\n  public worldGet(worldX: number, worldY: number): number {\n    const {x, y} = this.toBlockCoordinate(worldX, worldY);\n    return this.get(x, y);\n  }\n\n  public worldSet(worldX: number, worldY: number, value: number) {\n    const {x, y} = this.toBlockCoordinate(worldX, worldY);\n    this.set(x, y, value);\n  }\n\n  public clear() {\n    this.forEach((x, y) => this.set(x, y, 0));\n  }\n\n  public copyFrom(source: BlockMap, transform: TransformationFunction = ID) {\n    if (this.hasIncompatibleDimensions(source)) {\n      console.warn(\"Copying from incompatible blockMap!\");\n    }\n\n    this.forEach((x, y) => this.set(x, y, transform(source.get(x, y))));\n  }\n\n  private forEach(fn: ForEachFunction) {\n    const maxWidth = this.width;\n    const maxHeight = this.height;\n\n    for (let x = 0; x < maxWidth; x++) {\n      for (let y = 0; y < maxHeight; y++) {\n        fn(x, y);\n      }\n    }\n  }\n\n  private convertToBlockCount(value: number) {\n    return Math.floor((value + this.blockSize - 1) / this.blockSize);\n  }\n\n  private hasIncompatibleDimensions(map: BlockMap): boolean {\n    return map.gameMapHeight !== this.gameMapHeight ||\n           map.gameMapWidth !== this.gameMapWidth ||\n           map.blockSize !== this.blockSize;\n  }\n\n  private toBlockCoordinate(worldX: number, worldY: number): BlockCoordinate {\n    const x = this.toBlockIndex(worldX);\n    const y = this.toBlockIndex(worldY);\n    return {x, y};\n  }\n\n  private toBlockIndex(worldIndex: number): number {\n    return Math.floor(worldIndex / this.blockSize);\n  }\n\n  private toIndex(blockX: number, blockY: number) {\n    return this.width * blockY + blockX;\n  }\n}\n","import { Random } from '../random'\nimport { Tile } from './tile'\nimport { ANIMBIT, BULLBIT } from './tileFlags'\nimport * as TileValues from './tileValues'\n\nconst unwrapTile = function (f) {\n  return function (tile) {\n    if (tile instanceof Tile) tile = tile.getValue()\n    return f.call(null, tile)\n  }\n}\n\nconst canBulldoze = unwrapTile(function (tileValue) {\n  return (\n    (tileValue >= TileValues.FIRSTRIVEDGE\n      && tileValue <= TileValues.LASTRUBBLE)\n    || (tileValue >= TileValues.POWERBASE + 2\n      && tileValue <= TileValues.POWERBASE + 12)\n    || (tileValue >= TileValues.TINYEXP && tileValue <= TileValues.LASTTINYEXP + 2)\n  )\n})\n\nconst isCommercial = unwrapTile(function (tile) {\n  return tile >= TileValues.COMBASE && tile < TileValues.INDBASE\n})\n\nconst isCommercialZone = function (tile) {\n  return tile.isZone() && isCommercial(tile)\n}\n\nconst isDriveable = unwrapTile(function (tile) {\n  return (\n    (tile >= TileValues.ROADBASE && tile <= TileValues.LASTROAD)\n    || (tile >= TileValues.RAILHPOWERV && tile <= TileValues.LASTRAIL)\n  )\n})\n\nconst isFire = unwrapTile(function (tile) {\n  return tile >= TileValues.FIREBASE && tile < TileValues.ROADBASE\n})\n\nconst isFlood = unwrapTile(function (tile) {\n  return tile >= TileValues.FLOOD && tile < TileValues.LASTFLOOD\n})\n\nconst isIndustrial = unwrapTile(function (tile) {\n  return tile >= TileValues.INDBASE && tile < TileValues.PORTBASE\n})\n\nconst isIndustrialZone = function (tile) {\n  return tile.isZone() && isIndustrial(tile)\n}\n\nconst isManualExplosion = unwrapTile(function (tile) {\n  return tile >= TileValues.TINYEXP && tile <= TileValues.LASTTINYEXP\n})\n\nconst isRail = unwrapTile(function (tile) {\n  return tile >= TileValues.RAILBASE && tile < TileValues.RESBASE\n})\n\nconst isResidential = unwrapTile(function (tile) {\n  return tile >= TileValues.RESBASE && tile < TileValues.HOSPITALBASE\n})\n\nconst isResidentialZone = function (tile) {\n  return tile.isZone() && isResidential(tile)\n}\n\nconst isRoad = unwrapTile(function (tile) {\n  return tile >= TileValues.ROADBASE && tile < TileValues.POWERBASE\n})\n\nconst normalizeRoad = unwrapTile(function (tile) {\n  return tile >= TileValues.ROADBASE && tile <= TileValues.LASTROAD + 1\n    ? (tile & 15) + 64\n    : tile\n})\n\nconst randomFire = function () {\n  return new Tile(TileValues.FIRE + (Random.getRandom16() & 3), ANIMBIT)\n}\n\nconst randomRubble = function () {\n  return new Tile(TileValues.RUBBLE + (Random.getRandom16() & 3), BULLBIT)\n}\n\nconst TileUtils = {\n  canBulldoze,\n  isCommercial,\n  isCommercialZone,\n  isDriveable,\n  isFire,\n  isFlood,\n  isIndustrial,\n  isIndustrialZone,\n  isManualExplosion,\n  isRail,\n  isResidential,\n  isResidentialZone,\n  isRoad,\n  normalizeRoad,\n  randomFire,\n  randomRubble,\n}\n\nexport { TileUtils }\n","const clamp = function (value, min, max) {\n  if (value < min) return min\n  if (value > max) return max\n\n  return value\n}\n\nconst makeConstantDescriptor = function (value) {\n  return {\n    configurable: false,\n    enumerable: false,\n    writeable: false,\n    value,\n  }\n}\n\nconst normaliseDOMid = function (id) {\n  return (id[0] !== '#' ? '#' : '') + id\n}\n\nconst reflectEvent = function (message, value) {\n  this._emitEvent(message, value)\n}\n\nconst MiscUtils = {\n  clamp,\n  makeConstantDescriptor,\n  normaliseDOMid,\n  reflectEvent,\n}\n\nexport { MiscUtils }\n","export const SPRITE_TRAIN = 1\nexport const SPRITE_HELICOPTER = 2\nexport const SPRITE_AIRPLANE = 3\nexport const SPRITE_SHIP = 4\nexport const SPRITE_MONSTER = 5\nexport const SPRITE_TORNADO = 6\nexport const SPRITE_EXPLOSION = 7\n\nexport const SpriteConstants = {\n  SPRITE_TRAIN,\n  SPRITE_HELICOPTER,\n  SPRITE_AIRPLANE,\n  SPRITE_SHIP,\n  SPRITE_MONSTER,\n  SPRITE_TORNADO,\n  SPRITE_EXPLOSION\n}","import { MiscUtils } from '../utils'\nimport { BULLBIT, POWERBIT } from '../tiles/tileFlags'\nimport * as TileValues from '../tiles/tileValues'\n\nconst checkBigZone = function (tileValue) {\n  let result\n\n  switch (tileValue) {\n    case TileValues.POWERPLANT:\n    case TileValues.PORT:\n    case TileValues.NUCLEAR:\n    case TileValues.STADIUM:\n      result = { zoneSize: 4, deltaX: 0, deltaY: 0 }\n      break\n\n    case TileValues.POWERPLANT + 1:\n    case TileValues.COALSMOKE3:\n    case TileValues.COALSMOKE3 + 1:\n    case TileValues.COALSMOKE3 + 2:\n    case TileValues.PORT + 1:\n    case TileValues.NUCLEAR + 1:\n    case TileValues.STADIUM + 1:\n      result = { zoneSize: 4, deltaX: -1, deltaY: 0 }\n      break\n\n    case TileValues.POWERPLANT + 4:\n    case TileValues.PORT + 4:\n    case TileValues.NUCLEAR + 4:\n    case TileValues.STADIUM + 4:\n      result = { zoneSize: 4, deltaX: 0, deltaY: -1 }\n      break\n\n    case TileValues.POWERPLANT + 5:\n    case TileValues.PORT + 5:\n    case TileValues.NUCLEAR + 5:\n    case TileValues.STADIUM + 5:\n      result = { zoneSize: 4, deltaX: -1, deltaY: -1 }\n      break\n\n    case TileValues.AIRPORT:\n      result = { zoneSize: 6, deltaX: 0, deltaY: 0 }\n      break\n\n    case TileValues.AIRPORT + 1:\n      result = { zoneSize: 6, deltaX: -1, deltaY: 0 }\n      break\n\n    case TileValues.AIRPORT + 2:\n      result = { zoneSize: 6, deltaX: -2, deltaY: 0 }\n      break\n\n    case TileValues.AIRPORT + 3:\n      result = { zoneSize: 6, deltaX: -3, deltaY: 0 }\n      break\n\n    case TileValues.AIRPORT + 6:\n      result = { zoneSize: 6, deltaX: 0, deltaY: -1 }\n      break\n\n    case TileValues.AIRPORT + 7:\n      result = { zoneSize: 6, deltaX: -1, deltaY: -1 }\n      break\n\n    case TileValues.AIRPORT + 8:\n      result = { zoneSize: 6, deltaX: -2, deltaY: -1 }\n      break\n\n    case TileValues.AIRPORT + 9:\n      result = { zoneSize: 6, deltaX: -3, deltaY: -1 }\n      break\n\n    case TileValues.AIRPORT + 12:\n      result = { zoneSize: 6, deltaX: 0, deltaY: -2 }\n      break\n\n    case TileValues.AIRPORT + 13:\n      result = { zoneSize: 6, deltaX: -1, deltaY: -2 }\n      break\n\n    case TileValues.AIRPORT + 14:\n      result = { zoneSize: 6, deltaX: -2, deltaY: -2 }\n      break\n\n    case TileValues.AIRPORT + 15:\n      result = { zoneSize: 6, deltaX: -3, deltaY: -2 }\n      break\n\n    case TileValues.AIRPORT + 18:\n      result = { zoneSize: 6, deltaX: 0, deltaY: -3 }\n      break\n\n    case TileValues.AIRPORT + 19:\n      result = { zoneSize: 6, deltaX: -1, deltaY: -3 }\n      break\n\n    case TileValues.AIRPORT + 20:\n      result = { zoneSize: 6, deltaX: -2, deltaY: -3 }\n      break\n\n    case TileValues.AIRPORT + 21:\n      result = { zoneSize: 6, deltaX: -3, deltaY: -3 }\n      break\n\n    default:\n      result = { zoneSize: 0, deltaX: 0, deltaY: 0 }\n      break\n  }\n\n  return result\n}\n\nconst checkZoneSize = function (tileValue) {\n  if (\n    (tileValue >= TileValues.RESBASE - 1\n      && tileValue <= TileValues.PORTBASE - 1)\n    || (tileValue >= TileValues.LASTPOWERPLANT + 1\n      && tileValue <= TileValues.POLICESTATION + 4)\n    || (tileValue >= TileValues.CHURCH1BASE && tileValue <= TileValues.CHURCH7LAST)\n  ) {\n    return 3\n  }\n\n  if (\n    (tileValue >= TileValues.PORTBASE && tileValue <= TileValues.LASTPORT)\n    || (tileValue >= TileValues.COALBASE\n      && tileValue <= TileValues.LASTPOWERPLANT)\n    || (tileValue >= TileValues.STADIUMBASE && tileValue <= TileValues.LASTZONE)\n  ) {\n    return 4\n  }\n\n  return 0\n}\n\nconst fireZone = function (map, x, y, blockMaps) {\n  const tileValue = map.getTileValue(x, y)\n  let zoneSize = 2\n\n  // A zone being on fire naturally hurts growth\n  let value = blockMaps.rateOfGrowthMap.worldGet(x, y)\n  value = MiscUtils.clamp(value - 20, -200, 200)\n  blockMaps.rateOfGrowthMap.worldSet(x, y, value)\n\n  if (tileValue === TileValues.AIRPORT) zoneSize = 5\n  else if (tileValue >= TileValues.PORTBASE) zoneSize = 3\n  else if (tileValue < TileValues.PORTBASE) zoneSize = 2\n\n  // Make remaining tiles of the zone bulldozable\n  for (let xDelta = -1; xDelta < zoneSize; xDelta++) {\n    for (let yDelta = -1; yDelta < zoneSize; yDelta++) {\n      const xTem = x + xDelta\n      const yTem = y + yDelta\n\n      if (!map.testBounds(xTem, yTem)) continue\n\n      if (map.getTileValue(xTem, yTem >= TileValues.ROADBASE)) { map.addTileFlags(xTem, yTem, BULLBIT) }\n    }\n  }\n}\n\nconst getLandPollutionValue = function (blockMaps, x, y) {\n  let landValue = blockMaps.landValueMap.worldGet(x, y)\n  landValue -= blockMaps.pollutionDensityMap.worldGet(x, y)\n\n  if (landValue < 30) return 0\n  if (landValue < 80) return 1\n  if (landValue < 150) return 2\n\n  return 3\n}\n\nconst incRateOfGrowth = function (blockMaps, x, y, growthDelta) {\n  const currentRate = blockMaps.rateOfGrowthMap.worldGet(x, y)\n  // TODO why the scale of 4 here\n  const newValue = MiscUtils.clamp(currentRate + growthDelta * 4, -200, 200)\n  blockMaps.rateOfGrowthMap.worldSet(x, y, newValue)\n}\n\n// Calls map.putZone after first checking for flood, fire\n// and radiation. Should be called with coordinates of centre tile.\nconst putZone = function (map, x, y, centreTile, isPowered) {\n  for (let dY = -1; dY < 2; dY++) {\n    for (let dX = -1; dX < 2; dX++) {\n      const tileValue = map.getTileValue(x + dX, y + dY)\n      if (tileValue >= TileValues.FLOOD && tileValue < TileValues.ROADBASE) { return }\n    }\n  }\n  map.putZone(x, y, centreTile, 3)\n  map.addTileFlags(x, y, BULLBIT)\n  if (isPowered) map.addTileFlags(x, y, POWERBIT)\n}\n\nconst ZoneUtils = {\n  checkBigZone,\n  checkZoneSize,\n  fireZone,\n  getLandPollutionValue,\n  incRateOfGrowth,\n  putZone,\n}\n\nexport { ZoneUtils }\n","import { ANIMBIT, BULLBIT } from '../tiles/tileFlags'\nimport * as TileValues from '../tiles/tileValues'\nimport { ZoneUtils } from '../zones/zoneUtils'\n\nconst pixToWorld = function (p) {\n  return p >> 4\n}\n\nconst worldToPix = function (w) {\n  return w << 4\n}\n\n// Attempt to move 45° towards the desired direction, either\n// clockwise or anticlockwise, whichever gets us there quicker\nconst turnTo = function (presentDir, desiredDir) {\n  if (presentDir === desiredDir) return presentDir\n\n  if (presentDir < desiredDir) {\n    // select clockwise or anticlockwise\n    if (desiredDir - presentDir < 4) presentDir++\n    else presentDir--\n  } else {\n    if (presentDir - desiredDir < 4) presentDir--\n    else presentDir++\n  }\n\n  if (presentDir > 8) presentDir = 1\n\n  if (presentDir < 1) presentDir = 8\n\n  return presentDir\n}\n\nconst getTileValue = function (map, x, y) {\n  const wX = pixToWorld(x)\n  const wY = pixToWorld(y)\n\n  if (wX < 0 || wX >= map.width || wY < 0 || wY >= map.height) return -1\n\n  return map.getTileValue(wX, wY)\n}\n\n// Choose the best direction to get from the origin to the destination\n// If the destination is equidistant in both x and y deltas, a diagonal\n// will be chosen, otherwise the most 'dominant' difference will be selected\n// (so if a destination is 4 units north and 2 units east, north will be chosen).\n// This code seems to always choose south if we're already there which seems like\n// a bug\nconst directionTable = [0, 3, 2, 1, 3, 4, 5, 7, 6, 5, 7, 8, 1]\n\nconst getDir = function (orgX, orgY, destX, destY) {\n  let deltaX = destX - orgX\n  let deltaY = destY - orgY\n  let i\n\n  if (deltaX < 0) {\n    if (deltaY < 0) {\n      i = 11\n    } else {\n      i = 8\n    }\n  } else {\n    if (deltaY < 0) {\n      i = 2\n    } else {\n      i = 5\n    }\n  }\n\n  deltaX = Math.abs(deltaX)\n  deltaY = Math.abs(deltaY)\n\n  if (deltaX * 2 < deltaY) i++\n  else if (deltaY * 2 < deltaX) i--\n\n  if (i < 0 || i > 12) i = 0\n\n  return directionTable[i]\n}\n\nconst absoluteDistance = function (orgX, orgY, destX, destY) {\n  const deltaX = destX - orgX\n  const deltaY = destY - orgY\n  return Math.abs(deltaX) + Math.abs(deltaY)\n}\n\nconst checkWet = function (tileValue) {\n  if (\n    tileValue === TileValues.HPOWER\n    || tileValue === TileValues.VPOWER\n    || tileValue === TileValues.HRAIL\n    || tileValue === TileValues.VRAIL\n    || tileValue === TileValues.BRWH\n    || tileValue === TileValues.BRWV\n  ) { return true } else return false\n}\n\nconst destroyMapTile = function (spriteManager, map, blockMaps, ox, oy) {\n  const x = pixToWorld(ox)\n  const y = pixToWorld(oy)\n\n  if (!map.testBounds(x, y)) return\n\n  const tile = map.getTile(x, y)\n  const tileValue = tile.getValue()\n\n  if (tileValue < TileValues.TREEBASE) return\n\n  if (!tile.isCombustible()) {\n    if (tileValue >= TileValues.ROADBASE && tileValue <= TileValues.LASTROAD) { map.setTile(x, y, TileValues.RIVER, 0) }\n\n    return\n  }\n\n  if (tile.isZone()) {\n    ZoneUtils.fireZone(map, x, y, blockMaps)\n\n    if (tileValue > TileValues.RZB) spriteManager.makeExplosionAt(ox, oy)\n  }\n\n  if (checkWet(tileValue)) map.setTile(x, y, TileValues.RIVER, 0)\n  else map.setTile(x, y, TileValues.TINYEXP, BULLBIT | ANIMBIT)\n}\n\nconst getDistance = function (x1, y1, x2, y2) {\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2)\n}\n\nconst checkSpriteCollision = function (s1, s2) {\n  return (\n    s1.frame !== 0 && s2.frame !== 0 && getDistance(s1.x, s1.y, s2.x, s2.y) < 30\n  )\n}\n\nconst SpriteUtils = {\n  absoluteDistance,\n  checkSpriteCollision,\n  destroyMapTile,\n  getDir,\n  getTileValue,\n  turnTo,\n  pixToWorld,\n  worldToPix,\n}\n\nexport { SpriteUtils }\n","import { forEachCardinalDirection } from '../map/direction'\nimport { MiscUtils } from '../utils'\nimport { Position } from '../map/position'\nimport { Random } from '../random'\nimport { SPRITE_HELICOPTER } from '../sprites/spriteConstants'\nimport { SpriteUtils } from '../sprites/spriteUtils'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { DIRT, POWERBASE, ROADBASE } from '../tiles/tileValues'\n\nfunction Traffic(map, spriteManager) {\n  this._map = map\n  this._stack = []\n  this._spriteManager = spriteManager\n}\n\nTraffic.prototype.makeTraffic = function (x, y, blockMaps, destFn) {\n  this._stack = []\n\n  const pos = new Position(x, y)\n  if (this.findPerimeterRoad(pos)) {\n\n    const drive = this.tryDrive(pos, destFn)\n\n    // console.log('makeTraffic', [x, y], drive)\n\n    if (drive) {\n      this.addToTrafficDensityMap(blockMaps)\n      return Traffic.ROUTE_FOUND\n    }\n\n    return Traffic.NO_ROUTE_FOUND\n  } else {\n    return Traffic.NO_ROAD_FOUND\n  }\n}\n\nTraffic.prototype.addToTrafficDensityMap = function (blockMaps) {\n  const trafficDensityMap = blockMaps.trafficDensityMap\n\n  while (this._stack.length > 0) {\n\n    const pos = this._stack.pop()\n\n    if (!this._map.testBounds(pos.x, pos.y)) continue\n\n    const tileValue = this._map.getTileValue(pos.x, pos.y)\n\n    if (tileValue >= ROADBASE && tileValue < POWERBASE) {\n\n      // Update traffic density.\n\n      let traffic = trafficDensityMap.worldGet(pos.x, pos.y)\n      traffic += 50\n      traffic = Math.min(traffic, 240)\n      trafficDensityMap.worldSet(pos.x, pos.y, traffic)\n\n      // Attract traffic copter to the traffic\n      if (traffic >= 240 && Random.getRandom(5) === 0) {\n        const sprite = this._spriteManager.getSprite(SPRITE_HELICOPTER)\n        if (sprite !== null) {\n          sprite.destX = SpriteUtils.worldToPix(pos.x)\n          sprite.destY = SpriteUtils.worldToPix(pos.y)\n        }\n      }\n    }\n  }\n}\n\nconst perimX = [-1, 0, 1, 2, 2, 2, 1, 0, -1, -2, -2, -2]\nconst perimY = [-2, -2, -2, -1, 0, 1, 2, 2, 2, 1, 0, -1]\n\nTraffic.prototype.findPerimeterRoad = function (pos) {\n  for (let i = 0; i < 12; i++) {\n    const xx = pos.x + perimX[i]\n    const yy = pos.y + perimY[i]\n\n    if (this._map.testBounds(xx, yy)) {\n      if (TileUtils.isDriveable(this._map.getTileValue(xx, yy))) {\n        pos.x = xx\n        pos.y = yy\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nconst MAX_TRAFFIC_DISTANCE = 30\n\nTraffic.prototype.tryDrive = function (startPos, destFn) {\n  let dirLast\n  let drivePos = new Position(startPos.x, startPos.y)\n\n  /* Maximum distance to try */\n  for (let dist = 0; dist < MAX_TRAFFIC_DISTANCE; dist++) {\n    const dir = this.tryGo(drivePos, dirLast)\n\n    if (dir) {\n      drivePos = Position.move(drivePos, dir)\n      dirLast = dir.oppositeDirection()\n\n      if (dist & 1) this._stack.push(new Position(drivePos.x, drivePos.y))\n\n      if (this.driveDone(drivePos, destFn)) return true\n    } else {\n      if (this._stack.length > 0) {\n        this._stack.pop()\n        dist += 3\n      } else {\n        return false\n      }\n    }\n  }\n\n  return false\n}\n\nTraffic.prototype.tryGo = function (pos, dirLast) {\n  const directions = []\n\n  // Find connections from current position.\n  let count = 0\n\n  forEachCardinalDirection((dir) => {\n    if (\n      dir !== dirLast\n      && TileUtils.isDriveable(\n        this._map.getTileFromMapOrDefault(pos, dir, DIRT)\n      )\n    ) {\n      directions.push(dir)\n      count++\n    }\n  })\n  if (count === 0) {\n    return\n  }\n\n  if (count === 1) {\n    return directions[0]\n  }\n\n  const index = Random.getRandom(directions.length - 1)\n  return directions[index]\n}\n\nTraffic.prototype.driveDone = function (pos, destFn) {\n  if (pos.y > 0) {\n    if (destFn(this._map.getTileValue(pos.x, pos.y - 1))) return true\n  }\n\n  if (pos.x < this._map.width - 1) {\n    if (destFn(this._map.getTileValue(pos.x + 1, pos.y))) return true\n  }\n\n  if (pos.y < this._map.height - 1) {\n    if (destFn(this._map.getTileValue(pos.x, pos.y + 1))) return true\n  }\n\n  if (pos.x > 0) {\n    if (destFn(this._map.getTileValue(pos.x - 1, pos.y))) return true\n  }\n\n  return false\n}\n\nObject.defineProperties(Traffic, {\n  ROUTE_FOUND: MiscUtils.makeConstantDescriptor(1),\n  NO_ROUTE_FOUND: MiscUtils.makeConstantDescriptor(0),\n  NO_ROAD_FOUND: MiscUtils.makeConstantDescriptor(-1),\n})\n\nexport { Traffic }\n","import { Random } from '../random'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { COMCLR, CZB } from '../tiles/tileValues'\nimport { Traffic } from '../stats/traffic'\nimport { ZoneUtils } from './zoneUtils'\n\n// There are 20 types of commercial zone aside from the empty zone. They reflect 5 different categories of\n// population, and 4 grades of land value/pollution. Population value 1/low value corresponds to the 9 tiles\n// starting at 428, population value 2/low follows at 437, and so on.\n\n// Given the centre of a commercial zone, compute it's population level (a number in the range 0-5)\nconst getZonePopulation = function (map, x, y, tileValue) {\n  if (tileValue === COMCLR) return 0\n\n  return (Math.floor((tileValue - CZB) / 9) % 5) + 1\n}\n\n// Takes a map and coordinates, a population category in the range 1-5, a value category in the range 0-3, and places\n// the appropriate industrial zone on the map\nconst placeCommercial = function (map, x, y, population, lpValue, zonePower) {\n  const centreTile = (lpValue * 5 + population) * 9 + CZB\n  ZoneUtils.putZone(map, x, y, centreTile, zonePower)\n}\n\nconst growZone = function (map, x, y, blockMaps, population, lpValue, zonePower) {\n  // landValueMap contains values in the range 0-250, representing the desirability of the land.\n  // Thus, after shifting, landValue will be in the range 0-7.\n  let landValue = blockMaps.landValueMap.worldGet(x, y)\n  landValue = landValue >> 5\n\n  if (population > landValue) return\n\n  // This zone is desirable, and seemingly not to crowded. Switch to the next category of zone.\n  if (population < 5) {\n    placeCommercial(map, x, y, population, lpValue, zonePower)\n    ZoneUtils.incRateOfGrowth(blockMaps, x, y, 8)\n  }\n}\n\nconst degradeZone = function (\n  map,\n  x,\n  y,\n  blockMaps,\n  populationCategory,\n  lpCategory,\n  zonePower\n) {\n  // Note that we special case empty zones here, rather than having to check population value on every\n  // call to placeIndustrial (which we anticipate will be called more often)\n  if (populationCategory > 1) {\n    placeCommercial(map, x, y, populationCategory - 2, lpCategory, zonePower)\n  } else {\n    ZoneUtils.putZone(map, x, y, COMCLR, zonePower)\n  }\n\n  ZoneUtils.incRateOfGrowth(blockMaps, x, y, -8)\n}\n\n// Called by the map scanner when it finds the centre of an commercial zone\nconst commercialFound = function (map, x, y, simData) {\n  // lpValue will be filled if we actually decide to trigger growth/decay. It will be an index of the land/pollution\n  // value in the range 0-3\n  let lpValue\n\n  // Notify the census\n  simData.census.comZonePop += 1\n\n  // Calculate the population level for this tile, and add to census\n  const tileValue = map.getTileValue(x, y)\n  const population = getZonePopulation(map, x, y, tileValue)\n  simData.census.comPop += population\n\n  const zonePower = map.getTile(x, y).isPowered()\n\n  // Occasionally check to see if the zone is connected to the transport network (the chance of this happening\n  // increases as the population increases). Growth naturally stalls if consumers cannot reach the shops.\n  // Note in particular, we will never take this branch if the zone is empty.\n  let trafficOK = Traffic.ROUTE_FOUND\n  if (population > Random.getRandom(5)) {\n    // Try to find a route from here to an industrial zone\n    trafficOK = simData.trafficManager.makeTraffic(\n      x,\n      y,\n      simData.blockMaps,\n      TileUtils.isIndustrial\n    )\n\n    // Trigger outward migration if not connected to road network\n    if (trafficOK === Traffic.NO_ROAD_FOUND) {\n      lpValue = ZoneUtils.getLandPollutionValue(simData.blockMaps, x, y)\n      degradeZone(map, x, y, simData.blockMaps, population, lpValue, zonePower)\n      return\n    }\n  }\n\n  // Occasionally assess and perhaps modify the tile\n  if (Random.getChance(7)) {\n    const locationScore =\n      trafficOK === Traffic.NO_ROAD_FOUND\n        ? -3000\n        : simData.blockMaps.cityCentreDistScoreMap.worldGet(x, y)\n    let zoneScore = simData.valves.comValve + locationScore\n\n    // Unpowered zones should of course be penalized\n    if (!zonePower) zoneScore = -500\n\n    // The commercial demand valve has range -1500 to 1500, so taking into account the \"no traffic\" and\n    // \"no power\" modifiers above, zoneScore must lie in the range -5064 - 1564. (The comRateMap, which scores\n    // commercial neighbourhoods based on their distance from the city centre, has range -64 to 64).\n\n    // First: observe that if there are no roads we will never take this branch, as zoneScore will be <= -3000.\n    // Given the comment above about ranges for zoneScore, zoneScore - 26380, will be in the range -26729 to -24816.\n    // getRandom16() has a range of 65536 possible numbers, in the range -32768 to 32767.\n    // Of those, 9.2% will always be below zoneScore and hence will always take this branch and trigger zone growth.\n    // 87.8% of them are above -24816, so nearly 88% of the time, we will never take this branch.\n    // Thus, there's approximately a 3% chance that the value will be in the range, and we *might* grow.\n    // This has the nice effect of not preventing an individual unit from growing even if overall demand has collapsed\n    // (the business itself might still be growing.\n    if (\n      zonePower\n      && zoneScore > -350\n      && zoneScore - 26380 > Random.getRandom16Signed()\n    ) {\n      lpValue = ZoneUtils.getLandPollutionValue(simData.blockMaps, x, y)\n      growZone(map, x, y, simData.blockMaps, population, lpValue, zonePower)\n      return\n    }\n\n    // Again, given the  above, zoneScore + 26380 must lie in the range 21316 - 27944.\n    // There is a 7.3% chance of getRandom16() always yielding a number > 27994 which would take this branch.\n    // There is a 82.5% chance of the number being below 21316 thus never triggering this branch, which leaves a\n    // 10.1% chance of this branch being conditional on zoneScore.\n    if (zoneScore < 350 && zoneScore + 26380 < Random.getRandom16Signed()) {\n      lpValue = ZoneUtils.getLandPollutionValue(simData.blockMaps, x, y)\n      degradeZone(map, x, y, simData.blockMaps, population, lpValue, zonePower)\n    }\n  }\n}\n\nconst Commercial = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(TileUtils.isCommercialZone, commercialFound)\n  },\n  getZonePopulation,\n}\n\nexport { Commercial }\n","import { Random } from '../random'\nimport { ANIMBIT, ASCBIT, BNCNBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { INDCLR, IZB } from '../tiles/tileValues'\nimport { Traffic } from '../stats/traffic'\nimport { ZoneUtils } from './zoneUtils'\n\n// There are 8 types of industrial zone aside from the empty zone. They are categorized by population and value.\n// There are 4 levels of population (1-4), and 2 levels of value.\n//\n// Population level 1/low value corresponds to the 9 tiles starting at tile 621. This is followed by the tiles\n// for population level 2/low value, and so on.\n\n// Given the centre of an industrial zone, compute it's population level (a number in the range 0-4)\nvar getZonePopulation = function (map, x, y, tileValue) {\n  if (tileValue === INDCLR) return 0\n\n  return (Math.floor((tileValue - IZB) / 9) % 4) + 1\n}\n\n// Takes a map and coordinates, a population category in the range 1-4, a value category in the range 0-1, and places\n// the appropriate industrial zone on the map\nvar placeIndustrial = function (\n  map,\n  x,\n  y,\n  populationCategory,\n  valueCategory,\n  zonePower\n) {\n  var centreTile = (valueCategory * 4 + populationCategory) * 9 + IZB\n  ZoneUtils.putZone(map, x, y, centreTile, zonePower)\n}\n\nvar growZone = function (\n  map,\n  x,\n  y,\n  blockMaps,\n  population,\n  valueCategory,\n  zonePower\n) {\n  // Switch to the next category of zone\n  if (population < 4) {\n    placeIndustrial(map, x, y, population, valueCategory, zonePower)\n    ZoneUtils.incRateOfGrowth(blockMaps, x, y, 8)\n  }\n}\n\nvar degradeZone = function (\n  map,\n  x,\n  y,\n  blockMaps,\n  populationCategory,\n  valueCategory,\n  zonePower\n) {\n  // Note that we special case empty zones here, rather than having to check population value on every\n  // call to placeIndustrial (which we anticipate will be called more often)\n  if (populationCategory > 1)\n    placeIndustrial(map, x, y, populationCategory - 2, valueCategory, zonePower)\n  else ZoneUtils.putZone(map, x, y, INDCLR, zonePower)\n\n  ZoneUtils.incRateOfGrowth(blockMaps, x, y, -8)\n}\n\nvar animated = [true, false, true, true, false, false, true, true]\nvar xDelta = [-1, 0, 1, 0, 0, 0, 0, 1]\nvar yDelta = [-1, 0, -1, -1, 0, 0, -1, -1]\n\n// Takes a map and coordinates, the tile value of the centre of the zone, and a boolean indicating whether\n// the zone has power, and sets or unsets the animation bit in the appropriate part of the zone\nvar setAnimation = function (map, x, y, tileValue, isPowered) {\n  // The empty zone is not animated\n  if (tileValue < IZB) return\n\n  // There are only 8 different types of populated industrial zones. We always have tileValue - IZB < 8x9 (=72),\n  // so (tileValue - IZB) >> 3 effectively divides (tileValue - IZB) by 9, forcing into the range 0-7\n  var i = (tileValue - IZB) >> 3\n\n  // If the tile is animated and powered we set animated, conductive, combustible. Otherwise we set burnable and\n  // conductive.\n  if (animated[i] && isPowered) {\n    map.addTileFlags(x + xDelta[i], y + yDelta[i], ASCBIT)\n  } else {\n    map.addTileFlags(x + xDelta[i], y + yDelta[i], BNCNBIT)\n\n    // Ensure we drop the animation bit if we've only recently lost power\n    map.removeTileFlags(x + xDelta[i], y + yDelta[i], ANIMBIT)\n  }\n}\n\n// Called by the map scanner when it finds the centre of an industrial zone\nvar industrialFound = function (map, x, y, simData) {\n  // Notify the census\n  simData.census.indZonePop += 1\n\n  // Calculate the population level for this tile, and add to census\n  var tileValue = map.getTileValue(x, y)\n  var population = getZonePopulation(map, x, y, tileValue)\n  simData.census.indPop += population\n\n  // Set animation bit if appropriate\n  var zonePower = map.getTile(x, y).isPowered()\n  setAnimation(map, x, y, tileValue, zonePower)\n\n  // Occasionally check to see if the zone is connected to the transport network (the chance of this happening\n  // increases as the population increases). Growth naturally stalls if workers cannot reach the factories.\n  // Note in particular, we will never take this branch if the zone is empty.\n  var trafficOK = Traffic.ROUTE_FOUND\n  if (population > Random.getRandom(5)) {\n    // Try to find a route from here to a residential zone\n    trafficOK = simData.trafficManager.makeTraffic(\n      x,\n      y,\n      simData.blockMaps,\n      TileUtils.isResidential\n    )\n\n    // Trigger outward migration if not connected to road network (unless the zone is already empty)\n    if (trafficOK === Traffic.NO_ROAD_FOUND) {\n      var newValue = Random.getRandom16() & 1\n      degradeZone(map, x, y, simData.blockMaps, population, newValue, zonePower)\n      return\n    }\n  }\n\n  // Occasionally assess and perhaps modify the tile\n  if (Random.getChance(7)) {\n    var zoneScore =\n      simData.valves.indValve +\n      (trafficOK === Traffic.NO_ROAD_FOUND ? -1000 : 0)\n\n    // Unpowered zones should of course be penalized\n    if (!zonePower) zoneScore = -500\n\n    // The industrial demand valve has range -1500 to 1500, so taking into account the \"no traffic\" and\n    // \"no power\" modifiers above, zoneScore must lie in the range -3000 - 1500\n\n    // First: observe that if there are no roads we will never take this branch, as zoneScore will be <= -1000.\n    // Given the comment above about ranges for zoneScore, zoneScore - 26380, will be in the range -26729 to -24880.\n    // getRandom16() has a range of 65536 possible numbers, in the range -32768 to 32767.\n    // Of those, 9.2% will always be below zoneScore and hence will always take this branch and trigger zone growth.\n    // 87.9% of them are above -24880, so nearly 88% of the time, we will never take this branch.\n    // Thus, there's approximately a 2.9% chance that the value will be in the range, and we *might* grow.\n    // This has the nice effect of not preventing an individual unit from growing even if overall demand has collapsed\n    // (the business itself might still be growing.\n    if (zoneScore > -350 && zoneScore - 26380 > Random.getRandom16Signed()) {\n      growZone(\n        map,\n        x,\n        y,\n        simData.blockMaps,\n        population,\n        Random.getRandom16() & 1,\n        zonePower\n      )\n      return\n    }\n\n    // Again, given the  above, zoneScore + 26380 must lie in the range 23380 - 27880.\n    // There is a 7.4% chance of getRandom16() always yielding a number > 27880 which would take this branch.\n    // There is a 85.6% chance of the number being below 23380 thus never triggering this branch, which leaves a\n    // 9% chance of this branch being conditional on zoneScore.\n    if (zoneScore < 350 && zoneScore + 26380 < Random.getRandom16Signed())\n      degradeZone(\n        map,\n        x,\n        y,\n        simData.blockMaps,\n        population,\n        Random.getRandom16() & 1,\n        zonePower\n      )\n  }\n}\n\nvar Industrial = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(TileUtils.isIndustrialZone, industrialFound)\n  },\n  getZonePopulation: getZonePopulation,\n}\n\nexport { Industrial }\n","import { Config } from '../config'\nimport { Random } from '../random'\nimport { Tile } from '../tiles/tile'\nimport { BLBNCNBIT, ZONEBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\nimport { Traffic } from '../stats/traffic'\nimport { ZoneUtils } from './zoneUtils'\n\n// Residential tiles have 'populations' of 16, 24, 32 or 40, and value from 0 to 3. The tiles are laid out in\n// increasing order of land value, cycling through each population value\nconst placeResidential = function (map, x, y, population, lpValue, zonePower) {\n  const centreTile = (lpValue * 4 + population) * 9 + TileValues.RZB\n  ZoneUtils.putZone(map, x, y, centreTile, zonePower)\n}\n\n// Look for housing in the adjacent 8 tiles\nconst getFreeZonePopulation = function (map, x, y, tileValue) {\n  let count = 0\n  for (let xx = x - 1; xx <= x + 1; xx++) {\n    for (let yy = y - 1; yy <= y + 1; yy++) {\n      if (xx === x && yy === y) continue\n      tileValue = map.getTileValue(xx, yy)\n      if (tileValue >= TileValues.LHTHR && tileValue <= TileValues.HHTHR) { count += 1 }\n    }\n  }\n\n  return count\n}\n\nconst getZonePopulation = function (map, x, y, tileValue) {\n  if (tileValue instanceof Tile) tileValue = tile.getValue()\n\n  if (tileValue === TileValues.FREEZ) { return getFreeZonePopulation(map, x, y, tileValue) }\n\n  const populationIndex = (Math.floor((tileValue - TileValues.RZB) / 9) % 4) + 1\n  return populationIndex * 8 + 16\n}\n\n// Assess a tile for suitability for a house. Prefers tiles near roads\nconst evalLot = function (map, x, y) {\n  const xDelta = [0, 1, 0, -1]\n  const yDelta = [-1, 0, 1, 0]\n\n  if (!map.testBounds(x, y)) return -1\n\n  let tileValue = map.getTileValue(x, y)\n  if (tileValue < TileValues.RESBASE || tileValue > TileValues.RESBASE + 8) { return -1 }\n\n  let score = 1\n  for (let i = 0; i < 4; i++) {\n    const edgeX = x + xDelta[i]\n    const edgeY = y + yDelta[i]\n\n    if (edgeX < 0 || edgeX >= map.width || edgeY < 0 || edgeY >= map.height) { continue }\n\n    tileValue = map.getTileValue(edgeX, edgeY)\n    if (tileValue !== TileValues.DIRT && tileValue <= TileValues.LASTROAD) { score += 1 }\n  }\n\n  return score\n}\n\nconst buildHouse = function (map, x, y, lpValue) {\n  let best = 0\n  let bestScore = 0\n\n  //  Deliberately ordered so that the centre tile is at index 0\n  const xDelta = [0, -1, 0, 1, -1, 1, -1, 0, 1]\n  const yDelta = [0, -1, -1, -1, 0, 0, 1, 1, 1]\n\n  for (let i = 0; i < 9; i++) {\n    const xx = x + xDelta[i]\n    const yy = y + yDelta[i]\n\n    const score = evalLot(map, xx, yy)\n    if (score > bestScore) {\n      bestScore = score\n      best = i\n    } else if (score === bestScore && Random.getChance(7)) {\n      // Ensures we don't always select the same position when we\n      // have a choice\n      best = i\n    }\n  }\n\n  if (best > 0 && map.testBounds(x + xDelta[best], y + yDelta[best])) {\n    map.setTile(\n      x + xDelta[best],\n      y + yDelta[best],\n      TileValues.HOUSE + Random.getRandom(2) + lpValue * 3,\n      BLBNCNBIT\n    )\n  }\n}\n\nconst growZone = function (map, x, y, blockMaps, population, lpValue, zonePower) {\n  const pollution = blockMaps.pollutionDensityMap.worldGet(x, y)\n\n  // Cough! Too polluted! No-one wants to move here!\n  if (pollution > 128) return\n\n  const tileValue = map.getTileValue(x, y)\n\n  if (tileValue === TileValues.FREEZ) {\n    if (population < 8) {\n      // Zone capacity not yet reached: build another house\n      buildHouse(map, x, y, lpValue)\n      ZoneUtils.incRateOfGrowth(blockMaps, x, y, 1)\n    } else if (blockMaps.populationDensityMap.worldGet(x, y) > 64) {\n      // There is local demand for higher density housing\n      placeResidential(map, x, y, 0, lpValue, zonePower)\n      ZoneUtils.incRateOfGrowth(blockMaps, x, y, 8)\n    }\n\n    return\n  }\n\n  if (population < 40) {\n    // Zone population not yet maxed out\n    placeResidential(\n      map,\n      x,\n      y,\n      Math.floor(population / 8) - 1,\n      lpValue,\n      zonePower\n    )\n    ZoneUtils.incRateOfGrowth(blockMaps, x, y, 8)\n  }\n}\n\nconst freeZone = [0, 3, 6, 1, 4, 7, 2, 5, 8]\n\nconst degradeZone = function (\n  map,\n  x,\n  y,\n  blockMaps,\n  population,\n  lpValue,\n  zonePower\n) {\n  let xx, yy\n  if (population === 0) return\n\n  if (population > 16) {\n    // Degrade to a lower density block\n    placeResidential(\n      map,\n      x,\n      y,\n      Math.floor((population - 24) / 8),\n      lpValue,\n      zonePower\n    )\n    ZoneUtils.incRateOfGrowth(blockMaps, x, y, -8)\n    return\n  }\n\n  if (population === 16) {\n    // Already at lowest density: degrade to 8 individual houses\n    map.setTile(x, y, TileValues.FREEZ, BLBNCNBIT | ZONEBIT)\n\n    for (yy = y - 1; yy <= y + 1; yy++) {\n      for (xx = x - 1; xx <= x + 1; xx++) {\n        if (xx === x && yy === y) continue\n        map.setTile(\n          x,\n          y,\n          TileValues.LHTHR + lpValue + Random.getRandom(2),\n          BLBNCNBIT\n        )\n      }\n    }\n\n    ZoneUtils.incRateOfGrowth(blockMaps, x, y, -8)\n    return\n  }\n\n  // Already down to individual houses. Remove one\n  let i = 0\n  ZoneUtils.incRateOfGrowth(blockMaps, x, y, -1)\n\n  for (xx = x - 1; xx <= x + 1; xx++) {\n    for (yy = y - 1; yy <= y + 1; yy++, i++) {\n      const currentValue = map.getTileValue(xx, yy)\n      if (\n        currentValue >= TileValues.LHTHR\n        && currentValue <= TileValues.HHTHR\n      ) {\n        // We've found a house. Replace it with the normal free zone tile\n        map.setTile(xx, yy, freeZone[i] + TileValues.RESBASE, BLBNCNBIT)\n        return\n      }\n    }\n  }\n}\n\n// Returns a score for the zone in the range -3000 - 3000\nconst evalResidential = function (blockMaps, x, y, traffic) {\n  if (traffic === Traffic.NO_ROAD_FOUND) return -3000\n\n  let landValue = blockMaps.landValueMap.worldGet(x, y)\n  landValue -= blockMaps.pollutionDensityMap.worldGet(x, y)\n\n  if (landValue < 0) landValue = 0\n  else landValue = Math.min(landValue * 32, 6000)\n\n  return landValue - 3000\n}\n\nconst residentialFound = function (map, x, y, simData) {\n  // If we choose to grow this zone, we will fill it with an index in the range 0-3 reflecting the land value and\n  // pollution scores (higher is better). This is then used to select the variant to build\n  let lpValue\n\n  // Notify the census\n  simData.census.resZonePop += 1\n\n  // Also, notify the census of our population\n  const tileValue = map.getTileValue(x, y)\n  const population = getZonePopulation(map, x, y, tileValue)\n  simData.census.resPop += population\n\n  const zonePower = map.getTile(x, y).isPowered()\n\n  let trafficOK = Traffic.ROUTE_FOUND\n\n  // Occasionally check to see if the zone is connected to the road network. The chance of this happening increases\n  // as the zone's population increases. Note: we will never execute this conditional if the zone is empty, as zero\n  // will never be be bigger than any of the values Random will generate\n  if (population > Random.getRandom(35)) {\n    // Is there a route from this zone to a commercial zone?\n    trafficOK = simData.trafficManager.makeTraffic(\n      x,\n      y,\n      simData.blockMaps,\n      TileUtils.isCommercial\n    )\n\n    // If we're not connected to the road network, then going shopping will be a pain. Move out.\n    if (trafficOK === Traffic.NO_ROAD_FOUND) {\n      lpValue = ZoneUtils.getLandPollutionValue(simData.blockMaps, x, y)\n      degradeZone(map, x, y, simData.blockMaps, population, lpValue, zonePower)\n      return\n    }\n  }\n\n  // Sometimes we will randomly choose to assess this block. However, always assess it if it's empty or contains only\n  // single houses.\n  if (tileValue === TileValues.FREEZ || Random.getChance(7)) {\n    // First, score the individual zone. This is a value in the range -3000 to 3000\n    // Then take into account global demand for housing.\n    const locationScore = evalResidential(simData.blockMaps, x, y, trafficOK)\n    let zoneScore = simData.valves.resValve + locationScore\n\n    // Naturally unpowered zones should be penalized\n    if (!zonePower) zoneScore = -500\n\n    // The residential demand valve has range -2000 to 2000, so taking into account the \"no traffic\" and\n    // \"no power\" modifiers above, zoneScore must lie in the range -5500 - 5000.\n\n    // Now, observe that if there are no roads we will never take this branch, as zoneScore will equal -3000.\n    // Given the comment above about ranges for zoneScore, zoneScore - 26380, will be in the range -26729 to -20880.\n    // getRandom16() has a range of 65536 possible numbers, in the range -32768 to 32767.\n    // Of those, 9.2% will always be below zoneScore and hence will always take this branch and trigger zone growth.\n    // 81.8% of them are above -20880, so nearly 82% of the time, we will never take this branch.\n    // Thus, there's approximately a 9% chance that the value will be in the range, and we *might* grow.\n    if (zoneScore > -350 && zoneScore - 26380 > Random.getRandom16Signed()) {\n      // If this zone is empty, and residential demand is strong, we might make a hospital\n      if (population === 0 && Random.getChance(3)) {\n        makeHospital(map, x, y, simData, zonePower)\n        return\n      }\n\n      // Get an index in the range 0-3 scoring the land desirability and pollution, and grow the zone to the next\n      // population rank\n      lpValue = ZoneUtils.getLandPollutionValue(simData.blockMaps, x, y)\n      growZone(map, x, y, simData.blockMaps, population, lpValue, zonePower)\n      return\n    }\n\n    // Again, given the above, zoneScore + 26380 must lie in the range 20880 - 26030.\n    // There is a 10.2% chance of getRandom16() always yielding a number > 27994 which would take this branch.\n    // There is a 89.7% chance of the number being below 20880 thus never triggering this branch, which leaves a\n    // 0.1% chance of this branch being conditional on zoneScore.\n    if (zoneScore < 350 && zoneScore + 26380 < Random.getRandom16Signed()) {\n      // Get an index in the range 0-3 scoring the land desirability and pollution, and degrade to the next\n      // lower ranked zone\n      lpValue = ZoneUtils.getLandPollutionValue(simData.blockMaps, x, y)\n      degradeZone(map, x, y, simData.blockMaps, population, lpValue, zonePower)\n    }\n  }\n}\n\nfunction makeHospital(map, x, y, simData, zonePower) {\n  // We only build a hospital if the population requires it\n  if (simData.census.needHospital > 0) {\n    ZoneUtils.putZone(map, x, y, TileValues.HOSPITAL, zonePower)\n    simData.census.needHospital = 0\n\n  }\n}\n\nconst hospitalFound = function (map, x, y, simData) {\n  simData.census.hospitalPop += 1\n\n  // Degrade to an empty zone if a hospital is no longer sustainable\n  if (simData.census.needHospital === -1) {\n    if (Random.getRandom(20) === 0) {\n      ZoneUtils.putZone(\n        map,\n        x,\n        y,\n        TileValues.FREEZ,\n        map.getTile(x, y).isPowered()\n      )\n    }\n  }\n}\n\nconst Residential = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(TileUtils.isResidentialZone, residentialFound)\n    mapScanner.addAction(TileValues.HOSPITAL, hospitalFound)\n    repairManager.addAction(TileValues.HOSPITAL, 15, 3)\n  },\n  getZonePopulation,\n}\n\nexport { Residential }\n","import { BlockMap } from './blockMap'\nimport { Commercial } from '../zones/commercial'\nimport { Industrial } from '../zones/industrial'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { Residential } from '../zones/residential'\nimport * as TileValues from '../tiles/tileValues'\n\n// Smoothing styles for map smoothing\nconst SMOOTH_NEIGHBOURS_THEN_BLOCK = 0\nconst SMOOTH_ALL_THEN_CLAMP = 1\n\n// Smooth the map src into dest. The way in which the map is smoothed depends on the value of smoothStyle.\n// The meanings are as follows:\n//\n// SMOOTH_NEIGHBOURS_THEN_BLOCK\n// ============================\n// For each square in src, sum the values of its immediate neighbours, and take the average, then take the average of\n// that result and the square's value. This result is the new value of the square in dest.\n//\n// SMOOTH_ALL_THEN_CLAMP\n// =====================\n// For each square in src, sum the values of that square and it's four immediate neighbours, and take an average\n// rounding down. Clamp the resulting value in the range 0-255. This clamped value is the square's new value in dest.\nconst smoothMap = function (src, dest, smoothStyle) {\n  for (let x = 0, width = src.width; x < width; x++) {\n    for (let y = 0, height = src.height; y < height; y++) {\n      let edges = 0\n\n      if (x > 0) edges += src.get(x - 1, y)\n\n      if (x < src.width - 1) edges += src.get(x + 1, y)\n\n      if (y > 0) edges += src.get(x, y - 1)\n\n      if (y < src.height - 1) edges += src.get(x, y + 1)\n\n      if (smoothStyle === SMOOTH_NEIGHBOURS_THEN_BLOCK) {\n        edges = src.get(x, y) + Math.floor(edges / 4)\n        dest.set(x, y, Math.floor(edges / 2))\n      } else {\n        edges = (edges + src.get(x, y)) >> 2\n        if (edges > 255) edges = 255\n        dest.set(x, y, edges)\n      }\n    }\n  }\n}\n\n// Over time, the rate of growth of a neighbourhood should trend towards zero (stable)\nconst neutraliseRateOfGrowthMap = function (blockMaps) {\n  const rateOfGrowthMap = blockMaps.rateOfGrowthMap\n  for (let x = 0, width = rateOfGrowthMap.width; x < width; x++) {\n    for (let y = 0, height = rateOfGrowthMap.height; y < height; y++) {\n      let rate = rateOfGrowthMap.get(x, y)\n      if (rate === 0) continue\n\n      if (rate > 0) rate--\n      else rate++\n\n      rate = MiscUtils.clamp(rate, -200, 200)\n      rateOfGrowthMap.set(x, y, rate)\n    }\n  }\n}\n\n// Over time, traffic density should ease.\nconst neutraliseTrafficMap = function (blockMaps) {\n  const trafficDensityMap = blockMaps.trafficDensityMap\n\n  for (let x = 0, width = trafficDensityMap.width; x < width; x++) {\n    for (let y = 0, height = trafficDensityMap.height; y < height; y++) {\n      let trafficDensity = trafficDensityMap.get(x, y)\n      if (trafficDensity === 0) continue\n\n      if (trafficDensity <= 24) trafficDensity = 0\n      else if (trafficDensity > 200) trafficDensity = trafficDensity - 34\n      else trafficDensity = trafficDensity - 24\n\n      trafficDensityMap.set(x, y, trafficDensity)\n    }\n  }\n}\n\n// Given a tileValue, score it on the pollution it generates, in the range 0-255\nconst getPollutionValue = function (tileValue) {\n  if (tileValue < TileValues.POWERBASE) {\n    // Roads, fires and radiation lie below POWERBASE\n\n    // Heavy traffic is bad\n    if (tileValue >= TileValues.HTRFBASE) return 75\n\n    // Low traffic not so much\n    if (tileValue >= TileValues.LTRFBASE) return 50\n\n    if (tileValue < TileValues.ROADBASE) {\n      // Fire = carbon monoxide = a bad score for you\n      if (tileValue > TileValues.FIREBASE) return 90\n\n      // Radiation. Top of the charts.\n      if (tileValue >= TileValues.RADTILE) return 255\n    }\n\n    // All other types of ground are pure.\n    return 0\n  }\n\n  // If we've reached this point, we're classifying some form of zone tile\n\n  // Residential and commercial zones don't pollute\n  if (tileValue <= TileValues.LASTIND) return 0\n\n  // Industrial zones, however...\n  if (tileValue < TileValues.PORTBASE) return 50\n\n  // Coal power plants are bad\n  if (tileValue <= TileValues.LASTPOWERPLANT) return 100\n\n  return 0\n}\n\n// Compute the Manhattan distance of the given point from the city centre, and force into the range 0-64\nconst getCityCentreDistance = function (map, x, y) {\n  let xDis, yDis\n\n  if (x > map.cityCentreX) xDis = x - map.cityCentreX\n  else xDis = map.cityCentreX - x\n\n  if (y > map.cityCentreY) yDis = y - map.cityCentreY\n  else yDis = map.cityCentreY - y\n\n  return Math.min(xDis + yDis, 64)\n}\n\n// This monster function fills up the landValueMap, the terrainDensityMap and the pollutionDensityMap based\n// on values found by iterating over the map.\n//\n// Factors that affect land value:\n//   * Distance from the city centre\n//   * High crime\n//   * High pollution\n//   * Proximity to undeveloped terrain (who doesn't love a good view?)\n//\n// Pollution is completely determined by the tile types in the block\nconst pollutionTerrainLandValueScan = function (map, census, blockMaps) {\n  // We record raw pollution readings for each tile into tempMap1, and then use tempMap2 and tempMap1 to smooth\n  // out the pollution in order to construct the new values for the populationDensityMap\n  const tempMap1 = blockMaps.tempMap1\n  const tempMap2 = blockMaps.tempMap2\n\n  // tempMap3 will be used to record raw terrain information, i.e. if the the land is developed. This will be\n  // smoothed in to terrainDensityMap later\n  const tempMap3 = blockMaps.tempMap3\n  tempMap3.clear()\n\n  const landValueMap = blockMaps.landValueMap\n  const terrainDensityMap = blockMaps.terrainDensityMap\n  const pollutionDensityMap = blockMaps.pollutionDensityMap\n  const crimeRateMap = blockMaps.crimeRateMap\n\n  let x, y, width, height\n\n  let totalLandValue = 0\n  let developedTileCount = 0\n\n  for (x = 0, width = landValueMap.width; x < width; x++) {\n    for (y = 0, height = landValueMap.height; y < height; y++) {\n      let pollutionLevel = 0\n      let developed = false\n\n      // The land value map has a chunk size of 2\n      const worldX = x * 2\n      const worldY = y * 2\n\n      for (let mapX = worldX; mapX <= worldX + 1; mapX++) {\n        for (let mapY = worldY; mapY <= worldY + 1; mapY++) {\n          const tileValue = map.getTileValue(mapX, mapY)\n\n          if (tileValue === TileValues.DIRT) continue\n\n          if (tileValue < TileValues.RUBBLE) {\n            // Undeveloped land: record in tempMap3. Each undeveloped piece of land scores 15.\n            // tempMap3 has a chunk size of 4, so each square in tempMap3 will ultimately contain a\n            // maximum value of 240\n            const terrainValue = tempMap3.worldGet(mapX, mapY)\n            tempMap3.worldSet(mapX, mapY, terrainValue + 15)\n            continue\n          }\n\n          pollutionLevel += getPollutionValue(tileValue)\n          if (tileValue >= TileValues.ROADBASE) developed = true\n        }\n      }\n\n      // Clamp pollution in range 0-255 (at the moment it's range is 0-1020) and record it for later.\n      pollutionLevel = Math.min(pollutionLevel, 255)\n      tempMap1.set(x, y, pollutionLevel)\n\n      if (developed) {\n        // getCityCentreDistance returns a score in the range 0-64, so, after shifting, landValue will be in\n        // range 8-136\n        let landValue =\n          34 - Math.floor(getCityCentreDistance(map, worldX, worldY) / 2)\n        landValue = landValue << 2\n\n        // Land in the same neighbourhood as unspoiled land is more valuable...\n        landValue += terrainDensityMap.get(x >> 1, y >> 1)\n\n        // ... and polluted land obviously is less valuable\n        landValue -= pollutionDensityMap.get(x, y)\n\n        // ... getting mugged won't help either\n        if (crimeRateMap.get(x, y) > 190) landValue -= 20\n\n        // Clamp in range 1-250 (0 represents undeveloped land)\n        landValue = MiscUtils.clamp(landValue, 1, 250)\n        landValueMap.set(x, y, landValue)\n\n        totalLandValue += landValue\n        developedTileCount++\n      } else {\n        landValueMap.set(x, y, 0)\n      }\n    }\n  }\n\n  if (developedTileCount > 0) { census.landValueAverage = Math.floor(totalLandValue / developedTileCount) } else census.landValueAverage = 0\n\n  // Smooth the pollution map twice\n  smoothMap(tempMap1, tempMap2, SMOOTH_ALL_THEN_CLAMP)\n  smoothMap(tempMap2, tempMap1, SMOOTH_ALL_THEN_CLAMP)\n\n  let maxPollution = 0\n  let pollutedTileCount = 0\n  let totalPollution = 0\n\n  // We iterate over the now-smoothed pollution map rather than using the block map's copy routines\n  // so that we can compute the average and total pollution en-route\n  for (\n    x = 0, width = map.width;\n    x < width;\n    x += pollutionDensityMap.blockSize\n  ) {\n    for (\n      y = 0, height = map.height;\n      y < height;\n      y += pollutionDensityMap.blockSize\n    ) {\n      // Copy the values into pollutionDensityMap\n      const pollution = tempMap1.worldGet(x, y)\n      pollutionDensityMap.worldSet(x, y, pollution)\n\n      if (pollution !== 0) {\n        pollutedTileCount++\n        totalPollution += pollution\n\n        // Note the most polluted location: any monsters will be drawn there (randomly choosing one\n        // if we have multiple competitors for most polluted)\n        if (\n          pollution > maxPollution\n          || (pollution === maxPollution && Random.getChance(3))\n        ) {\n          maxPollution = pollution\n          map.pollutionMaxX = x\n          map.pollutionMaxY = y\n        }\n      }\n    }\n  }\n\n  if (pollutedTileCount) { census.pollutionAverage = Math.floor(totalPollution / pollutedTileCount) } else census.pollutionAverage = 0\n\n  smoothMap(tempMap3, terrainDensityMap, SMOOTH_NEIGHBOURS_THEN_BLOCK)\n}\n\n// Computes the coverage radius of police stations, and scores each neighbourhood in the map on its crime rate.\n// Factors that attract crime are:\n//    * The zone has a low value\n//    * The zone is a slum\n//    * The zone is far away from those pesky police\nconst crimeScan = function (census, blockMaps) {\n  const policeStationMap = blockMaps.policeStationMap\n  const policeStationEffectMap = blockMaps.policeStationEffectMap\n  const crimeRateMap = blockMaps.crimeRateMap\n  const landValueMap = blockMaps.landValueMap\n  const populationDensityMap = blockMaps.populationDensityMap\n\n  smoothMap(\n    policeStationMap,\n    policeStationEffectMap,\n    SMOOTH_NEIGHBOURS_THEN_BLOCK\n  )\n  smoothMap(\n    policeStationEffectMap,\n    policeStationMap,\n    SMOOTH_NEIGHBOURS_THEN_BLOCK\n  )\n  smoothMap(\n    policeStationMap,\n    policeStationEffectMap,\n    SMOOTH_NEIGHBOURS_THEN_BLOCK\n  )\n\n  let totalCrime = 0\n  let crimeZoneCount = 0\n\n  // Scan the map, looking for developed land, as it can attract crime.\n  for (\n    let x = 0,\n      width = crimeRateMap.mapWidth,\n      blockSize = crimeRateMap.blockSize;\n    x < width;\n    x += blockSize\n  ) {\n    for (\n      var y = 0, height = crimeRateMap.mapHeight, b;\n      y < height;\n      y += blockSize\n    ) {\n      // Remember: landValueMap values are in the range 0-250\n      let value = landValueMap.worldGet(x, y)\n\n      if (value > 0) {\n        crimeZoneCount += 1\n\n        // Force value in the range -122 to 128. Lower valued pieces of land attract more crime.\n        value = 128 - value\n\n        // Add population density (a value between 0 and 510). value now lies in range -260 - 382.\n        // Denser areas attract more crime.\n        value += populationDensityMap.worldGet(x, y)\n\n        // Clamp in range -260 to 300\n        value = Math.min(value, 300)\n\n        // If the police are nearby, there's no point committing the crime of the century\n        value -= policeStationMap.worldGet(x, y)\n\n        // Force in to range 0-250\n        value = MiscUtils.clamp(value, 0, 250)\n\n        crimeRateMap.worldSet(x, y, value)\n        totalCrime += value\n      } else {\n        crimeRateMap.worldSet(x, y, 0)\n      }\n    }\n  }\n\n  if (crimeZoneCount > 0) { census.crimeAverage = Math.floor(totalCrime / crimeZoneCount) } else census.crimeAverage = 0\n}\n\n// Iterate over the map, and score each neighbourhood on its distance from the city centre. Scores are in the range\n// -64 to 64. This affects the growth of commercial zones within that neighbourhood.\nconst fillCityCentreDistScoreMap = function (map, blockMaps) {\n  const cityCentreDistScoreMap = blockMaps.cityCentreDistScoreMap\n\n  for (let x = 0, width = cityCentreDistScoreMap.width; x < width; x++) {\n    for (let y = 0, height = cityCentreDistScoreMap.height; y < height; y++) {\n      // First, we compute the Manhattan distance of the top-left hand corner of the neighbourhood to the city centre\n      // and half that value. This leaves us a value in the range 0 - 32\n      let value = Math.floor(getCityCentreDistance(map, x * 8, y * 8) / 2)\n      // Now, we scale up by a factor of 4. We're in the range 0 - 128\n      value = value * 4\n      // And finally, subtract from 64, leaving us a score in the range -64 to 64\n      value = 64 - value\n      cityCentreDistScoreMap.set(x, y, value)\n    }\n  }\n}\n\n// Dispatch to the correct zone type to get the population value for that zone\nconst getPopulationDensity = function (map, x, y, tile) {\n  if (tile < TileValues.COMBASE) { return Residential.getZonePopulation(map, x, y, tile) }\n\n  if (tile < TileValues.INDBASE) { return Commercial.getZonePopulation(map, x, y, tile) * 8 }\n\n  if (tile < TileValues.PORTBASE) { return Industrial.getZonePopulation(map, x, y, tile) * 8 }\n\n  return 0\n}\n\n// Iterate over the map, examining each zone for population. We then smooth the results into a population density\n// map, which is used when deciding to grow residential zones. At the same time, we also note the most populous area\n// (in terms of zones) to calculate our city centre. Finally, we score each area of the map on its distance from the\n// city centre.\nconst populationDensityScan = function (map, blockMaps) {\n  // We will build the initial unsmoothed map in tempMap1, and smooth it in to tempMap2\n  const tempMap1 = blockMaps.tempMap1\n  const tempMap2 = blockMaps.tempMap2\n  const populationDensityMap = blockMaps.populationDensityMap\n\n  // We will sum all the coordinates that contain zones into xTot and yTot. They are used in our city centre\n  // heuristic.\n  let xTot = 0\n  let yTot = 0\n  let zoneTotal = 0\n\n  tempMap1.clear()\n\n  for (let x = 0, width = map.width; x < width; x++) {\n    for (let y = 0, height = map.height; y < height; y++) {\n      const tile = map.getTile(x, y)\n      if (tile.isZone()) {\n        const tileValue = tile.getValue()\n\n        // Ask the zone to calculate its population, scale it up, then clamp in the range 0-254\n        let population = getPopulationDensity(map, x, y, tileValue) * 8\n        population = Math.min(population, 254)\n\n        // The block size of population density is 2x2, so there can only be 1 zone per block\n        tempMap1.worldSet(x, y, population)\n\n        xTot += x\n        yTot += y\n        zoneTotal++\n      }\n    }\n  }\n\n  smoothMap(tempMap1, tempMap2, SMOOTH_ALL_THEN_CLAMP)\n  smoothMap(tempMap2, tempMap1, SMOOTH_ALL_THEN_CLAMP)\n  smoothMap(tempMap1, tempMap2, SMOOTH_ALL_THEN_CLAMP)\n  blockMaps.populationDensityMap.copyFrom(tempMap2, function (x) {\n    return x * 2\n  })\n\n  // XXX This follows the original Micropolis source, but it feels weird to me that we score the entire map\n  // based on city centre proximity, and then potentially move the city centre. I think these should be\n  // swapped.\n  fillCityCentreDistScoreMap(map, blockMaps)\n\n  // Compute new city centre\n  if (zoneTotal > 0) {\n    map.cityCentreX = Math.floor(xTot / zoneTotal)\n    map.cityCentreY = Math.floor(yTot / zoneTotal)\n  } else {\n    map.cityCentreX = Math.floor(map.width / 2)\n    map.cityCentreY = Math.floor(map.height / 2)\n  }\n}\n\n// Compute the radius of coverage for the firestations found during the map scan\nconst fireAnalysis = function (blockMaps) {\n  const fireStationMap = blockMaps.fireStationMap\n  const fireStationEffectMap = blockMaps.fireStationEffectMap\n\n  smoothMap(fireStationMap, fireStationEffectMap, SMOOTH_NEIGHBOURS_THEN_BLOCK)\n  smoothMap(fireStationEffectMap, fireStationMap, SMOOTH_NEIGHBOURS_THEN_BLOCK)\n  smoothMap(fireStationMap, fireStationEffectMap, SMOOTH_NEIGHBOURS_THEN_BLOCK)\n}\n\nconst BlockMapUtils = {\n  crimeScan,\n  fireAnalysis,\n  neutraliseRateOfGrowthMap,\n  neutraliseTrafficMap,\n  pollutionTerrainLandValueScan,\n  populationDensityScan,\n}\n\nexport { BlockMapUtils }\n","import { Config } from './config'\n\n// Decorate the given object, by adding {add|remove}EventListener methods, and an internal '_emitEvent' method\nconst EventEmitter = function (obj) {\n  const events = {}\n\n  const addListener = function (event, listener) {\n    if (!(event in events)) events[event] = []\n\n    const listeners = events[event]\n    if (listeners.indexOf(listener) === -1) listeners.push(listener)\n  }\n\n  const removeListener = function (event, listener) {\n    if (!(event in events)) events[event] = []\n\n    const listeners = events[event]\n    const index = listeners.indexOf(listener)\n    if (index !== -1) listeners.splice(index, 1)\n  }\n\n  const emitEvent = function (event, value) {\n    if (event === undefined) {\n      if (!Config.debug) console.warn('Sending undefined event!')\n      else throw new Error('Sending undefined event!')\n    }\n\n    if (!(event in events)) events[event] = []\n\n    const listeners = events[event]\n    for (let i = 0, l = listeners.length; i < l; i++) listeners[i](value)\n  }\n\n  const addProps = function (obj, message) {\n    const hasExistingProp = [\n      'addEventListener',\n      'removeEventListener',\n      '_emitEvent',\n    ].some(function (prop) {\n      return obj[prop] !== undefined\n    })\n\n    if (hasExistingProp) {\n      throw new Error(\n        'Cannot decorate '\n          + message\n          + ': existing properties would be overwritten!'\n      )\n    }\n\n    obj.addEventListener = addListener\n    obj.removeEventListener = removeListener\n    obj._emitEvent = emitEvent\n  }\n\n  if (typeof obj === 'object') addProps(obj, 'object')\n  else addProps(obj.prototype, 'constructor')\n\n  return obj\n}\n\nexport { EventEmitter }\n","export const AUTOBUDGET_CHANGED = 'Autobudget changed'\nexport const BUDGET_NEEDED = 'User needs to budget'\nexport const BUDGET_REQUESTED = 'Budget window requested'\nexport const BUDGET_WINDOW_CLOSED = 'Budget window closed'\nexport const BLACKOUTS_REPORTED = 'Blackouts reported'\nexport const CLASSIFICATION_UPDATED = 'Classification updated'\nexport const CONGRATS_SHOWING = 'Congratulations showing'\nexport const CONGRATS_WINDOW_CLOSED = 'Congratulations window closed'\nexport const DATE_UPDATED = 'Date changed'\nexport const DEBUG_WINDOW_REQUESTED = 'Debug Window Requested'\nexport const DEBUG_WINDOW_CLOSED = 'Debug Window Closed'\nexport const DISASTER_REQUESTED = 'Disaster Requested'\nexport const DISASTER_WINDOW_CLOSED = 'Disaster window closed'\nexport const EARTHQUAKE = 'Earthquake'\nexport const EVAL_REQUESTED = 'Evaluation Requested'\nexport const EVAL_UPDATED = 'Evaluation Updated'\nexport const EVAL_WINDOW_CLOSED = 'Eval window closed'\nexport const EXPLOSION_REPORTED = 'Explosion Reported'\nexport const FIRE_REPORTED = 'Fire!'\nexport const FIRE_STATION_NEEDS_FUNDING = 'Fire station needs funding'\nexport const FLOODING_REPORTED = 'Flooding reported'\nexport const FRONT_END_MESSAGE = 'Front-end Message'\nexport const FUNDS_CHANGED = 'Total funds has changed'\nexport const HEAVY_TRAFFIC = 'Total funds has changed'\nexport const HELICOPTER_CRASHED = 'Helicopter crashed'\nexport const HIGH_CRIME = 'High crime'\nexport const HIGH_POLLUTION = 'High pollution'\nexport const MONSTER_SIGHTED = 'Monster sighted'\nexport const NAG_WINDOW_CLOSED = 'Nag window closed'\nexport const NEED_AIRPORT = 'Airport needed'\nexport const NEED_ELECTRICITY = 'More power needed'\nexport const NEED_FIRE_STATION = 'Fire station needed'\nexport const NEED_MORE_COMMERCIAL = 'More commercial zones needed'\nexport const NEED_MORE_INDUSTRIAL = 'More industrial zones needed'\nexport const NEED_MORE_RAILS = 'More railways needed'\nexport const NEED_MORE_RESIDENTIAL = 'More residential needed'\nexport const NEED_MORE_ROADS = 'More roads needed'\nexport const NEED_POLICE_STATION = 'Police station needed'\nexport const NEED_SEAPORT = 'Seaport needed'\nexport const NEED_STADIUM = 'Stadium needed'\nexport const NO_MONEY = 'No money'\nexport const NOT_ENOUGH_POWER = 'Not enough power'\nexport const NUCLEAR_MELTDOWN = 'Nuclear Meltdown'\nexport const PLANE_CRASHED = 'Plane crashed'\nexport const POLICE_NEEDS_FUNDING = 'Police need funding'\nexport const POPULATION_UPDATED = 'Population updated'\nexport const QUERY_WINDOW_CLOSED = 'Query window closed'\nexport const QUERY_WINDOW_NEEDED = 'Query window needed'\nexport const REACHED_CAPITAL = 'Now a capital'\nexport const REACHED_CITY = 'Now a city'\nexport const REACHED_METROPOLIS = 'Now a metropolis'\nexport const REACHED_MEGALOPOLIS = 'Now a megalopolis'\nexport const REACHED_TOWN = 'Now a town'\nexport const REACHED_VILLAGE = 'Now a village'\nexport const ROAD_NEEDS_FUNDING = 'Roads need funding'\nexport const SAVE_REQUESTED = 'Save requested'\nexport const SAVE_WINDOW_CLOSED = 'Save window closed'\nexport const SCORE_UPDATED = 'Scoe updated'\nexport const SCREENSHOT_LINK_CLOSED = 'Screenshot link closed'\nexport const SCREENSHOT_WINDOW_CLOSED = 'Screenshot window closed'\nexport const SCREENSHOT_WINDOW_REQUESTED = 'Screenshot window requested'\nexport const SETTINGS_WINDOW_CLOSED = 'Settings window closed'\nexport const SETTINGS_WINDOW_REQUESTED = 'Settings window requested'\nexport const SHIP_CRASHED = 'Shipwrecked'\nexport const SOUND_EXPLOSIONHIGH = 'Explosion! Bang!'\nexport const SOUND_EXPLOSIONLOW = 'Explosion! Bang!'\nexport const SOUND_HEAVY_TRAFFIC = 'Heavy Traffic sound'\nexport const SOUND_HONKHONK = 'HonkHonk sound'\nexport const SOUND_MONSTER = 'Monster sound'\nexport const SPEED_CHANGE = 'Speed change'\nexport const SPRITE_DYING = 'Sprite dying'\nexport const SPRITE_MOVED = 'Sprite move'\nexport const TAX_TOO_HIGH = 'Tax too high'\nexport const TOOL_CLICKED = 'Tool clicked'\nexport const TORNADO_SIGHTED = 'Tornado sighted'\nexport const TOUCH_WINDOW_CLOSED = 'Touch Window closed'\nexport const TRAFFIC_JAMS = 'Traffic jams reported'\nexport const TRAIN_CRASHED = 'Train crashed'\nexport const VALVES_UPDATED = 'Valves updated'\n\nexport const WELCOME = 'Welcome'\n\nexport const DISASTER_MESSAGES = [\n  EARTHQUAKE,\n  EXPLOSION_REPORTED,\n  FIRE_REPORTED,\n  FLOODING_REPORTED,\n  MONSTER_SIGHTED,\n  NUCLEAR_MELTDOWN,\n  TORNADO_SIGHTED,\n]\n\nexport const CRASHES = [\n  HELICOPTER_CRASHED,\n  PLANE_CRASHED,\n  SHIP_CRASHED,\n  TRAIN_CRASHED,\n]\n","import { EventEmitter } from '../eventEmitter'\nimport * as Messages from '../messages'\nimport { MiscUtils } from '../utils'\n\n// Cost of maintaining 1 police station\nconst policeMaintenanceCost = 100\n\n// Cost of maintaining 1 fire station\nconst fireMaintenanceCost = 100\n\n// Cost of maintaining 1 road tile\nconst roadMaintenanceCost = 1\n\n// Cost of maintaining 1 rail tile\nconst railMaintenanceCost = 2\n\nconst Budget = EventEmitter(function () {\n  Object.defineProperties(this, {\n    MAX_ROAD_EFFECT: MiscUtils.makeConstantDescriptor(32),\n    MAX_POLICESTATION_EFFECT: MiscUtils.makeConstantDescriptor(1000),\n    MAX_FIRESTATION_EFFECT: MiscUtils.makeConstantDescriptor(1000),\n  })\n\n  this.roadEffect = this.MAX_ROAD_EFFECT\n  this.policeEffect = this.MAX_POLICESTATION_EFFECT\n  this.fireEffect = this.MAX_FIRESTATION_EFFECT\n  this.totalFunds = 0\n  this.cityTax = 7\n  this.cashFlow = 0\n  this.taxFund = 0\n\n  // These values denote how much money is required to fully maintain the relevant services\n  this.roadMaintenanceBudget = 0\n  this.fireMaintenanceBudget = 0\n  this.policeMaintenanceBudget = 0\n\n  // Percentage of budget used\n  this.roadPercent = 1\n  this.firePercent = 1\n  this.policePercent = 1\n\n  // Cash value of spending. Should equal Math.round(_MaintenanceBudget * _Percent)\n  this.roadSpend = 0\n  this.fireSpend = 0\n  this.policeSpend = 0\n\n  this.awaitingValues = false\n  this.autoBudget = true\n})\n\nconst saveProps = [\n  'autoBudget',\n  'totalFunds',\n  'policePercent',\n  'roadPercent',\n  'firePercent',\n  'roadSpend',\n  'policeSpend',\n  'fireSpend',\n  'roadMaintenanceBudget',\n  'policeMaintenanceBudget',\n  'fireMaintenanceBudget',\n  'cityTax',\n  'roadEffect',\n  'policeEffect',\n  'fireEffect',\n]\n\nBudget.prototype.save = function (saveData) {\n  for (let i = 0, l = saveProps.length; i < l; i++) { saveData[saveProps[i]] = this[saveProps[i]] }\n}\n\nBudget.prototype.load = function (saveData) {\n  for (let i = 0, l = saveProps.length; i < l; i++) {\n    this[saveProps[i]] = saveData[saveProps[i]] || this[saveProps[i]]\n  }\n\n  this._emitEvent(Messages.AUTOBUDGET_CHANGED, this.autoBudget)\n  this._emitEvent(Messages.FUNDS_CHANGED, this.totalFunds)\n}\n\nBudget.prototype.setAutoBudget = function (value) {\n  this.autoBudget = value\n  this._emitEvent(Messages.AUTOBUDGET_CHANGED, this.autoBudget)\n}\n\nconst RLevels = [0.7, 0.9, 1.2]\nconst FLevels = [1.4, 1.2, 0.8]\n\n// Calculates the best possible outcome in terms of funding the various services\n// given the player's current funds and tax yield. On entry, roadPercent etc. are\n// assumed to contain the desired percentage level, and taxFunds should contain the\n// most recent tax collected. On exit, the *Percent members will be updated with what\n// we can actually afford to spend. Returns an object containing the amount of cash\n// that would be spent on each service.\nBudget.prototype._calculateBestPercentages = function () {\n  // How much would we be spending based on current percentages?\n  // Note: the *Budget items are updated every January by collectTax\n  this.roadSpend = Math.round(this.roadMaintenanceBudget * this.roadPercent)\n  this.fireSpend = Math.round(this.fireMaintenanceBudget * this.firePercent)\n  this.policeSpend = Math.round(\n    this.policeMaintenanceBudget * this.policePercent\n  )\n  const total = this.roadSpend + this.fireSpend + this.policeSpend\n\n  // If we don't have any services on the map, we can bail early\n  if (total === 0) {\n    this.roadPercent = 1\n    this.firePercent = 1\n    this.policePercent = 1\n    return { road: 1, fire: 1, police: 1 }\n  }\n\n  // How much are we actually going to spend?\n  let roadCost = 0\n  let fireCost = 0\n  let policeCost = 0\n\n  let cashRemaining = this.totalFunds + this.taxFund\n\n  // Spending priorities: road, fire, police\n  if (cashRemaining >= this.roadSpend) roadCost = this.roadSpend\n  else roadCost = cashRemaining\n  cashRemaining -= roadCost\n\n  if (cashRemaining >= this.fireSpend) fireCost = this.fireSpend\n  else fireCost = cashRemaining\n  cashRemaining -= fireCost\n\n  if (cashRemaining >= this.policeSpend) policeCost = this.policeSpend\n  else policeCost = cashRemaining\n  cashRemaining -= policeCost\n\n  if (this.roadMaintenanceBudget > 0) {\n    this.roadPercent =\n      (roadCost / this.roadMaintenanceBudget).toPrecision(2) - 0\n  } else this.roadPercent = 1\n\n  if (this.fireMaintenanceBudget > 0) {\n    this.firePercent =\n      (fireCost / this.fireMaintenanceBudget).toPrecision(2) - 0\n  } else this.firePercent = 1\n\n  if (this.policeMaintenanceBudget > 0) {\n    this.policePercent =\n      (policeCost / this.policeMaintenanceBudget).toPrecision(2) - 0\n  } else this.policePercent = 1\n\n  return { road: roadCost, police: policeCost, fire: fireCost }\n}\n\n// User initiated budget\nBudget.prototype.doBudgetWindow = function () {\n  return this.doBudgetNow(true)\n}\n\nBudget.prototype.doBudgetNow = function (fromWindow) {\n  const costs = this._calculateBestPercentages()\n\n  if (!this.autoBudget && !fromWindow) {\n    this.autoBudget = false\n    this.awaitingValues = true\n    this._emitEvent(Messages.BUDGET_NEEDED)\n    return\n  }\n\n  const roadCost = costs.road\n  const policeCost = costs.police\n  const fireCost = costs.fire\n  const totalCost = roadCost + policeCost + fireCost\n  const cashRemaining = this.totalFunds + this.taxFund - totalCost\n\n  // Autobudget\n  if ((cashRemaining > 0 && this.autoBudget) || fromWindow) {\n    // Either we were able to fully fund services, or we have just normalised user input. Go ahead and spend.\n    this.awaitingValues = false\n    this.doBudgetSpend(roadCost, fireCost, policeCost)\n    return\n  }\n\n  // Uh-oh. Not enough money. Make this the user's problem.\n  // They don't know it yet, but they're about to get a budget window.\n  this.setAutoBudget(false)\n  this.awaitingValues = true\n  this._emitEvent(Messages.BUDGET_NEEDED)\n  this._emitEvent(Messages.NO_MONEY)\n}\n\nBudget.prototype.doBudgetSpend = function (roadValue, fireValue, policeValue) {\n  this.roadSpend = roadValue\n  this.fireSpend = fireValue\n  this.policeSpend = policeValue\n  const total = this.roadSpend + this.fireSpend + this.policeSpend\n\n  this.spend(-(this.taxFund - total))\n  this.updateFundEffects()\n}\n\nBudget.prototype.updateFundEffects = function () {\n  // The caller is assumed to have correctly set the percentage spend\n  this.roadSpend = Math.round(this.roadMaintenanceBudget * this.roadPercent)\n  this.fireSpend = Math.round(this.fireMaintenanceBudget * this.firePercent)\n  this.policeSpend = Math.round(\n    this.policeMaintenanceBudget * this.policePercent\n  )\n\n  // Update the effect this level of spending will have on infrastructure deterioration\n  this.roadEffect = this.MAX_ROAD_EFFECT\n  this.policeEffect = this.MAX_POLICESTATION_EFFECT\n  this.fireEffect = this.MAX_FIRESTATION_EFFECT\n\n  if (this.roadMaintenanceBudget > 0) {\n    this.roadEffect = Math.floor(\n      (this.roadEffect * this.roadSpend) / this.roadMaintenanceBudget\n    )\n  }\n\n  if (this.fireMaintenanceBudget > 0) {\n    this.fireEffect = Math.floor(\n      (this.fireEffect * this.fireSpend) / this.fireMaintenanceBudget\n    )\n  }\n\n  if (this.policeMaintenanceBudget > 0) {\n    this.policeEffect = Math.floor(\n      (this.policeEffect * this.policeSpend) / this.policeMaintenanceBudget\n    )\n  }\n}\n\nBudget.prototype.collectTax = function (gameLevel, census) {\n  this.cashFlow = 0\n\n  // How much would it cost to fully fund every service?\n  this.policeMaintenanceBudget = census.policeStationPop * policeMaintenanceCost\n  this.fireMaintenanceBudget = census.fireStationPop * fireMaintenanceCost\n\n  const roadCost = census.roadTotal * roadMaintenanceCost\n  const railCost = census.railTotal * railMaintenanceCost\n  this.roadMaintenanceBudget = Math.floor(\n    (roadCost + railCost) * RLevels[gameLevel]\n  )\n\n  this.taxFund = Math.floor(\n    Math.floor((census.totalPop * census.landValueAverage) / 120)\n      * this.cityTax\n      * FLevels[gameLevel]\n  )\n\n  if (census.totalPop > 0) {\n    this.cashFlow =\n      this.taxFund\n      - (this.policeMaintenanceBudget\n        + this.fireMaintenanceBudget\n        + this.roadMaintenanceBudget)\n    this.doBudgetNow(false)\n  } else {\n    // We don't want roads etc deteriorating when population hasn't yet been established\n    // (particularly early game)\n    this.roadEffect = this.MAX_ROAD_EFFECT\n    this.policeEffect = this.MAX_POLICESTATION_EFFECT\n    this.fireEffect = this.MAX_FIRESTATION_EFFECT\n  }\n}\n\nBudget.prototype.setTax = function (amount) {\n  if (amount === this.cityTax) return\n\n  this.cityTax = amount\n}\n\nBudget.prototype.setFunds = function (amount) {\n  if (amount === this.totalFunds) return\n\n  this.totalFunds = Math.max(0, amount)\n\n  this._emitEvent(Messages.FUNDS_CHANGED, this.totalFunds)\n  if (this.totalFunds === 0) this._emitEvent(Messages.NO_MONEY)\n}\n\nBudget.prototype.spend = function (amount) {\n  this.setFunds(this.totalFunds - amount)\n}\n\nBudget.prototype.shouldDegradeRoad = function () {\n  return this.roadEffect < Math.floor((15 * this.MAX_ROAD_EFFECT) / 16)\n}\n\nexport { Budget }\n","import { MiscUtils } from '../utils'\n\nconst arrs = ['res', 'com', 'ind', 'crime', 'money', 'pollution']\nfunction Census() {\n  this.clearCensus()\n  this.changed = false\n  this.crimeRamp = 0\n  this.pollutionRamp = 0\n\n  // Set externally\n  this.landValueAverage = 0\n  this.pollutionAverage = 0\n  this.crimeAverage = 0\n  this.totalPop = 0\n\n  const createArray = function (arrName) {\n    this[arrName] = []\n    for (let a = 0; a < 120; a++) this[arrName][a] = 0\n  }\n\n  for (let i = 0; i < arrs.length; i++) {\n    const name10 = arrs[i] + 'Hist10'\n    const name120 = arrs[i] + 'Hist120'\n    createArray.call(this, name10)\n    createArray.call(this, name120)\n  }\n}\n\nconst rotate10Arrays = function () {\n  for (let i = 0; i < arrs.length; i++) {\n    const name10 = arrs[i] + 'Hist10'\n    this[name10].pop()\n    this[name10].unshift(0)\n  }\n}\n\nconst rotate120Arrays = function () {\n  for (let i = 0; i < arrs.length; i++) {\n    const name120 = arrs[i] + 'Hist120'\n    this[name120].pop()\n    this[name120].unshift(0)\n  }\n}\n\nCensus.prototype.clearCensus = function () {\n  this.poweredZoneCount = 0\n  this.unpoweredZoneCount = 0\n  this.firePop = 0\n  this.roadTotal = 0\n  this.railTotal = 0\n  this.resPop = 0\n  this.comPop = 0\n  this.indPop = 0\n  this.resZonePop = 0\n  this.comZonePop = 0\n  this.indZonePop = 0\n  this.hospitalPop = 0\n  this.churchPop = 0\n  this.policeStationPop = 0\n  this.fireStationPop = 0\n  this.stadiumPop = 0\n  this.coalPowerPop = 0\n  this.nuclearPowerPop = 0\n  this.seaportPop = 0\n  this.airportPop = 0\n}\n\nconst saveProps = [\n  'resPop',\n  'comPop',\n  'indPop',\n  'crimeRamp',\n  'pollutionRamp',\n  'landValueAverage',\n  'pollutionAverage',\n  'crimeAverage',\n  'totalPop',\n  'resHist10',\n  'resHist120',\n  'comHist10',\n  'comHist120',\n  'indHist10',\n  'indHist120',\n  'crimeHist10',\n  'crimeHist120',\n  'moneyHist10',\n  'moneyHist120',\n  'pollutionHist10',\n  'pollutionHist120',\n]\n\nCensus.prototype.save = function (saveData) {\n  for (let i = 0, l = saveProps.length; i < l; i++) { saveData[saveProps[i]] = this[saveProps[i]] }\n}\n\nCensus.prototype.load = function (saveData) {\n  for (let i = 0, l = saveProps.length; i < l; i++) {\n    this[saveProps[i]] = saveData[saveProps[i]] || this[saveProps[i]]\n  }\n}\n\nCensus.prototype.take10Census = function (budget) {\n  const resPopDenom = 8\n\n  rotate10Arrays.call(this)\n\n  this.resHist10[0] = Math.floor(this.resPop / resPopDenom)\n  this.comHist10[0] = this.comPop\n  this.indHist10[0] = this.indPop\n\n  this.crimeRamp += Math.floor((this.crimeAverage - this.crimeRamp) / 4)\n  this.crimeHist10[0] = Math.min(this.crimeRamp, 255)\n\n  this.pollutionRamp += Math.floor(\n    (this.pollutionAverage - this.pollutionRamp) / 4\n  )\n  this.pollutionHist10[0] = Math.min(this.pollutionRamp, 255)\n\n  const x = Math.floor(budget.cashFlow / 20) + 128\n  this.moneyHist10[0] = MiscUtils.clamp(x, 0, 255)\n\n  const resPopScaled = this.resPop >> 8\n\n  if (this.hospitalPop < this.resPopScaled) this.needHospital = 1\n  else if (this.hospitalPop > this.resPopScaled) this.needHospital = -1\n  else if (this.hospitalPop === this.resPopScaled) this.needHospital = 0\n\n  this.changed = true\n}\n\nCensus.prototype.take120Census = function () {\n  rotate120Arrays.call(this)\n  const resPopDenom = 8\n\n  this.resHist120[0] = Math.floor(this.resPop / resPopDenom)\n  this.comHist120[0] = this.comPop\n  this.indHist120[0] = this.indPop\n  this.crimeHist120[0] = this.crimeHist10[0]\n  this.pollutionHist120[0] = this.pollutionHist10[0]\n  this.moneyHist120[0] = this.moneyHist10[0]\n  this.changed = true\n}\n\nexport { Census }\n","import { EventEmitter } from '../eventEmitter'\nimport * as Messages from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { SPRITE_AIRPLANE } from '../sprites/spriteConstants'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\nimport { ZoneUtils } from '../zones/zoneUtils'\n\nconst DisasterManager = EventEmitter(function (map, spriteManager, gameLevel) {\n  this._map = map\n  this._spriteManager = spriteManager\n  this._gameLevel = gameLevel\n\n  this._floodCount = 0\n  this.disastersEnabled = false\n})\n\nconst DisChance = [479, 239, 59]\n\nDisasterManager.prototype.doDisasters = function (census) {\n  if (this._floodCount) this._floodCount--\n\n  // TODO Scenarios\n\n  if (!this.disastersEnabled) return\n\n  if (!Random.getRandom(DisChance[this._gameLevel])) {\n    switch (Random.getRandom(8)) {\n      case 0:\n      case 1:\n        this.setFire()\n        break\n\n      case 2:\n      case 3:\n        this.makeFlood()\n        break\n\n      case 4:\n        break\n\n      case 5:\n        this._spriteManager.makeTornado()\n        break\n\n      case 6:\n        // TODO Earthquakes\n        // this.makeEarthquake();\n        break\n\n      case 7:\n      case 8:\n        if (census.pollutionAverage > 60) this._spriteManager.makeMonster()\n        break\n    }\n  }\n}\n\nDisasterManager.prototype.scenarioDisaster = function () {\n  // TODO Scenarios\n}\n\n// User initiated meltdown: need to find the plant first\nDisasterManager.prototype.makeMeltdown = function () {\n  for (let x = 0; x < this._map.width - 1; x++) {\n    for (let y = 0; y < this._map.height - 1; y++) {\n      if (this._map.getTileValue(x, y) === TileValues.NUCLEAR) {\n        this.doMeltdown(x, y)\n        return\n      }\n    }\n  }\n}\n\nconst vulnerable = function (tile) {\n  const tileValue = tile.getValue()\n\n  if (\n    tileValue < TileValues.RESBASE\n    || tileValue > TileValues.LASTZONE\n    || tile.isZone()\n  ) { return false }\n\n  return true\n}\n\n// User initiated earthquake\nDisasterManager.prototype.makeEarthquake = function () {\n  const strength = Random.getRandom(700) + 300\n  this.doEarthquake(strength)\n\n  this._emitEvent(Messages.EARTHQUAKE, {\n    x: this._map.cityCenterX,\n    y: this._map.cityCenterY,\n  })\n\n  for (let i = 0; i < strength; i++) {\n    const x = Random.getRandom(this._map.width - 1)\n    const y = Random.getRandom(this._map.height - 1)\n\n    if (!this._map.testBounds(x, y)) continue\n\n    if (vulnerable(this._map.getTile(x, y))) {\n      if ((i & 0x3) !== 0) this._map.setTo(x, y, TileUtils.randomRubble())\n      else this._map.setTo(x, y, TileUtils.randomFire())\n    }\n  }\n}\n\nDisasterManager.prototype.setFire = function (times, zonesOnly) {\n  times = times || 1\n  zonesOnly = zonesOnly || false\n\n  for (let i = 0; i < times; i++) {\n    const x = Random.getRandom(this._map.width - 1)\n    const y = Random.getRandom(this._map.height - 1)\n\n    if (!this._map.testBounds(x, y)) continue\n\n    let tile = this._map.getTile(x, y)\n\n    if (!tile.isZone()) {\n      tile = tile.getValue()\n      const lowerLimit = zonesOnly ? TileValues.LHTHR : TileValues.TREEBASE\n      if (tile > lowerLimit && tile < TileValues.LASTZONE) {\n        this._map.setTo(x, y, TileUtils.randomFire())\n        this._emitEvent(Messages.FIRE_REPORTED, { showable: true, x, y })\n        return\n      }\n    }\n  }\n}\n\n// User initiated plane crash\nDisasterManager.prototype.makeCrash = function () {\n  let s = this._spriteManager.getSprite(SPRITE_AIRPLANE)\n  if (s !== null) {\n    s.explodeSprite()\n    return\n  }\n\n  const x = Random.getRandom(this._map.width - 1)\n  const y = Random.getRandom(this._map.height - 1)\n  this._spriteManager.generatePlane(x, y)\n  s = this._spriteManager.getSprite(SPRITE_AIRPLANE)\n  s.explodeSprite()\n}\n\n// User initiated fire\nDisasterManager.prototype.makeFire = function () {\n  this.setFire(40, false)\n}\n\nconst Dx = [0, 1, 0, -1]\nconst Dy = [-1, 0, 1, 0]\n\nDisasterManager.prototype.makeFlood = function () {\n  for (let i = 0; i < 300; i++) {\n    const x = Random.getRandom(this._map.width - 1)\n    const y = Random.getRandom(this._map.height - 1)\n    if (!this._map.testBounds(x, y)) continue\n\n    let tileValue = this._map.getTileValue(x, y)\n\n    if (tileValue > TileValues.CHANNEL && tileValue <= TileValues.WATER_HIGH) {\n      for (let j = 0; j < 4; j++) {\n        const xx = x + Dx[j]\n        const yy = y + Dy[j]\n\n        if (!this._map.testBounds(xx, yy)) continue\n\n        const tile = this._map.getTile(xx, yy)\n        tileValue = tile.getValue()\n\n        if (\n          tile === TileValues.DIRT\n          || (tile.isBulldozable() && tile.isCombustible)\n        ) {\n          this._map.setTile(xx, yy, TileValues.FLOOD, 0)\n          this._floodCount = 30\n          this._emitEvent(Messages.FLOODING_REPORTED, {\n            showable: true,\n            x: xx,\n            y: yy,\n          })\n          return\n        }\n      }\n    }\n  }\n}\n\nDisasterManager.prototype.doFlood = function (x, y, blockMaps) {\n  if (this._floodCount > 0) {\n    // Flood is not over yet\n    for (let i = 0; i < 4; i++) {\n      if (Random.getChance(7)) {\n        const xx = x + Dx[i]\n        const yy = y + Dy[i]\n\n        if (this._map.testBounds(xx, yy)) {\n          const tile = this._map.getTile(xx, yy)\n          const tileValue = tile.getValue()\n\n          if (\n            tile.isCombustible()\n            || tileValue === TileValues.DIRT\n            || (tileValue >= TileValues.WOODS5 && tileValue < TileValues.FLOOD)\n          ) {\n            if (tile.isZone()) ZoneUtils.fireZone(this._map, xx, yy, blockMaps)\n\n            this._map.setTile(xx, yy, TileValues.FLOOD + Random.getRandom(2), 0)\n          }\n        }\n      }\n    }\n  } else {\n    if (Random.getChance(15)) this._map.setTile(x, y, TileValues.DIRT, 0)\n  }\n}\n\nDisasterManager.prototype.doMeltdown = function (x, y) {\n  this._spriteManager.makeExplosion(x - 1, y - 1)\n  this._spriteManager.makeExplosion(x - 1, y + 2)\n  this._spriteManager.makeExplosion(x + 2, y - 1)\n  this._spriteManager.makeExplosion(x + 2, y + 2)\n\n  let dY, dX\n\n  // Whole power plant is on fire\n  for (dX = x - 1; dX < x + 3; dX++) {\n    for (dY = y - 1; dY < y + 3; dY++) {\n      this._map.setTo(dX, dY, TileUtils.randomFire())\n    }\n  }\n\n  // Add lots of radiation tiles around the plant\n  for (let i = 0; i < 200; i++) {\n    dX = x - 20 + Random.getRandom(40)\n    dY = y - 15 + Random.getRandom(30)\n\n    if (!this._map.testBounds(dX, dY)) continue\n\n    const tile = this._map.getTile(dX, dY)\n\n    if (tile.isZone()) continue\n\n    if (tile.isCombustible() || tile.getValue() === TileValues.DIRT) { this._map.setTile(dX, dY, TileValues.RADTILE, 0) }\n  }\n\n  // Report disaster to the user\n  this._emitEvent(Messages.NUCLEAR_MELTDOWN, { showable: true, x, y })\n}\n\nexport { DisasterManager }\n","import { Position } from '../map/position'\nimport { FIRESTATION, POLICESTATION } from '../tiles/tileValues'\n\nconst handleService = function (censusStat, budgetEffect, blockMap) {\n  return function (map, x, y, simData) {\n    simData.census[censusStat] += 1\n\n    let effect = simData.budget[budgetEffect]\n    const isPowered = map.getTile(x, y).isPowered()\n    // Unpowered buildings are half as effective\n    if (!isPowered) effect = Math.floor(effect / 2)\n\n    const pos = new Position(x, y)\n    const connectedToRoads = simData.trafficManager.findPerimeterRoad(pos)\n    if (!connectedToRoads) effect = Math.floor(effect / 2)\n\n    let currentEffect = simData.blockMaps[blockMap].worldGet(x, y)\n    currentEffect += effect\n    simData.blockMaps[blockMap].worldSet(x, y, currentEffect)\n  }\n}\n\nconst policeStationFound = handleService(\n  'policeStationPop',\n  'policeEffect',\n  'policeStationMap'\n)\nconst fireStationFound = handleService(\n  'fireStationPop',\n  'fireEffect',\n  'fireStationMap'\n)\n\nconst EmergencyServices = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(POLICESTATION, policeStationFound)\n    mapScanner.addAction(FIRESTATION, fireStationFound)\n  },\n}\n\nexport { EmergencyServices }\n","import { EventEmitter } from '../eventEmitter'\nimport {\n  CLASSIFICATION_UPDATED,\n  POPULATION_UPDATED,\n  SCORE_UPDATED,\n} from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\n\nvar PROBLEMS = [\n  'CVP_CRIME',\n  'CVP_POLLUTION',\n  'CVP_HOUSING',\n  'CVP_TAXES',\n  'CVP_TRAFFIC',\n  'CVP_UNEMPLOYMENT',\n  'CVP_FIRE',\n]\nvar NUMPROBLEMS = PROBLEMS.length\nvar NUM_COMPLAINTS = 4\nvar problemData = []\n\nvar Evaluation = EventEmitter(function (gameLevel) {\n  this.problemVotes = []\n  this.problemOrder = []\n  this.evalInit()\n  this.gameLevel = '' + gameLevel\n})\n\nEvaluation.prototype.cityEvaluation = function (simData) {\n  var census = simData.census\n\n  if (census.totalPop > 0) {\n    for (var i = 0; i < NUMPROBLEMS; i++) problemData.push(0)\n\n    this.getAssessedValue(census)\n    this.getPopulation(census)\n    this.doProblems(simData.census, simData.budget, simData.blockMaps)\n    this.getScore(simData)\n    this.doVotes()\n  } else {\n    this.evalInit()\n    this.cityYes = 50\n  }\n}\n\nEvaluation.prototype.evalInit = function () {\n  this.cityYes = 0\n  this.cityPop = 0\n  this.cityPopDelta = 0\n  this.cityAssessedValue = 0\n  this.cityClass = Evaluation.CC_VILLAGE\n  this.cityClassLast = Evaluation.CC_VILLAGE\n  this.cityScore = 500\n  this.cityScoreDelta = 0\n  for (var i = 0; i < NUMPROBLEMS; i++)\n    this.problemVotes[i] = { index: i, voteCount: 0 }\n\n  for (i = 0; i < NUM_COMPLAINTS; i++) this.problemOrder[i] = NUMPROBLEMS\n}\n\nvar saveProps = ['cityClass', 'cityScore']\n\nEvaluation.prototype.save = function (saveData) {\n  for (var i = 0, l = saveProps.length; i < l; i++)\n    saveData[saveProps[i]] = this[saveProps[i]]\n}\n\nEvaluation.prototype.load = function (saveData) {\n  for (var i = 0, l = saveProps.length; i < l; i++)\n    this[saveProps[i]] = saveData[saveProps[i]]\n}\n\nEvaluation.prototype.getAssessedValue = function (census) {\n  var value\n\n  value = census.roadTotal * 5\n  value += census.railTotal * 10\n  value += census.policeStationPop * 1000\n  value += census.fireStationPop * 1000\n  value += census.hospitalPop * 400\n  value += census.stadiumPop * 3000\n  value += census.seaportPop * 5000\n  value += census.airportPop * 10000\n  value += census.coalPowerPop * 3000\n  value += census.nuclearPowerPop * 6000\n\n  this.cityAssessedValue = value * 1000\n}\n\nEvaluation.prototype.getPopulation = function (census) {\n  var oldPopulation = this.cityPop\n  this.cityPop = (census.resPop + (census.comPop + census.indPop) * 8) * 20\n  this.cityPopDelta = this.cityPop - oldPopulation\n\n  if (this.cityPopDelta !== 0) this._emitEvent(POPULATION_UPDATED, this.cityPop)\n\n  return this.cityPop\n}\n\nEvaluation.prototype.getCityClass = function (cityPopulation) {\n  this.cityClass = Evaluation.CC_VILLAGE\n\n  if (cityPopulation > 2000) this.cityClass = Evaluation.CC_TOWN\n\n  if (cityPopulation > 10000) this.cityClass = Evaluation.CC_CITY\n\n  if (cityPopulation > 50000) this.cityClass = Evaluation.CC_CAPITAL\n\n  if (cityPopulation > 100000) this.cityClass = Evaluation.CC_METROPOLIS\n\n  if (cityPopulation > 500000) this.cityClass = Evaluation.CC_MEGALOPOLIS\n\n  if (this.cityClass !== this.cityClassLast) {\n    this.cityClassLast = this.cityClass\n    this._emitEvent(CLASSIFICATION_UPDATED, this.cityClass)\n  }\n\n  return this.cityClass\n}\n\nEvaluation.prototype.voteProblems = function () {\n  for (var i = 0; i < NUMPROBLEMS; i++) {\n    this.problemVotes[i].index = i\n    this.problemVotes[i].voteCount = 0\n  }\n\n  var problem = 0\n  var voteCount = 0\n  var loopCount = 0\n\n  // Try to acquire up to 100 votes on problems, but bail if it takes too long\n  while (voteCount < 100 && loopCount < 600) {\n    var voterProblemTolerance = Random.getRandom(300)\n    if (problemData[problem] > voterProblemTolerance) {\n      // The voter is upset about this problem\n      this.problemVotes[problem].voteCount += 1\n      voteCount++\n    }\n\n    problem = (problem + 1) % NUMPROBLEMS\n    loopCount++\n  }\n}\n\nvar getTrafficAverage = function (blockMaps, census) {\n  var trafficDensityMap = blockMaps.trafficDensityMap\n  var landValueMap = blockMaps.landValueMap\n\n  var trafficTotal = 0\n  var count = 1\n\n  for (var x = 0; x < landValueMap.gameMapWidth; x += landValueMap.blockSize) {\n    for (\n      var y = 0;\n      y < landValueMap.gameMapHeight;\n      y += landValueMap.blockSize\n    ) {\n      if (landValueMap.worldGet(x, y) > 0) {\n        trafficTotal += trafficDensityMap.worldGet(x, y)\n        count++\n      }\n    }\n  }\n\n  var trafficAverage = (census.trafficAverage =\n    Math.floor(trafficTotal / count) * 2.4)\n\n  return trafficAverage\n}\n\nvar getUnemployment = function (census) {\n  var b = (census.comPop + census.indPop) * 8\n\n  if (b === 0) return 0\n\n  // Ratio total people / working. At least 1.\n  var r = census.resPop / b\n\n  b = Math.round((r - 1) * 255)\n  return Math.min(b, 255)\n}\n\nvar getFireSeverity = function (census) {\n  return Math.min(census.firePop * 5, 255)\n}\n\nEvaluation.prototype.doProblems = function (census, budget, blockMaps) {\n  problemData[Evaluation.CRIME] = census.crimeAverage\n  problemData[Evaluation.POLLUTION] = census.pollutionAverage\n  problemData[Evaluation.HOUSING] = (census.landValueAverage * 7) / 10\n  problemData[Evaluation.TAXES] = budget.cityTax * 10\n  problemData[Evaluation.TRAFFIC] = getTrafficAverage(blockMaps, census)\n  problemData[Evaluation.UNEMPLOYMENT] = getUnemployment(census)\n  problemData[Evaluation.FIRE] = getFireSeverity(census)\n\n  this.voteProblems()\n\n  // Rank the problems\n  this.problemVotes.sort(function (a, b) {\n    return b.voteCount - a.voteCount\n  })\n\n  this.problemOrder = this.problemVotes.map(function (pv, i) {\n    if (i >= NUM_COMPLAINTS || pv.voteCount === 0) return null\n\n    return pv.index\n  })\n}\n\nEvaluation.prototype.getScore = function (simData) {\n  var census = simData.census\n  var budget = simData.budget\n  var valves = simData.valves\n\n  var cityScoreLast = this.cityScore\n  var score = 0\n\n  for (var i = 0; i < NUMPROBLEMS; i++) score += problemData[i]\n\n  score = Math.floor(score / 3)\n  score = (250 - Math.min(score, 250)) * 4\n\n  // Penalise the player by 15% if demand for any type of zone is capped due\n  // to lack of suitable buildings\n  var demandPenalty = 0.85\n\n  if (valves.resCap) score = Math.round(score * demandPenalty)\n\n  if (valves.comCap) score = Math.round(score * demandPenalty)\n\n  if (valves.indCap) score = Math.round(score * demandPenalty)\n\n  // Penalize if roads/rail underfunded\n  if (budget.roadEffect < budget.MAX_ROAD_EFFECT)\n    score -= budget.MAX_ROAD_EFFECT - budget.roadEffect\n\n  // Penalize player by up to 10% for underfunded police and fire services\n  if (budget.policeEffect < budget.MAX_POLICE_STATION_EFFECT)\n    score = Math.round(\n      score *\n        (0.9 + budget.policeEffect / (10 * budget.MAX_POLICE_STATION_EFFECT))\n    )\n\n  if (budget.fireEffect < budget.MAX_FIRE_STATION_EFFECT)\n    score = Math.round(\n      score * (0.9 + budget.fireEffect / (10 * budget.MAX_FIRE_STATION_EFFECT))\n    )\n\n  // Penalise the player by 15% if demand for any type of zone has collapsed due\n  // to overprovision\n  if (valves.resValve < -1000) score = Math.round(score * 0.85)\n\n  if (valves.comValve < -1000) score = Math.round(score * 0.85)\n\n  if (valves.indValve < -1000) score = Math.round(score * 0.85)\n\n  var scale = 1.0\n  if (\n    this.cityPop === 0 ||\n    this.cityPopDelta === 0 ||\n    this.cityPopDelta === this.cityPop\n  ) {\n    // Leave score unchanged if city is empty, if there hasn't been any migration, if the\n    // initial settlers have just arrived, or if the city has doubled in size\n    scale = 1.0\n  } else if (this.cityPopDelta > 0) {\n    // If the city is growing, scale score by percentage growth in population\n    scale = this.cityPopDelta / this.cityPop + 1.0\n  } else if (this.cityPopDelta < 0) {\n    // If the city is shrinking, scale down by up to 5% based on level of outward migration\n    scale =\n      0.95 + Math.floor(this.cityPopDelta / (this.cityPop - this.cityPopDelta))\n  }\n\n  score = Math.round(score * scale)\n\n  // Penalize player for having fires and a burdensome tax rate\n  score = score - getFireSeverity(census) - budget.cityTax\n\n  // Penalize player based on ratio of unpowered zones to total zones\n  scale = census.unpoweredZoneCount + census.poweredZoneCount\n  if (scale > 0) score = Math.round(score * (census.poweredZoneCount / scale))\n\n  // Force in to range 0-1000. New score is average of last score and new computed value\n  score = MiscUtils.clamp(score, 0, 1000)\n  this.cityScore = Math.round((this.cityScore + score) / 2)\n\n  this.cityScoreDelta = this.cityScore - cityScoreLast\n\n  if (this.cityScoreDelta !== 0) this._emitEvent(SCORE_UPDATED, this.cityScore)\n}\n\nEvaluation.prototype.doVotes = function () {\n  // Survey 100 voters on the mayor's performance\n  this.cityYes = 0\n\n  for (var i = 0; i < 100; i++) {\n    var voterExpectation = Random.getRandom(1000)\n    if (this.cityScore > voterExpectation) this.cityYes++\n  }\n}\n\nEvaluation.prototype.getProblemNumber = function (i) {\n  if (i < 0 || i >= NUM_COMPLAINTS) return null\n\n  return this.problemOrder[i]\n}\n\nObject.defineProperties(Evaluation, {\n  CC_VILLAGE: MiscUtils.makeConstantDescriptor('VILLAGE'),\n  CC_TOWN: MiscUtils.makeConstantDescriptor('TOWN'),\n  CC_CITY: MiscUtils.makeConstantDescriptor('CITY'),\n  CC_CAPITAL: MiscUtils.makeConstantDescriptor('CAPITAL'),\n  CC_METROPOLIS: MiscUtils.makeConstantDescriptor('METROPOLIS'),\n  CC_MEGALOPOLIS: MiscUtils.makeConstantDescriptor('MEGALOPOLIS'),\n  CRIME: MiscUtils.makeConstantDescriptor(0),\n  POLLUTION: MiscUtils.makeConstantDescriptor(1),\n  HOUSING: MiscUtils.makeConstantDescriptor(2),\n  TAXES: MiscUtils.makeConstantDescriptor(3),\n  TRAFFIC: MiscUtils.makeConstantDescriptor(4),\n  UNEMPLOYMENT: MiscUtils.makeConstantDescriptor(5),\n  FIRE: MiscUtils.makeConstantDescriptor(6),\n})\nexport { Evaluation }\n","import { Tile } from '../tiles/tile'\nimport { FLOOD } from '../tiles/tileValues'\n\n// Tile to be filled to avoid creating lots of GC-able objects\nconst tile = new Tile()\n\nfunction MapScanner(map) {\n  this._map = map\n  this._actions = []\n}\n\nconst isCallable = function (f) {\n  return typeof f === 'function'\n}\n\nMapScanner.prototype.addAction = function (criterion, action) {\n  this._actions.push({ criterion, action })\n}\n\nMapScanner.prototype.mapScan = function (startX, maxX, simData) {\n  for (let y = 0; y < this._map.height; y++) {\n    for (let x = startX; x < maxX; x++) {\n      this._map.getTile(x, y, tile)\n      const tileValue = tile.getValue()\n\n      if (tileValue < FLOOD) continue\n\n      if (tile.isConductive()) simData.powerManager.setTilePower(x, y)\n\n      if (tile.isZone()) {\n        simData.repairManager.checkTile(x, y, simData.cityTime)\n        const powered = tile.isPowered()\n        if (powered) simData.census.poweredZoneCount += 1\n        else simData.census.unpoweredZoneCount += 1\n      }\n\n      for (let i = 0, l = this._actions.length; i < l; i++) {\n        const current = this._actions[i]\n        const callable = isCallable(current.criterion)\n\n        if (callable && current.criterion.call(null, tile)) {\n          current.action.call(null, this._map, x, y, simData)\n          break\n        } else if (!callable && current.criterion === tileValue) {\n          current.action.call(null, this._map, x, y, simData)\n          break\n        }\n      }\n    }\n  }\n}\n\nexport { MapScanner }\n","import { Random } from '../random'\nimport { TileUtils } from './tileUtils'\nimport { DIRT, IZB, RADTILE } from './tileValues'\nimport { ZoneUtils } from '../zones/zoneUtils'\n\nconst xDelta = [-1, 0, 1, 0]\nconst yDelta = [0, -1, 0, 1]\n\nconst fireFound = function (map, x, y, simData) {\n  simData.census.firePop += 1\n\n  if ((Random.getRandom16() & 3) !== 0) return\n\n  // Try to set neighbouring tiles on fire as well\n  for (let i = 0; i < 4; i++) {\n    if (Random.getChance(7)) {\n      const xTem = x + xDelta[i]\n      const yTem = y + yDelta[i]\n\n      if (map.testBounds(xTem, yTem)) {\n        const tile = map.getTile(x, y)\n        if (!tile.isCombustible()) continue\n\n        if (tile.isZone()) {\n          // Neighbour is a ione and burnable\n          ZoneUtils.fireZone(map, x, y, simData.blockMaps)\n\n          // Industrial zones etc really go boom\n          if (tile.getValue() > IZB) simData.spriteManager.makeExplosionAt(x, y)\n        }\n\n        map.setTo(TileUtils.randomFire())\n      }\n    }\n  }\n\n  // Compute likelyhood of fire running out of fuel\n  let rate = 10 // Likelyhood of extinguishing (bigger means less chance)\n  let i = simData.blockMaps.fireStationEffectMap.worldGet(x, y)\n\n  if (i > 100) rate = 1\n  else if (i > 20) rate = 2\n  else if (i > 0) rate = 3\n\n  // Decide whether to put out the fire.\n  if (Random.getRandom(rate) === 0) map.setTo(x, y, TileUtils.randomRubble())\n}\n\nconst radiationFound = function (map, x, y, simData) {\n  if (Random.getChance(4095)) map.setTile(x, y, DIRT, 0)\n}\n\nconst floodFound = function (map, x, y, simData) {\n  simData.disasterManager.doFlood(x, y, simData.blockMaps)\n}\n\nconst MiscTiles = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(TileUtils.isFire, fireFound, true)\n    mapScanner.addAction(RADTILE, radiationFound, true)\n    mapScanner.addAction(TileUtils.isFlood, floodFound, true)\n  },\n}\n\nexport { MiscTiles }\n","import { BlockMap } from '../map/blockMap'\nimport { forEachCardinalDirection } from '../map/direction'\nimport { EventEmitter } from '../eventEmitter'\nimport { Position } from '../map/position'\nimport { NOT_ENOUGH_POWER } from '../messages'\nimport { Random } from '../random'\nimport { ANIMBIT, BURNBIT, CONDBIT, POWERBIT } from '../tiles/tileFlags'\nimport { NUCLEAR, POWERPLANT } from '../tiles/tileValues'\n\nconst COAL_POWER_STRENGTH = 700\nconst NUCLEAR_POWER_STRENGTH = 2000\n\nconst PowerManager = EventEmitter(function (map) {\n  this._map = map\n  this._powerStack = []\n  this.powerGridMap = new BlockMap(this._map.width, this._map.height, 1)\n})\n\nPowerManager.prototype.setTilePower = function (x, y) {\n  const tile = this._map.getTile(x, y)\n  const tileValue = tile.getValue()\n\n  if (\n    tileValue === NUCLEAR\n    || tileValue === POWERPLANT\n    || this.powerGridMap.worldGet(x, y) > 0\n  ) {\n    tile.addFlags(POWERBIT)\n    return\n  }\n\n  tile.removeFlags(POWERBIT)\n}\n\nPowerManager.prototype.clearPowerStack = function () {\n  this._powerStackPointer = 0\n  this._powerStack = []\n}\n\nPowerManager.prototype.testForConductive = function (pos, testDir) {\n  const movedPos = Position.move(pos, testDir)\n\n  if (this._map.isPositionInBounds(movedPos)) {\n    if (this._map.getTile(movedPos.x, movedPos.y).isConductive()) {\n      if (this.powerGridMap.worldGet(movedPos.x, movedPos.y) === 0) return true\n    }\n  }\n\n  return false\n}\n\n// Note: the algorithm is buggy: if you have two adjacent power\n// plants, the second will be regarded as drawing power from the first\n// rather than as a power source itself\nPowerManager.prototype.doPowerScan = function (census) {\n  // Clear power this._map.\n  this.powerGridMap.clear()\n\n  // Power that the combined coal and nuclear power plants can deliver.\n  const maxPower =\n    census.coalPowerPop * COAL_POWER_STRENGTH\n    + census.nuclearPowerPop * NUCLEAR_POWER_STRENGTH\n\n  let powerConsumption = 0 // Amount of power used.\n\n  while (this._powerStack.length > 0) {\n    var pos = this._powerStack.pop()\n    var anyDir = undefined\n    var conNum\n    do {\n      powerConsumption++\n      if (powerConsumption > maxPower) {\n        this._emitEvent(NOT_ENOUGH_POWER)\n        return\n      }\n\n      if (anyDir) pos = Position.move(pos, anyDir)\n\n      this.powerGridMap.worldSet(pos.x, pos.y, 1)\n      conNum = 0\n\n      forEachCardinalDirection((dir) => {\n        if (conNum >= 2) {\n          return\n        }\n\n        if (this.testForConductive(pos, dir)) {\n          conNum++\n          anyDir = dir\n        }\n      })\n\n      if (conNum > 1) this._powerStack.push(new Position(pos.x, pos.y))\n    } while (conNum)\n  }\n}\n\nPowerManager.prototype.coalPowerFound = function (map, x, y, simData) {\n  simData.census.coalPowerPop += 1\n\n  this._powerStack.push(new Position(x, y))\n\n  // Ensure animation runs\n  const dX = [-1, 2, 1, 2]\n  const dY = [-1, -1, 0, 0]\n\n  for (let i = 0; i < 4; i++) map.addTileFlags(x + dX[i], y + dY[i], ANIMBIT)\n}\n\nconst dX = [1, 2, 1, 2]\nconst dY = [-1, -1, 0, 0]\nconst meltdownTable = [30000, 20000, 10000]\n\nPowerManager.prototype.nuclearPowerFound = function (map, x, y, simData) {\n  // TODO With the auto repair system, zone gets repaired before meltdown\n  // In original Micropolis code, we bail and don't repair if melting down\n  if (\n    simData.disasterManager.disastersEnabled\n    && Random.getRandom(meltdownTable[simData.gameLevel]) === 0\n  ) {\n    simData.disasterManager.doMeltdown(x, y)\n    return\n  }\n\n  simData.census.nuclearPowerPop += 1\n  this._powerStack.push(new Position(x, y))\n\n  // Ensure animation bits set\n  for (let i = 0; i < 4; i++) { map.addTileFlags(x, y, ANIMBIT | CONDBIT | POWERBIT | BURNBIT) }\n}\n\nPowerManager.prototype.registerHandlers = function (mapScanner, repairManager) {\n  mapScanner.addAction(POWERPLANT, this.coalPowerFound.bind(this))\n  mapScanner.addAction(NUCLEAR, this.nuclearPowerFound.bind(this))\n  repairManager.addAction(POWERPLANT, 7, 4)\n  repairManager.addAction(NUCLEAR, 7, 4)\n}\n\nexport { PowerManager }\n","import { BURNBIT, CONDBIT } from '../tiles/tileFlags'\nimport { RUBBLE, ROADBASE } from '../tiles/tileValues'\n\nfunction RepairManager(map) {\n  this._map = map\n  this._actions = []\n}\n\nconst isCallable = function (f) {\n  return typeof f === 'function'\n}\n\nRepairManager.prototype.addAction = function (criterion, period, zoneSize) {\n  this._actions.push({\n    criterion,\n    period,\n    zoneSize,\n  })\n}\n\nRepairManager.prototype.repairZone = function (x, y, zoneSize) {\n  const centre = this._map.getTileValue(x, y)\n  let tileValue = centre - zoneSize - 2\n\n  for (let yy = -1; yy < zoneSize - 1; yy++) {\n    for (let xx = -1; xx < zoneSize - 1; xx++) {\n      tileValue++\n\n      const current = this._map.getTile(x + xx, y + yy)\n      if (current.isZone() || current.isAnimated()) continue\n\n      const currentValue = current.getValue()\n      if (currentValue < RUBBLE || currentValue >= ROADBASE) { this._map.setTile(x + xx, y + yy, tileValue, CONDBIT | BURNBIT) }\n    }\n  }\n}\n\nRepairManager.prototype.checkTile = function (x, y, cityTime) {\n  for (let i = 0, l = this._actions.length; i < l; i++) {\n    const current = this._actions[i]\n    const period = current.period\n\n    if ((cityTime & period) !== 0) continue\n\n    const tile = this._map.getTile(x, y)\n    const tileValue = tile.getValue()\n\n    const callable = isCallable(current.criterion)\n    if (callable && current.criterion.call(null, tile)) { this.repairZone(x, y, current.zoneSize) } else if (!callable && current.criterion === tileValue) { this.repairZone(x, y, current.zoneSize) }\n  }\n}\n\nexport { RepairManager }\n","import { Random } from '../random'\nimport { Tile } from './tile'\nimport { ANIMBIT, BIT_MASK, BULLBIT } from './tileFlags'\nimport * as TileValues from './tileValues'\nimport { TileUtils } from './tileUtils'\n\nconst openBridge = function (\n  map,\n  origX,\n  origY,\n  xDelta,\n  yDelta,\n  oldTiles,\n  newTiles\n) {\n  for (let i = 0; i < 7; i++) {\n    const x = origX + xDelta[i]\n    const y = origY + yDelta[i]\n\n    if (map.testBounds(x, y)) {\n      if (map.getTileValue(x, y) === (oldTiles[i] & BIT_MASK)) { map.setTileValue(x, y, newTiles[i]) }\n    }\n  }\n}\n\nconst closeBridge = function (\n  map,\n  origX,\n  origY,\n  xDelta,\n  yDelta,\n  oldTiles,\n  newTiles\n) {\n  for (let i = 0; i < 7; i++) {\n    const x = origX + xDelta[i]\n    const y = origY + yDelta[i]\n\n    if (map.testBounds(x, y)) {\n      const tileValue = map.getTileValue(x, y)\n      if (\n        tileValue === TileValues.CHANNEL\n        || (tileValue & 15) === (oldTiles[i] & 15)\n      ) { map.setTileValue(x, y, newTiles[i]) }\n    }\n  }\n}\n\nconst verticalDeltaX = [0, 1, 0, 0, 0, 0, 1]\nconst verticalDeltaY = [-2, -2, -1, 0, 1, 2, 2]\nconst openVertical = [\n  TileValues.VBRDG0 | BULLBIT,\n  TileValues.VBRDG1 | BULLBIT,\n  TileValues.RIVER,\n  TileValues.BRWV | BULLBIT,\n  TileValues.RIVER,\n  TileValues.VBRDG2 | BULLBIT,\n  TileValues.VBRDG3 | BULLBIT,\n]\nconst closeVertical = [\n  TileValues.VBRIDGE | BULLBIT,\n  TileValues.RIVER,\n  TileValues.VBRIDGE | BULLBIT,\n  TileValues.VBRIDGE | BULLBIT,\n  TileValues.VBRIDGE | BULLBIT,\n  TileValues.VBRIDGE | BULLBIT,\n  TileValues.RIVER,\n]\nconst horizontalDeltaX = [-2, 2, -2, -1, 0, 1, 2]\nconst horizontalDeltaY = [-1, -1, 0, 0, 0, 0, 0]\nconst openHorizontal = [\n  TileValues.HBRDG1 | BULLBIT,\n  TileValues.HBRDG3 | BULLBIT,\n  TileValues.HBRDG0 | BULLBIT,\n  TileValues.RIVER,\n  TileValues.BRWH | BULLBIT,\n  TileValues.RIVER,\n  TileValues.HBRDG2 | BULLBIT,\n]\nconst closeHorizontal = [\n  TileValues.RIVER,\n  TileValues.RIVER,\n  TileValues.HBRIDGE | BULLBIT,\n  TileValues.HBRIDGE | BULLBIT,\n  TileValues.HBRIDGE | BULLBIT,\n  TileValues.HBRIDGE | BULLBIT,\n  TileValues.HBRIDGE | BULLBIT,\n]\n\nconst doBridge = function (map, x, y, currentTile, simData) {\n  if (currentTile === TileValues.BRWV) {\n    // We have an open vertical bridge. Possibly close it.\n    if (\n      Random.getChance(3)\n      && simData.spriteManager.getBoatDistance(x, y) > 340\n    ) {\n      closeBridge(\n        map,\n        x,\n        y,\n        verticalDeltaX,\n        verticalDeltaY,\n        openVertical,\n        closeVertical\n      )\n    }\n\n    return true\n  }\n\n  if (currentTile == TileValues.BRWH) {\n    // We have an open horizontal bridge. Possibly close it.\n    if (\n      Random.getChance(3)\n      && simData.spriteManager.getBoatDistance(x, y) > 340\n    ) {\n      closeBridge(\n        map,\n        x,\n        y,\n        horizontalDeltaX,\n        horizontalDeltaY,\n        openHorizontal,\n        closeHorizontal\n      )\n    }\n\n    return true\n  }\n\n  if (\n    simData.spriteManager.getBoatDistance(x, y) < 300\n    || Random.getChance(7)\n  ) {\n    if (currentTile & 1) {\n      if (x < map.width - 1) {\n        if (map.getTileValue(x + 1, y) === TileValues.CHANNEL) {\n          // We have a closed vertical bridge. Open it.\n          openBridge(\n            map,\n            x,\n            y,\n            verticalDeltaX,\n            verticalDeltaY,\n            closeVertical,\n            openVertical\n          )\n          return true\n        }\n      }\n      return false\n    } else {\n      if (y > 0) {\n        if (map.getTileValue(x, y - 1) === TileValues.CHANNEL) {\n          // We have a closed horizontal bridge. Open it.\n          openBridge(\n            map,\n            x,\n            y,\n            horizontalDeltaX,\n            horizontalDeltaY,\n            closeHorizontal,\n            openHorizontal\n          )\n          return true\n        }\n      }\n    }\n  }\n\n  return false\n}\n\nconst densityTable = [\n  TileValues.ROADBASE,\n  TileValues.LTRFBASE,\n  TileValues.HTRFBASE,\n]\n\nconst roadFound = function (map, x, y, simData) {\n\n  simData.census.roadTotal += 1\n\n  let currentTile = map.getTile(x, y)\n  const tileValue = currentTile.getValue()\n\n  if (simData.budget.shouldDegradeRoad()) {\n    if (Random.getChance(511)) {\n      currentTile = map.getTile(x, y)\n\n      // Don't degrade tiles with power lines\n      if (!currentTile.isConductive()) {\n        if (simData.budget.roadEffect < (Random.getRandom16() & 31)) {\n          const mapValue = currentTile.getValue()\n\n          // Replace bridge tiles with water, otherwise rubble\n          if ((tileValue & 15) < 2 || (tileValue & 15) === 15) { map.setTile(x, y, TileValues.RIVER, 0) } else map.setTo(x, y, TileUtils.randomRubble())\n\n          return\n        }\n      }\n    }\n  }\n\n  // Bridges are not combustible\n  if (!currentTile.isCombustible()) {\n    // The comment in the original Micropolis code states bridges count for 4\n    // However, with the increment above, it's actually 5. Bug?\n    simData.census.roadTotal += 4\n    if (doBridge(map, x, y, tileValue, simData)) return\n  }\n\n  // Examine traffic density, and modify tile to represent last scanned traffic\n  // density\n  let density = 0\n  if (tileValue < TileValues.LTRFBASE) {\n    density = 0\n  } else if (tileValue < TileValues.HTRFBASE) {\n    density = 1\n  } else {\n    // Heavy traffic counts as two tiles with regards to upkeep cost\n    // Note, if this is heavy traffic on a bridge, and it wasn't handled above,\n    // it actually counts for 7 road tiles\n    simData.census.roadTotal += 1\n    density = 2\n  }\n\n  // Force currentDensity in range 0-3 (trafficDensityMap values are capped at 240)\n  let currentDensity = simData.blockMaps.trafficDensityMap.worldGet(x, y) >> 6\n  if (currentDensity > 1) currentDensity -= 1\n\n// console.log('Road', [x,y], currentDensity)\n\n  if (currentDensity === density) return\n\n  const newValue =\n    ((tileValue - TileValues.ROADBASE) & 15) + densityTable[currentDensity]\n\n  // Preserve all bits except animation\n  let newFlags = currentTile.getFlags() & ~ANIMBIT\n  if (currentDensity > 0) newFlags |= ANIMBIT\n\n  map.setTo(x, y, new Tile(newValue, newFlags))\n}\n\nconst Road = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(TileUtils.isRoad, roadFound)\n  },\n}\n\nexport { Road }\n","import { EventEmitter } from '../eventEmitter'\nimport { SpriteUtils } from './spriteUtils'\n\nconst init = function (type, map, spriteManager, x, y) {\n  this.type = type\n  this.map = map\n  this.spriteManager = spriteManager\n\n  let pixX = x\n  let pixY = y\n  let worldX = x >> 4\n  let worldY = y >> 4\n\n  Object.defineProperty(this, 'x', {\n    configurable: false,\n    enumerable: true,\n    set: function (val) {\n      // XXX These getters have implicit knowledge of tileWidth: need to decide whether to disallow non 16px tiles\n      pixX = val\n      worldX = val >> 4\n    },\n    get: function () {\n      return pixX\n    },\n  })\n\n  Object.defineProperty(this, 'y', {\n    configurable: false,\n    enumerable: true,\n    set: function (val) {\n      pixY = val\n      worldY = val >> 4\n    },\n    get: function () {\n      return pixY\n    },\n  })\n\n  Object.defineProperty(this, 'worldX', {\n    configurable: false,\n    enumerable: true,\n    set: function (val) {\n      worldX = val\n      pixX = val << 4\n    },\n    get: function () {\n      return worldX\n    },\n  })\n\n  Object.defineProperty(this, 'worldY', {\n    configurable: false,\n    enumerable: true,\n    set: function (val) {\n      worldY = val\n      pixY = val << 4\n    },\n    get: function () {\n      return worldY\n    },\n  })\n\n  this.origX = 0\n  this.origY = 0\n  this.destX = 0\n  this.destY = 0\n  this.count = 0\n  this.soundCount = 0\n  this.dir = 0\n  this.newDir = 0\n  this.step = 0\n  this.flag = 0\n  this.turn = 0\n  this.accel = 0\n  this.speed = 100\n}\n\nconst getFileName = function () {\n  return ['obj', this.type, '-', this.frame - 1].join('')\n}\n\nconst spriteNotInBounds = function () {\n  const x = this.worldX\n  const y = this.worldY\n\n  return x < 0 || y < 0 || x >= this.map.width || y >= this.map.height\n}\n\nconst base = {\n  init,\n  getFileName,\n  spriteNotInBounds,\n}\n\nconst BaseSprite = function (spriteConstructor) {\n  spriteConstructor.prototype = Object.create(base)\n  EventEmitter(spriteConstructor)\n}\n\nexport { BaseSprite }\n","import { BaseSprite } from './baseSprite'\nimport { PLANE_CRASHED } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { SPRITE_AIRPLANE, SPRITE_HELICOPTER } from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\n\nfunction AirplaneSprite(map, spriteManager, x, y) {\n  this.init(SPRITE_AIRPLANE, map, spriteManager, x, y)\n  this.width = 48\n  this.height = 48\n  this.xOffset = -24\n  this.yOffset = -24\n  if (x > SpriteUtils.worldToPix(map.width - 20)) {\n    this.destX = this.x - 200\n    this.frame = 7\n  } else {\n    this.destX = this.x + 200\n    this.frame = 11\n  }\n  this.destY = this.y\n}\n\nBaseSprite(AirplaneSprite)\n\nconst xDelta = [0, 0, 6, 8, 6, 0, -6, -8, -6, 8, 8, 8]\nconst yDelta = [0, -8, -6, 0, 6, 8, 6, 0, -6, 0, 0, 0]\n\nAirplaneSprite.prototype.move = function (\n  spriteCycle,\n  disasterManager,\n  blockMaps\n) {\n  let frame = this.frame\n\n  if (spriteCycle % 5 === 0) {\n    // Frames > 8 mean the plane is taking off\n    if (frame > 8) {\n      frame--\n      if (frame < 9) {\n        // Planes always take off to the east\n        frame = 3\n      }\n      this.frame = frame\n    } else {\n      const d = SpriteUtils.getDir(this.x, this.y, this.destX, this.destY)\n      frame = SpriteUtils.turnTo(frame, d)\n      this.frame = frame\n    }\n  }\n\n  const absDist = SpriteUtils.absoluteDistance(\n    this.x,\n    this.y,\n    this.destX,\n    this.destY\n  )\n  if (absDist < 50) {\n    // We're pretty close to the destination\n    this.destX = Random.getRandom(SpriteUtils.worldToPix(this.map.width)) + 8\n    this.destY = Random.getRandom(SpriteUtils.worldToPix(this.map.height)) + 8\n  }\n\n  if (disasterManager.enableDisasters) {\n    let explode = false\n\n    const spriteList = this.spriteManager.getSpriteList()\n    for (let i = 0; i < spriteList.length; i++) {\n      const s = spriteList[i]\n\n      if (s.frame === 0 || s === this) continue\n\n      if (\n        (s.type === SPRITE_HELICOPTER || s.type === SPRITE_AIRPLANE)\n        && SpriteUtils.checkSpriteCollision(this, s)\n      ) {\n        s.explodeSprite()\n        explode = true\n      }\n    }\n\n    if (explode) this.explodeSprite()\n  }\n\n  this.x += xDelta[frame]\n  this.y += yDelta[frame]\n\n  if (this.spriteNotInBounds()) this.frame = 0\n}\n\nAirplaneSprite.prototype.explodeSprite = function () {\n  this.frame = 0\n  this.spriteManager.makeExplosionAt(this.x, this.y)\n  this._emitEvent(PLANE_CRASHED, {\n    showable: true,\n    x: this.worldX,\n    y: this.worldY,\n  })\n}\n\n// Metadata for image loading\nObject.defineProperties(AirplaneSprite, {\n  ID: MiscUtils.makeConstantDescriptor(3),\n  width: MiscUtils.makeConstantDescriptor(48),\n  frames: MiscUtils.makeConstantDescriptor(11),\n})\n\nexport { AirplaneSprite }\n","import { BaseSprite } from './baseSprite'\nimport { SHIP_CRASHED, SOUND_HONKHONK } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { SPRITE_SHIP, SpriteConstants } from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nfunction BoatSprite(map, spriteManager, x, y) {\n  this.init(SPRITE_SHIP, map, spriteManager, x, y)\n  this.width = 48\n  this.height = 48\n  this.xOffset = -24\n  this.yOffset = -24\n\n  if (x < SpriteUtils.worldToPix(4)) this.frame = 3\n  else if (x >= SpriteUtils.worldToPix(map.width - 4)) this.frame = 7\n  else if (y < SpriteUtils.worldToPix(4)) this.frame = 5\n  else if (y >= SpriteUtils.worldToPix(map.height - 4)) this.frame = 1\n  else this.frame = 3\n\n  this.newDir = this.frame\n  this.dir = 10\n  this.count = 1\n}\n\nBaseSprite(BoatSprite)\n\n// This is an odd little function. It returns true if\n// oldDir is 180° from newDir and tileValue is underwater\n// rail or wire, and returns false otherwise\nconst oppositeAndUnderwater = function (tileValue, oldDir, newDir) {\n  let opposite = oldDir + 4\n\n  if (opposite > 8) opposite -= 8\n\n  if (newDir !== opposite) return false\n\n  if (\n    tileValue === TileValues.POWERBASE\n    || tileValue === TileValues.POWERBASE + 1\n    || tileValue === TileValues.RAILBASE\n    || tileValue === TileValues.RAILBASE + 1\n  ) { return true }\n\n  return false\n}\n\nconst tileDeltaX = [0, 0, 1, 1, 1, 0, -1, -1, -1]\nconst tileDeltaY = [0, -1, -1, 0, 1, 1, 1, 0, -1]\nconst xDelta = [0, 0, 2, 2, 2, 0, -2, -2, -2]\nconst yDelta = [0, -2, -2, 0, 2, 2, 2, 0, -2]\nconst tileWhiteList = [\n  TileValues.RIVER,\n  TileValues.CHANNEL,\n  TileValues.POWERBASE,\n  TileValues.POWERBASE + 1,\n  TileValues.RAILBASE,\n  TileValues.RAILBASE + 1,\n  TileValues.BRWH,\n  TileValues.BRWV,\n]\n\nconst CANTMOVE = 10\n\nBoatSprite.prototype.move = function (spriteCycle, disasterManager, blockMaps) {\n  let tile = TileValues.RIVER\n  let frame, x, y\n\n  if (this.soundCount > 0) this.soundCount--\n\n  if (this.soundCount === 0) {\n    if ((Random.getRandom16() & 3) === 1) {\n      // TODO Scenarios\n      // TODO Sound\n      this._emitEvent(SOUND_HONKHONK)\n    }\n\n    this.soundCount = 200\n  }\n\n  if (this.count > 0) this.count--\n\n  if (this.count === 0) {\n    // Ships turn slowly: only 45° every 9 cycles\n    this.count = 9\n\n    // If already executing a turn, continue to do so\n    if (this.frame !== this.newDir) {\n      this.frame = SpriteUtils.turnTo(this.frame, this.newDir)\n      return\n    }\n\n    // Otherwise pick a new direction\n    // Choose a random starting direction to search from\n    // 0 = N, 1 = NE, ... 7 = NW\n    const startDir = Random.getRandom16() & 7\n    let dir = startDir\n    for (; dir < startDir + 8; dir++) {\n      frame = (dir & 7) + 1\n\n      if (frame === this.dir) continue\n\n      x = this.worldX + tileDeltaX[frame]\n      y = this.worldY + tileDeltaY[frame]\n\n      if (this.map.testBounds(x, y)) {\n        tile = this.map.getTileValue(x, y)\n\n        // Test for a suitable water tile\n        if (\n          tile === TileValues.CHANNEL\n          || tile === TileValues.BRWH\n          || tile === TileValues.BRWV\n          || oppositeAndUnderwater(tile, this.dir, frame)\n        ) {\n          this.newDir = frame\n          this.frame = SpriteUtils.turnTo(this.frame, this.newDir)\n          this.dir = frame + 4\n\n          if (this.dir > 8) this.dir -= 8\n          break\n        }\n      }\n    }\n\n    if (dir === startDir + 8) {\n      this.dir = CANTMOVE\n      this.newDir = (Random.getRandom16() & 7) + 1\n    }\n  } else {\n    frame = this.frame\n\n    if (frame === this.newDir) {\n      this.x += xDelta[frame]\n      this.y += yDelta[frame]\n    }\n  }\n\n  if (this.spriteNotInBounds()) {\n    this.frame = 0\n    return\n  }\n\n  // If we didn't find a new direction, we might explode\n  // depending on the last tile we looked at.\n  for (let i = 0; i < 8; i++) {\n    if (tile === tileWhiteList[i]) {\n      break\n    }\n\n    if (i === 7) {\n      this.explodeSprite()\n      SpriteUtils.destroyMapTile(\n        this.spriteManager,\n        this.map,\n        blockMaps,\n        this.x,\n        this.y\n      )\n    }\n  }\n}\n\nBoatSprite.prototype.explodeSprite = function () {\n  this.frame = 0\n  this.spriteManager.makeExplosionAt(this.x, this.y)\n  this._emitEvent(SHIP_CRASHED, {\n    showable: true,\n    x: this.worldX,\n    y: this.worldY,\n  })\n}\n\n// Metadata for image loading\nObject.defineProperties(BoatSprite, {\n  ID: MiscUtils.makeConstantDescriptor(4),\n  width: MiscUtils.makeConstantDescriptor(48),\n  frames: MiscUtils.makeConstantDescriptor(8),\n})\n\nexport { BoatSprite }\n","import { BaseSprite } from './baseSprite'\nimport {\n  HEAVY_TRAFFIC,\n  HELICOPTER_CRASHED,\n  SOUND_HEAVY_TRAFFIC,\n} from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport {\n  SPRITE_HELICOPTER,\n  SPRITE_MONSTER,\n  SPRITE_TORNADO,\n} from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\n\nfunction CopterSprite(map, spriteManager, x, y) {\n  this.init(SPRITE_HELICOPTER, map, spriteManager, x, y)\n  this.width = 32\n  this.height = 32\n  this.xOffset = -16\n  this.yOffset = -16\n  this.frame = 5\n  this.count = 1500\n  this.destX = Random.getRandom(SpriteUtils.worldToPix(map.width)) + 8\n  this.destY = Random.getRandom(SpriteUtils.worldToPix(map.height)) + 8\n  this.origX = x\n  this.origY = y\n}\n\nBaseSprite(CopterSprite)\n\nconst xDelta = [0, 0, 3, 5, 3, 0, -3, -5, -3]\nconst yDelta = [0, -5, -3, 0, 3, 5, 3, 0, -3]\n\nCopterSprite.prototype.move = function (\n  spriteCycle,\n  disasterManager,\n  blockMaps\n) {\n  if (this.soundCount > 0) this.soundCount--\n\n  if (this.count > 0) this.count--\n\n  if (this.count === 0) {\n    // Head towards a monster, and certain doom\n    let s = this.spriteManager.getSprite(SPRITE_MONSTER)\n\n    if (s !== null) {\n      this.destX = s.x\n      this.destY = s.y\n    } else {\n      // No monsters. Hm. I bet flying near that tornado is sensible\n      s = this.spriteManager.getSprite(SPRITE_TORNADO)\n\n      if (s !== null) {\n        this.destX = s.x\n        this.destY = s.y\n      } else {\n        this.destX = this.origX\n        this.destY = this.origY\n      }\n    }\n\n    // If near destination, let's get her on the ground\n    const absDist = SpriteUtils.absoluteDistance(\n      this.x,\n      this.y,\n      this.origX,\n      this.origY\n    )\n    if (absDist < 30) {\n      this.frame = 0\n      return\n    }\n  }\n\n  if (this.soundCount === 0) {\n    const x = this.worldX\n    const y = this.worldY\n\n    if (x >= 0 && x < this.map.width && y >= 0 && y < this.map.height) {\n      if (\n        blockMaps.trafficDensityMap.worldGet(x, y) > 170\n        && (Random.getRandom16() & 7) === 0\n      ) {\n        this._emitEvent(HEAVY_TRAFFIC, { x, y })\n        this._emitEvent(SOUND_HEAVY_TRAFFIC)\n        this.soundCount = 200\n      }\n    }\n  }\n\n  let frame = this.frame\n\n  if ((spriteCycle & 3) === 0) {\n    const dir = SpriteUtils.getDir(this.x, this.y, this.destX, this.destY)\n    frame = SpriteUtils.turnTo(frame, dir)\n    this.frame = frame\n  }\n\n  this.x += xDelta[frame]\n  this.y += yDelta[frame]\n}\n\nCopterSprite.prototype.explodeSprite = function () {\n  this.frame = 0\n  this.spriteManager.makeExplosionAt(this.x, this.y)\n  this._emitEvent(HELICOPTER_CRASHED, { x: this.worldX, y: this.worldY })\n}\n\n// Metadata for image loading\nObject.defineProperties(CopterSprite, {\n  ID: MiscUtils.makeConstantDescriptor(2),\n  width: MiscUtils.makeConstantDescriptor(32),\n  frames: MiscUtils.makeConstantDescriptor(8),\n})\n\nexport { CopterSprite }\n","import { BaseSprite } from './baseSprite'\nimport { EXPLOSION_REPORTED, SOUND_EXPLOSIONHIGH } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { SPRITE_EXPLOSION } from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { DIRT } from '../tiles/tileValues'\n\nfunction ExplosionSprite(map, spriteManager, x, y) {\n  this.init(SPRITE_EXPLOSION, map, spriteManager, x, y)\n  this.width = 48\n  this.height = 48\n  this.xOffset = -24\n  this.yOffset = -24\n  this.frame = 1\n}\n\nBaseSprite(ExplosionSprite)\n\nExplosionSprite.prototype.startFire = function (x, y) {\n  x = this.worldX\n  y = this.worldY\n\n  if (!this.map.testBounds(x, y)) return\n\n  var tile = this.map.getTile(x, y)\n  var tileValue = tile.getValue()\n\n  if (!tile.isCombustible() && tileValue !== DIRT) return\n\n  if (tile.isZone()) return\n\n  this.map.setTo(x, y, TileUtils.randomFire())\n}\n\nExplosionSprite.prototype.move = function (\n  spriteCycle,\n  disasterManager,\n  blockMaps\n) {\n  if ((spriteCycle & 1) === 0) {\n    if (this.frame === 1) {\n      // Convert sprite coordinates to tile coordinates.\n      var explosionX = this.worldX\n      var explosionY = this.worldY\n      this._emitEvent(SOUND_EXPLOSIONHIGH)\n      this._emitEvent(EXPLOSION_REPORTED, { x: explosionX, y: explosionY })\n    }\n\n    this.frame++\n  }\n\n  if (this.frame > 6) {\n    this.frame = 0\n\n    this.startFire(this.x, this.y)\n    this.startFire(this.x - 16, this.y - 16)\n    this.startFire(this.x + 16, this.y + 16)\n    this.startFire(this.x - 16, this.y + 16)\n    this.startFire(this.x + 16, this.y + 16)\n  }\n}\n\n// Metadata for image loading\nObject.defineProperties(ExplosionSprite, {\n  ID: MiscUtils.makeConstantDescriptor(7),\n  width: MiscUtils.makeConstantDescriptor(48),\n  frames: MiscUtils.makeConstantDescriptor(6),\n})\n\nexport { ExplosionSprite }\n","import { BaseSprite } from './baseSprite'\nimport { SPRITE_DYING, SPRITE_MOVED, SOUND_MONSTER } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport * as SpriteConstants from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { DIRT, RIVER, WATER_HIGH } from '../tiles/tileValues'\n\nfunction MonsterSprite(map, spriteManager, x, y) {\n  this.init(SpriteConstants.SPRITE_MONSTER, map, spriteManager, x, y)\n  this.width = 48\n  this.height = 48\n  this.xOffset = -24\n  this.yOffset = -24\n\n  if (x > SpriteUtils.worldToPix(map.width) / 2) {\n    if (y > SpriteUtils.worldToPix(map.height) / 2) this.frame = 10\n    else this.frame = 7\n  } else if (y > SpriteUtils.worldToPix(map.height) / 2) {\n    this.frame = 1\n  } else {\n    this.frame = 4\n  }\n\n  this.flag = 0\n  this.count = 1000\n  this.destX = SpriteUtils.worldToPix(map.pollutionMaxX)\n  this.destY = SpriteUtils.worldToPix(map.pollutionMaxY)\n  this.origX = this.x\n  this.origY = this.y\n  this._seenLand = false\n}\n\nBaseSprite(MonsterSprite)\n\nconst xDelta = [2, 2, -2, -2, 0]\nconst yDelta = [-2, 2, 2, -2, 0]\nconst cardinals1 = [0, 1, 2, 3]\nconst cardinals2 = [1, 2, 3, 0]\nconst diagonals1 = [2, 5, 8, 11]\nconst diagonals2 = [11, 2, 5, 8]\n\nMonsterSprite.prototype.move = function (\n  spriteCycle,\n  disasterManager,\n  blockMaps\n) {\n  if (this.soundCount > 0) this.soundCount--\n\n  // Frames 1 - 12 are diagonal sprites, 3 for each direction.\n  // 1-3 NE, 2-6 SE, etc. 13-16 represent the cardinal directions.\n  let currentDir = Math.floor((this.frame - 1) / 3)\n  let frame, dir\n\n  if (currentDir < 4) {\n    /* turn n s e w */\n    // Calculate how far in the 3 step animation we were,\n    // move on to the next one\n    frame = (this.frame - 1) % 3\n\n    if (frame === 2) this.step = 0\n\n    if (frame === 0) this.step = 1\n\n    if (this.step) frame++\n    else frame--\n\n    const absDist = SpriteUtils.absoluteDistance(\n      this.x,\n      this.y,\n      this.destX,\n      this.destY\n    )\n\n    if (absDist < 60) {\n      if (this.flag === 0) {\n        this.flag = 1\n        this.destX = this.origX\n        this.destY = this.origY\n      } else {\n        this.frame = 0\n        this._emitEvent(SPRITE_DYING)\n        return\n      }\n    }\n\n    // Perhaps switch to a cardinal direction\n    dir = SpriteUtils.getDir(this.x, this.y, this.destX, this.destY)\n    dir = Math.floor((dir - 1) / 2)\n\n    if (dir !== currentDir && Random.getChance(10)) {\n      if (Random.getRandom16() & 1) frame = cardinals1[currentDir]\n      else frame = cardinals2[currentDir]\n\n      currentDir = 4\n\n      if (!this.soundCount) {\n        this._emitEvent(SOUND_MONSTER)\n        this.soundCount = 50 + Random.getRandom(100)\n      }\n    }\n  } else {\n    // Travelling in a cardinal direction. Switch to a diagonal\n    currentDir = 4\n    dir = this.frame\n    frame = (dir - 13) & 3\n\n    if (!(Random.getRandom16() & 3)) {\n      if (Random.getRandom16() & 1) frame = diagonals1[frame]\n      else frame = diagonals2[frame]\n\n      // We mung currentDir and frame here to\n      // make the assignment below work\n      currentDir = Math.floor((frame - 1) / 3)\n      frame = (frame - 1) % 3\n    }\n  }\n\n  frame = currentDir * 3 + frame + 1\n  if (frame > 16) frame = 16\n\n  this.frame = frame\n\n  this.x += xDelta[currentDir]\n  this.y += yDelta[currentDir]\n\n  if (this.count > 0) this.count--\n\n  const tileValue = SpriteUtils.getTileValue(this.map, this.x, this.y)\n\n  if (tileValue === -1 || (tileValue === RIVER && this.count < 500)) { this.frame = 0 }\n\n  if (tileValue === DIRT || tileValue > WATER_HIGH) this._seenLand = true\n\n  const spriteList = this.spriteManager.getSpriteList()\n  for (let i = 0; i < spriteList.length; i++) {\n    const s = spriteList[i]\n\n    if (\n      s.frame !== 0\n      && (s.type === SpriteConstants.SPRITE_AIRPLANE\n        || s.type === SpriteConstants.SPRITE_HELICOPTER\n        || s.type === SpriteConstants.SPRITE_SHIP\n        || s.type === SpriteConstants.SPRITE_TRAIN)\n      && SpriteUtils.checkSpriteCollision(this, s)\n    ) { s.explodeSprite() }\n  }\n\n  if (this.frame === 0) this._emitEvent(SPRITE_DYING)\n\n  SpriteUtils.destroyMapTile(\n    this.spriteManager,\n    this.map,\n    blockMaps,\n    this.x,\n    this.y\n  )\n  this._emitEvent(SPRITE_MOVED, { x: this.worldX, y: this.worldY })\n}\n\n// Metadata for image loading\nObject.defineProperties(MonsterSprite, {\n  ID: MiscUtils.makeConstantDescriptor(5),\n  width: MiscUtils.makeConstantDescriptor(48),\n  frames: MiscUtils.makeConstantDescriptor(16),\n})\n\nexport { MonsterSprite }\n","import { BaseSprite } from './baseSprite'\nimport { SPRITE_DYING, SPRITE_MOVED } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { SpriteConstants } from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\n\nfunction TornadoSprite(map, spriteManager, x, y) {\n  this.init(SpriteConstants.SPRITE_TORNADO, map, spriteManager, x, y)\n  this.width = 48\n  this.height = 48\n  this.xOffset = -24\n  this.yOffset = -40\n  this.frame = 1\n  this.count = 200\n}\n\nBaseSprite(TornadoSprite)\n\nconst xDelta = [2, 3, 2, 0, -2, -3]\nconst yDelta = [-2, 0, 2, 3, 2, 0]\n\nTornadoSprite.prototype.move = function (\n  spriteCycle,\n  disasterManager,\n  blockMaps\n) {\n  let frame = this.frame\n\n  // If middle frame, move right or left\n  // depending on the flag value\n  // If frame = 1, perhaps die based on flag\n  // value\n  if (frame === 2) {\n    if (this.flag) frame = 3\n    else frame = 1\n  } else {\n    if (frame === 1) this.flag = 1\n    else this.flag = 0\n\n    frame = 2\n  }\n\n  if (this.count > 0) this.count--\n\n  this.frame = frame\n\n  const spriteList = this.spriteManager.getSpriteList()\n  for (let i = 0; i < spriteList.length; i++) {\n    const s = spriteList[i]\n\n    // Explode vulnerable sprites\n    if (\n      s.frame !== 0\n      && (s.type === SpriteConstants.SPRITE_AIRPLANE\n        || s.type === SpriteConstants.SPRITE_HELICOPTER\n        || s.type === SpriteConstants.SPRITE_SHIP\n        || s.type === SpriteConstants.SPRITE_TRAIN)\n      && SpriteUtils.checkSpriteCollision(this, s)\n    ) {\n      s.explodeSprite()\n    }\n  }\n\n  frame = Random.getRandom(5)\n  this.x += xDelta[frame]\n  this.y += yDelta[frame]\n\n  if (this.spriteNotInBounds()) this.frame = 0\n\n  if (this.count !== 0 && Random.getRandom(500) === 0) this.frame = 0\n\n  if (this.frame === 0) this._emitEvent(SPRITE_DYING)\n\n  SpriteUtils.destroyMapTile(\n    this.spriteManager,\n    this.map,\n    blockMaps,\n    this.x,\n    this.y\n  )\n  this._emitEvent(SPRITE_MOVED, { x: this.worldX, y: this.worldY })\n}\n\n// Metadata for image loading\nObject.defineProperties(TornadoSprite, {\n  ID: MiscUtils.makeConstantDescriptor(6),\n  width: MiscUtils.makeConstantDescriptor(48),\n  frames: MiscUtils.makeConstantDescriptor(3),\n})\n\nexport { TornadoSprite }\n","import { BaseSprite } from './baseSprite'\nimport { TRAIN_CRASHED } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Random } from '../random'\nimport { SPRITE_TRAIN } from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nfunction TrainSprite(map, spriteManager, x, y) {\n  this.init(SPRITE_TRAIN, map, spriteManager, x, y)\n  this.width = 32\n  this.height = 32\n  this.xOffset = -16\n  this.yOffset = -16\n  this.frame = 1\n  this.dir = 4\n}\n\nBaseSprite(TrainSprite)\n\nconst tileDeltaX = [0, 16, 0, -16]\nconst tileDeltaY = [-16, 0, 16, 0]\nconst xDelta = [0, 4, 0, -4, 0]\nconst yDelta = [-4, 0, 4, 0, 0]\n\nconst TrainPic2 = [1, 2, 1, 2, 5]\n\n// Frame values\nconst NORTHSOUTH = 1\nconst EASTWEST = 2\nconst NWSE = 3\nconst NESW = 4\nconst UNDERWATER = 5\n\n// Direction values\nconst NORTH = 0\nconst EAST = 1\nconst SOUTH = 2\nconst WEST = 3\nconst CANTMOVE = 4\n\nTrainSprite.prototype.move = function (\n  spriteCycle,\n  disasterManager,\n  blockMaps\n) {\n  // Trains can only move in the 4 cardinal directions\n  // Over the course of 4 frames, we move through a tile, so\n  // ever fourth frame, we try to find a direction to move in\n  // (excluding the opposite direction from the current direction\n  // of travel). If there is no possible direction found, our direction\n  // is set to CANTMOVE. (Thus, if we're in a dead end, we can start heading\n  // backwards next time round). If we fail to find a destination after 2 attempts,\n  // we die.\n\n  if (this.frame === NWSE || this.frame === NESW) { this.frame = TrainPic2[this.dir] }\n\n  this.x += xDelta[this.dir]\n  this.y += yDelta[this.dir]\n\n  // Find a new direction.\n  if ((spriteCycle & 3) === 0) {\n    // Choose a random starting point for our search\n    const dir = Random.getRandom16() & 3\n\n    for (let i = dir; i < dir + 4; i++) {\n      const dir2 = i & 3\n\n      if (this.dir !== CANTMOVE) {\n        // Avoid the opposite direction\n        if (dir2 === ((this.dir + 2) & 3)) continue\n      }\n\n      const tileValue = SpriteUtils.getTileValue(\n        this.map,\n        this.x + tileDeltaX[dir2],\n        this.y + tileDeltaY[dir2]\n      )\n\n      if (\n        (tileValue >= TileValues.RAILBASE\n          && tileValue <= TileValues.LASTRAIL)\n        || tileValue === TileValues.RAILVPOWERH\n        || tileValue === TileValues.RAILHPOWERV\n      ) {\n        if (this.dir !== dir2 && this.dir !== CANTMOVE) {\n          if (this.dir + dir2 === WEST) this.frame = NWSE\n          else this.frame = NESW\n        } else {\n          this.frame = TrainPic2[dir2]\n        }\n\n        if (tileValue === TileValues.HRAIL || tileValue === TileValues.VRAIL) { this.frame = UNDERWATER }\n\n        this.dir = dir2\n        return\n      }\n    }\n\n    // Nowhere to go. Die.\n    if (this.dir === CANTMOVE) {\n      this.frame = 0\n      return\n    }\n\n    // We didn't find a direction this time. We'll try the opposite\n    // next time around\n    this.dir = CANTMOVE\n  }\n}\n\nTrainSprite.prototype.explodeSprite = function () {\n  this.frame = 0\n  this.spriteManager.makeExplosionAt(this.x, this.y)\n  this._emitEvent(TRAIN_CRASHED, {\n    showable: true,\n    x: this.worldX,\n    y: this.worldY,\n  })\n}\n\n// Metadata for image loading\nObject.defineProperties(TrainSprite, {\n  ID: MiscUtils.makeConstantDescriptor(1),\n  width: MiscUtils.makeConstantDescriptor(32),\n  frames: MiscUtils.makeConstantDescriptor(5),\n})\n\nexport { TrainSprite }\n","import { AirplaneSprite } from './airplaneSprite'\nimport { BoatSprite } from './boatSprite'\nimport { CopterSprite } from './copterSprite'\nimport { EventEmitter } from '../eventEmitter'\nimport { ExplosionSprite } from './explosionSprite'\nimport * as Messages from '../messages'\nimport { MiscUtils } from '../utils'\nimport { MonsterSprite } from './monsterSprite'\nimport { Random } from '../random'\nimport * as SpriteConstants from './spriteConstants'\nimport { SpriteUtils } from './spriteUtils'\nimport { CHANNEL, RIVER } from '../tiles/tileValues'\nimport { TornadoSprite } from './tornadoSprite'\nimport { TrainSprite } from './trainSprite'\n\nconst SpriteManager = EventEmitter(function (map) {\n  this.spriteList = []\n  this.map = map\n  this.spriteCycle = 0\n})\n\nSpriteManager.prototype.getSprite = function (type) {\n  const filteredList = this.spriteList.filter(function (s) {\n    return s.frame !== 0 && s.type === type\n  })\n\n  if (filteredList.length === 0) return null\n\n  return filteredList[0]\n}\n\nSpriteManager.prototype.getSpriteList = function () {\n  return this.spriteList.slice()\n}\n\nSpriteManager.prototype.getSpritesInView = function (\n  startX,\n  startY,\n  pixelWidth,\n  pixelHeight\n) {\n  const sprites = []\n  startX = SpriteUtils.worldToPix(startX)\n  startY = SpriteUtils.worldToPix(startY)\n  const lastX = startX + pixelWidth\n  const lastY = startY + pixelHeight\n\n  return this.spriteList.filter(function (s) {\n    const spriteLeft = s.x + s.xOffset\n    const spriteTop = s.y + s.yOffset\n    const spriteRight = s.x + s.xOffset + s.width\n    const spriteBottom = s.y + s.yOffset + s.width\n\n    const leftInBounds = spriteLeft >= startX && spriteLeft < lastX\n    const rightInBounds = spriteRight >= startX && spriteRight < lastX\n    const topInBounds = spriteTop >= startY && spriteTop < lastY\n    const bottomInBounds = spriteBottom >= startY && spriteBottom < lastY\n\n    return (leftInBounds || rightInBounds) && (topInBounds || bottomInBounds)\n  })\n}\n\nSpriteManager.prototype.moveObjects = function (simData) {\n  const disasterManager = simData.disasterManager\n  const blockMaps = simData.blockMaps\n\n  this.spriteCycle += 1\n\n  const list = this.spriteList.slice()\n\n  for (let i = 0, l = list.length; i < l; i++) {\n    const sprite = list[i]\n\n    if (sprite.frame === 0) continue\n\n    sprite.move(this.spriteCycle, disasterManager, blockMaps)\n  }\n\n  this.pruneDeadSprites()\n}\n\nSpriteManager.prototype.makeSprite = function (type, x, y) {\n  const newSprite = new constructors[type](this.map, this, x, y)\n\n  // Listen for crashes\n  for (let i = 0, l = Messages.CRASHES.length; i < l; i++) {\n    newSprite.addEventListener(\n      Messages.CRASHES[i],\n      MiscUtils.reflectEvent.bind(this, Messages.CRASHES[i])\n    )\n  }\n\n  if (type == SpriteConstants.SPRITE_HELICOPTER) {\n    newSprite.addEventListener(\n      Messages.HEAVY_TRAFFIC,\n      MiscUtils.reflectEvent.bind(this, Messages.HEAVY_TRAFFIC)\n    )\n  }\n\n  this.spriteList.push(newSprite)\n  return newSprite\n}\n\nSpriteManager.prototype.makeTornado = function () {\n  let sprite = this.getSprite(SpriteConstants.SPRITE_TORNADO)\n  if (sprite !== null) {\n    sprite.count = 200\n    this._emitEvent(Messages.TORNADO_SIGHTED, {\n      trackable: true,\n      x: sprite.worldX,\n      y: sprite.worldY,\n      sprite,\n    })\n    return\n  }\n\n  const x = Random.getRandom(SpriteUtils.worldToPix(this.map.width) - 800) + 400\n  const y = Random.getRandom(SpriteUtils.worldToPix(this.map.height) - 200) + 100\n\n  sprite = this.makeSprite(SpriteConstants.SPRITE_TORNADO, x, y)\n  this._emitEvent(Messages.TORNADO_SIGHTED, {\n    trackable: true,\n    x: sprite.worldX,\n    y: sprite.worldY,\n    sprite,\n  })\n}\n\nSpriteManager.prototype.makeExplosion = function (x, y) {\n  if (this.map.testBounds(x, y)) { this.makeExplosionAt(SpriteUtils.worldToPix(x), SpriteUtils.worldToPix(y)) }\n}\n\nSpriteManager.prototype.makeExplosionAt = function (x, y) {\n  this.makeSprite(SpriteConstants.SPRITE_EXPLOSION, x, y)\n}\n\nSpriteManager.prototype.generatePlane = function (x, y) {\n  if (this.getSprite(SpriteConstants.SPRITE_AIRPLANE) !== null) return\n\n  this.makeSprite(\n    SpriteConstants.SPRITE_AIRPLANE,\n    SpriteUtils.worldToPix(x),\n    SpriteUtils.worldToPix(y)\n  )\n}\n\nSpriteManager.prototype.generateTrain = function (census, x, y) {\n  if (\n    census.totalPop > 10\n    && this.getSprite(SpriteConstants.SPRITE_TRAIN) === null\n    && Random.getRandom(25) === 0\n  ) {\n    this.makeSprite(\n      SpriteConstants.SPRITE_TRAIN,\n      SpriteUtils.worldToPix(x) + 8,\n      SpriteUtils.worldToPix(y) + 8\n    )\n  }\n}\n\nSpriteManager.prototype.generateShip = function () {\n  // XXX This code is borked. The map generator will never\n  // place a channel tile on the edges of the map\n  let x, y\n\n  if (Random.getChance(3)) {\n    for (x = 4; x < this.map.width - 2; x++) {\n      if (this.map.getTileValue(x, 0) === CHANNEL) {\n        this.makeShipHere(x, 0)\n        return\n      }\n    }\n  }\n\n  if (Random.getChance(3)) {\n    for (y = 1; y < this.map.height - 2; y++) {\n      if (this.map.getTileValue(0, y) === CHANNEL) {\n        this.makeShipHere(0, y)\n        return\n      }\n    }\n  }\n\n  if (Random.getChance(3)) {\n    for (x = 4; x < this.map.width - 2; x++) {\n      if (this.map.getTileValue(x, this.map.height - 1) === CHANNEL) {\n        this.makeShipHere(x, this.map.height - 1)\n        return\n      }\n    }\n  }\n\n  if (Random.getChance(3)) {\n    for (y = 1; y < this.map.height - 2; y++) {\n      if (this.map.getTileValue(this.map.width - 1, y) === CHANNEL) {\n        this.makeShipHere(this.map.width - 1, y)\n        return\n      }\n    }\n  }\n}\n\nSpriteManager.prototype.getBoatDistance = function (x, y) {\n  let dist = 99999\n  const pixelX = SpriteUtils.worldToPix(x) + 8\n  const pixelY = SpriteUtils.worldToPix(y) + 8\n\n  for (let i = 0, l = this.spriteList.length; i < l; i++) {\n    const sprite = this.spriteList[i]\n    if (sprite.type === SpriteConstants.SPRITE_SHIP && sprite.frame !== 0) {\n      const sprDist = Math.abs(sprite.x - pixelX) + Math.abs(sprite.y - pixelY)\n\n      dist = Math.min(dist, sprDist)\n    }\n  }\n\n  return dist\n}\n\nSpriteManager.prototype.makeShipHere = function (x, y) {\n  this.makeSprite(\n    SpriteConstants.SPRITE_SHIP,\n    SpriteUtils.worldToPix(x),\n    SpriteUtils.worldToPix(y)\n  )\n}\n\nSpriteManager.prototype.generateCopter = function (x, y) {\n  if (this.getSprite(SpriteConstants.SPRITE_HELICOPTER) !== null) return\n\n  this.makeSprite(\n    SpriteConstants.SPRITE_HELICOPTER,\n    SpriteUtils.worldToPix(x),\n    SpriteUtils.worldToPix(y)\n  )\n}\n\nSpriteManager.prototype.makeMonsterAt = function (x, y) {\n  const sprite = this.makeSprite(\n    SpriteConstants.SPRITE_MONSTER,\n    SpriteUtils.worldToPix(x),\n    SpriteUtils.worldToPix(y)\n  )\n  this._emitEvent(Messages.MONSTER_SIGHTED, {\n    trackable: true,\n    x,\n    y,\n    sprite,\n  })\n}\n\nSpriteManager.prototype.makeMonster = function () {\n  const sprite = this.getSprite(SpriteConstants.SPRITE_MONSTER)\n  if (sprite !== null) {\n    sprite.soundCount = 1\n    sprite.count = 1000\n    sprite.destX = SpriteUtils.worldToPix(this.map.pollutionMaxX)\n    sprite.destY = SpriteUtils.worldToPix(this.map.pollutionMaxY)\n  }\n\n  let done = 0\n  for (let i = 0; i < 300; i++) {\n    const x = Random.getRandom(this.map.width - 20) + 10\n    const y = Random.getRandom(this.map.height - 10) + 5\n\n    const tile = this.map.getTile(x, y)\n    if (tile.getValue() === RIVER) {\n      this.makeMonsterAt(x, y)\n      done = 1\n      break\n    }\n  }\n\n  if (done === 0) this.makeMonsterAt(60, 50)\n}\n\nSpriteManager.prototype.pruneDeadSprites = function (type) {\n  this.spriteList = this.spriteList.filter(function (s) {\n    return s.frame !== 0\n  })\n}\n\nvar constructors = {}\nconstructors[SpriteConstants.SPRITE_TRAIN] = TrainSprite\nconstructors[SpriteConstants.SPRITE_SHIP] = BoatSprite\nconstructors[SpriteConstants.SPRITE_MONSTER] = MonsterSprite\nconstructors[SpriteConstants.SPRITE_HELICOPTER] = CopterSprite\nconstructors[SpriteConstants.SPRITE_AIRPLANE] = AirplaneSprite\nconstructors[SpriteConstants.SPRITE_TORNADO] = TornadoSprite\nconstructors[SpriteConstants.SPRITE_EXPLOSION] = ExplosionSprite\n\nexport { SpriteManager }\n","import { ANIMBIT, POWERBIT } from './tileFlags'\nimport {\n  FOOTBALLGAME1,\n  FOOTBALLGAME2,\n  FULLSTADIUM,\n  STADIUM,\n} from './tileValues'\n\nconst emptyStadiumFound = function (map, x, y, simData) {\n  simData.census.stadiumPop += 1\n\n  if (map.getTile(x, y).isPowered()) {\n    // Occasionally start the big game\n    if (((simData.cityTime + x + y) & 31) === 0) {\n      map.putZone(x, y, FULLSTADIUM, 4)\n      map.addTileFlags(x, y, POWERBIT)\n      map.setTile(x + 1, y, FOOTBALLGAME1, ANIMBIT)\n      map.setTile(x + 1, y + 1, FOOTBALLGAME2, ANIMBIT)\n    }\n  }\n}\n\nconst fullStadiumFound = function (map, x, y, simData) {\n  simData.census.stadiumPop += 1\n  const isPowered = map.getTile(x, y).isPowered()\n\n  if (((simData.cityTime + x + y) & 7) === 0) {\n    map.putZone(x, y, STADIUM, 4)\n    if (isPowered) map.addTileFlags(x, y, POWERBIT)\n  }\n}\n\nconst Stadium = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(STADIUM, emptyStadiumFound)\n    mapScanner.addAction(FULLSTADIUM, fullStadiumFound)\n    repairManager.addAction(STADIUM, 15, 4)\n  },\n}\n\nexport { Stadium }\n","import { Random } from '../random'\nimport { SPRITE_SHIP } from '../sprites/spriteConstants'\nimport { ANIMBIT, CONDBIT, BURNBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nconst railFound = function (map, x, y, simData) {\n  simData.census.railTotal += 1\n  simData.spriteManager.generateTrain(simData.census, x, y)\n\n  if (simData.budget.shouldDegradeRoad()) {\n    if (Random.getChance(511)) {\n      const currentTile = map.getTile(x, y)\n\n      // Don't degrade tiles with power lines\n      if (currentTile.isConductive()) return\n\n      if (simData.budget.roadEffect < (Random.getRandom16() & 31)) {\n        const mapValue = currentTile.getValue()\n\n        // Replace bridge tiles with water, otherwise rubble\n        if (mapValue < TileValues.RAILBASE + 2) { map.setTile(x, y, TileValues.RIVER, 0) } else map.setTo(x, y, TileUtils.randomRubble())\n      }\n    }\n  }\n}\n\nconst airportFound = function (map, x, y, simData) {\n  simData.census.airportPop += 1\n\n  const tile = map.getTile(x, y)\n  if (tile.isPowered()) {\n    if (map.getTileValue(x + 1, y - 1) === TileValues.RADAR) { map.setTile(x + 1, y - 1, TileValues.RADAR0, CONDBIT | ANIMBIT | BURNBIT) }\n\n    if (Random.getRandom(5) === 0) {\n      simData.spriteManager.generatePlane(x, y)\n      return\n    }\n\n    if (Random.getRandom(12) === 0) simData.spriteManager.generateCopter(x, y)\n  } else {\n    map.setTile(x + 1, y - 1, TileValues.RADAR, CONDBIT | BURNBIT)\n  }\n}\n\nconst portFound = function (map, x, y, simData) {\n  simData.census.seaportPop += 1\n\n  const tile = map.getTile(x, y)\n  if (tile.isPowered() && simData.spriteManager.getSprite(SPRITE_SHIP) === null) { simData.spriteManager.generateShip() }\n}\n\nconst Transport = {\n  registerHandlers: function (mapScanner, repairManager) {\n    mapScanner.addAction(TileUtils.isRail, railFound)\n    mapScanner.addAction(TileValues.PORT, portFound)\n    mapScanner.addAction(TileValues.AIRPORT, airportFound)\n\n    repairManager.addAction(TileValues.PORT, 15, 4)\n    repairManager.addAction(TileValues.AIRPORT, 7, 6)\n  },\n}\n\nexport { Transport }\n","import { EventEmitter } from '../eventEmitter'\nimport { VALVES_UPDATED } from '../messages'\nimport { MiscUtils } from '../utils'\n\nconst Valves = EventEmitter(function () {\n  this.resValve = 0\n  this.comValve = 0\n  this.indValve = 0\n  this.resCap = false\n  this.comCap = false\n  this.indCap = false\n})\n\nconst RES_VALVE_RANGE = 2000\nconst COM_VALVE_RANGE = 1500\nconst IND_VALVE_RANGE = 1500\n\nconst taxTable = [\n  200, 150, 120, 100, 80, 50, 30, 0, -10, -40, -100, -150, -200, -250, -300,\n  -350, -400, -450, -500, -550, -600,\n]\nconst extMarketParamTable = [1.2, 1.1, 0.98]\n\nValves.prototype.save = function (saveData) {\n  saveData.resValve = this.resValve\n  saveData.comValve = this.comValve\n  saveData.indValve = this.indValve\n}\n\nValves.prototype.load = function (saveData) {\n  this.resValve = saveData.resValve\n  this.comValve = saveData.comValve\n  this.indValve = saveData.indValve\n\n  this._emitEvent(VALVES_UPDATED)\n}\n\nValves.prototype.setValves = function (gameLevel, census, budget) {\n  const resPopDenom = 8\n  const birthRate = 0.02\n  const labourBaseMax = 1.3\n  const internalMarketDenom = 3.7\n  const projectedIndPopMin = 5.0\n  const resRatioDefault = 1.3\n  const resRatioMax = 2\n  const comRatioMax = 2\n  const indRatioMax = 2\n  const taxMax = 20\n  const taxTableScale = 600\n  let employment, labourBase\n\n  // Residential zones scale their population index when reporting it to the census\n  const normalizedResPop = census.resPop / resPopDenom\n  census.totalPop = Math.round(normalizedResPop + census.comPop + census.indPop)\n\n  // A lack of developed commercial and industrial zones means there are no employment opportunities, which constrain\n  // growth. (This might hurt initially if, for example, the player lays out an initial grid, as the residential zones\n  // will likely develop first, so the residential valve will immediately crater).\n  if (census.resPop > 0) { employment = (census.comHist10[1] + census.indHist10[1]) / normalizedResPop } else employment = 1\n\n  // Given the employment rate, calculate expected migration, add in births, and project the new population.\n  const migration = normalizedResPop * (employment - 1)\n  const births = normalizedResPop * birthRate\n  const projectedResPop = normalizedResPop + migration + births\n\n  // Examine how many zones require workers\n  labourBase = census.comHist10[1] + census.indHist10[1]\n  if (labourBase > 0.0) labourBase = census.resHist10[1] / labourBase\n  else labourBase = 1\n  labourBase = MiscUtils.clamp(labourBase, 0.0, labourBaseMax)\n\n  // Project future industry and commercial needs, taking into account available labour, and competition from\n  // other global cities\n  const internalMarket =\n    (normalizedResPop + census.comPop + census.indPop) / internalMarketDenom\n  const projectedComPop = internalMarket * labourBase\n  let projectedIndPop =\n    census.indPop * labourBase * extMarketParamTable[gameLevel]\n  projectedIndPop = Math.max(projectedIndPop, projectedIndPopMin)\n\n  // Calculate the expected percentage changes in each population type\n  let resRatio\n  if (normalizedResPop > 0) resRatio = projectedResPop / normalizedResPop\n  else resRatio = resRatioDefault\n\n  let comRatio\n  if (census.comPop > 0) comRatio = projectedComPop / census.comPop\n  else comRatio = projectedComPop\n\n  let indRatio\n  if (census.indPop > 0) indRatio = projectedIndPop / census.indPop\n  else indRatio = projectedIndPop\n\n  resRatio = Math.min(resRatio, resRatioMax)\n  comRatio = Math.min(comRatio, comRatioMax)\n  indRatio = Math.min(indRatio, indRatioMax)\n\n  // Constrain growth according to the tax level.\n  const z = Math.min(budget.cityTax + gameLevel, taxMax)\n  resRatio = (resRatio - 1) * taxTableScale + taxTable[z]\n  comRatio = (comRatio - 1) * taxTableScale + taxTable[z]\n  indRatio = (indRatio - 1) * taxTableScale + taxTable[z]\n\n  this.resValve = MiscUtils.clamp(\n    this.resValve + Math.round(resRatio),\n    -RES_VALVE_RANGE,\n    RES_VALVE_RANGE\n  )\n  this.comValve = MiscUtils.clamp(\n    this.comValve + Math.round(comRatio),\n    -COM_VALVE_RANGE,\n    COM_VALVE_RANGE\n  )\n  this.indValve = MiscUtils.clamp(\n    this.indValve + Math.round(indRatio),\n    -IND_VALVE_RANGE,\n    IND_VALVE_RANGE\n  )\n\n  if (this.resCap && this.resValve > 0) this.resValve = 0\n\n  if (this.comCap && this.comValve > 0) this.comValve = 0\n\n  if (this.indCap && this.indValve > 0) this.indValve = 0\n\n  this._emitEvent(VALVES_UPDATED)\n}\n\nexport { Valves }\n","import { BlockMap } from './map/blockMap'\nimport { BlockMapUtils } from './map/blockMapUtils'\nimport { Budget } from './stats/budget'\nimport { Census } from './stats/census'\nimport { Commercial } from './zones/commercial'\nimport { DisasterManager } from './stats/disasterManager'\nimport { EventEmitter } from './eventEmitter'\nimport { EmergencyServices } from './stats/emergencyServices'\nimport { Evaluation } from './stats/evaluation'\nimport { Industrial } from './zones/industrial'\nimport { MapScanner } from './map/mapScanner'\nimport * as Messages from './messages'\nimport { MiscTiles } from './tiles/miscTiles'\nimport { MiscUtils } from './utils'\nimport { PowerManager } from './stats/powerManager'\nimport { RepairManager } from './stats/repairManager'\nimport { Residential } from './zones/residential'\nimport { Road } from './tiles/road'\nimport { SpriteManager } from './sprites/spriteManager'\nimport { Stadium } from './tiles/stadium'\nimport { Traffic } from './stats/traffic'\nimport { Transport } from './stats/transport'\nimport { Valves } from './stats/valves'\n\nconst Simulation = EventEmitter(function (gameMap, gameLevel, speed, savedGame) {\n  this.reset(gameMap, gameLevel, speed)\n\n  // Register actions\n  Commercial.registerHandlers(this._mapScanner, this._repairManager)\n  EmergencyServices.registerHandlers(this._mapScanner, this._repairManager)\n  Industrial.registerHandlers(this._mapScanner, this._repairManager)\n  MiscTiles.registerHandlers(this._mapScanner, this._repairManager)\n  Road.registerHandlers(this._mapScanner, this._repairManager)\n  Residential.registerHandlers(this._mapScanner, this._repairManager)\n  Stadium.registerHandlers(this._mapScanner, this._repairManager)\n  Transport.registerHandlers(this._mapScanner, this._repairManager)\n\n  if (savedGame) {\n    this.load(savedGame)\n  }\n\n  this.init()\n})\n\nSimulation.prototype.reset = function (gameMap, gameLevel = Simulation.LEVEL_EASY, speed = Simulation.SPEED_MED) {\n\n  this._map = gameMap\n  this.setLevel(gameLevel)\n  this.setSpeed(speed)\n\n  this._phaseCycle = 0\n  this._simCycle = 0\n  this._cityTime = 0\n  this._cityPopLast = 0\n  this._messageLast = Messages.REACHED_VILLAGE\n  this._startingYear = 1 // 1900\n\n  this._lastTickTime = -1\n\n  // Last date sent to front end\n  this._cityYearLast = -1\n  this._cityMonthLast = -1\n\n  // Last time we relayed a message from PowerManager to the front-end\n  this._lastPowerMessage = null\n\n  // And now, the main cast of characters\n  this.evaluation = new Evaluation(this._gameLevel)\n  this._valves = new Valves()\n  this.budget = new Budget()\n  this._census = new Census()\n  this._powerManager = new PowerManager(this._map)\n  this.spriteManager = new SpriteManager(this._map)\n  this._mapScanner = new MapScanner(this._map)\n  this._repairManager = new RepairManager(this._map)\n  this._traffic = new Traffic(this._map, this.spriteManager)\n  this.disasterManager = new DisasterManager(\n    this._map,\n    this.spriteManager,\n    this._gameLevel\n  )\n\n  this.blockMaps = {\n    // Holds a \"distance score\" for the block from the city centre, range  -64 to 64\n    cityCentreDistScoreMap: new BlockMap(this._map.width, this._map.height, 8),\n\n    // Holds a score representing how dangerous an area is, in range 0-250 (larger is worse)\n    crimeRateMap: new BlockMap(this._map.width, this._map.height, 2),\n\n    // A map used to note positions of fire stations during the map scan, range 0-1000\n    fireStationMap: new BlockMap(this._map.width, this._map.height, 8),\n\n    // Holds a value containing a score representing the effect of fire cover in this neighborhood, range 0-1000\n    fireStationEffectMap: new BlockMap(this._map.width, this._map.height, 8),\n\n    // Holds scores representing the land value in the range 0-250\n    landValueMap: new BlockMap(this._map.width, this._map.height, 2),\n\n    // A map used to note positions of police stations during the map scan, range 0-1000\n    policeStationMap: new BlockMap(this._map.width, this._map.height, 8),\n\n    // Holds a value containing a score representing how much crime is dampened in this block, range 0-1000\n    policeStationEffectMap: new BlockMap(this._map.width, this._map.height, 8),\n\n    // Holds a value representing the amount of pollution in a neighbourhood, in the range 0-255\n    pollutionDensityMap: new BlockMap(this._map.width, this._map.height, 2),\n\n    // Holds a value representing population density of a block, in the range 0-510\n    populationDensityMap: new BlockMap(this._map.width, this._map.height, 2),\n\n    // Holds a value representing the rate of growth of a neighbourhood in the range -200 to +200\n    rateOfGrowthMap: new BlockMap(this._map.width, this._map.height, 8),\n\n    // Scores a block on how undeveloped/unspoilt it is, range 0-240\n    terrainDensityMap: new BlockMap(this._map.width, this._map.height, 4),\n\n    // Scores the volume of traffic in this cluster, range 0-240\n    trafficDensityMap: new BlockMap(this._map.width, this._map.height, 2),\n\n    // Temporary maps\n    tempMap1: new BlockMap(this._map.width, this._map.height, 2),\n    tempMap2: new BlockMap(this._map.width, this._map.height, 2),\n    tempMap3: new BlockMap(this._map.width, this._map.height, 4),\n  }\n\n  this.budget.setFunds(999999999) // Was 20000\n  this._census.totalPop = 1\n\n  this._clearCensus()\n\n\n  // Add various listeners that we will in turn transmit upwards\n  const evaluationEvents = [\n    'CLASSIFICATION_UPDATED',\n    'POPULATION_UPDATED',\n    'SCORE_UPDATED',\n  ].map(function (m) {\n    return Messages[m]\n  })\n  for (var i = 0, l = evaluationEvents.length; i < l; i++) {\n    this.evaluation.addEventListener(\n      evaluationEvents[i],\n      MiscUtils.reflectEvent.bind(this, evaluationEvents[i])\n    )\n  }\n\n  this._powerManager.addEventListener(\n    Messages.NOT_ENOUGH_POWER,\n    function (e) {\n      const d = new Date()\n\n      if (\n        this._lastPowerMessage === null\n        || d - this._lastPowerMessage > 1000 * 60 * 2\n      ) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NOT_ENOUGH_POWER,\n        })\n        this._lastPowerMessage = d\n      }\n    }.bind(this)\n  )\n\n    /**\n     * Event listeners for newly created instances\n     */\n\n  this.budget.addEventListener(\n    Messages.FUNDS_CHANGED,\n    MiscUtils.reflectEvent.bind(this, Messages.FUNDS_CHANGED)\n  )\n  this.budget.addEventListener(\n    Messages.BUDGET_NEEDED,\n    MiscUtils.reflectEvent.bind(this, Messages.BUDGET_NEEDED)\n  )\n  this.budget.addEventListener(\n    Messages.NO_MONEY,\n    this._wrapMessage.bind(this, Messages.NO_MONEY)\n  )\n\n  this._valves.addEventListener(\n    Messages.VALVES_UPDATED,\n    this._onValveChange.bind(this)\n  )\n\n  for (i = 0, l = Messages.DISASTER_MESSAGES.length; i < l; i++) {\n    this.spriteManager.addEventListener(\n      Messages.DISASTER_MESSAGES[i],\n      this._wrapMessage.bind(this, Messages.DISASTER_MESSAGES[i])\n    )\n    this.disasterManager.addEventListener(\n      Messages.DISASTER_MESSAGES[i],\n      this._wrapMessage.bind(this, Messages.DISASTER_MESSAGES[i])\n    )\n  }\n  for (i = 0, l = Messages.CRASHES.length; i < l; i++) {\n    this.spriteManager.addEventListener(\n      Messages.CRASHES[i],\n      this._wrapMessage.bind(this, Messages.CRASHES[i])\n    )\n  }\n\n  this.spriteManager.addEventListener(\n    Messages.HEAVY_TRAFFIC,\n    this._wrapMessage.bind(this, Messages.HEAVY_TRAFFIC)\n  )\n\n  this._powerManager.registerHandlers(this._mapScanner, this._repairManager)\n\n}\n\nSimulation.prototype.setLevel = function (l) {\n  if (\n    l !== Simulation.LEVEL_EASY\n    && l !== Simulation.LEVEL_MED\n    && l !== Simulation.LEVEL_HARD\n  ) { throw new Error('Invalid level!') }\n\n  this._gameLevel = l\n}\n\nSimulation.prototype.setSpeed = function (s) {\n  if (\n    s !== Simulation.SPEED_PAUSED\n    && s !== Simulation.SPEED_SLOW\n    && s !== Simulation.SPEED_MED\n    && s !== Simulation.SPEED_FAST\n  ) { throw new Error('Invalid speed!') }\n\n  this._speed = s\n}\n\nSimulation.prototype.isPaused = function () {\n  return this._speed === Simulation.SPEED_PAUSED\n}\n\nconst saveProps = ['_cityTime', '_speed', '_gameLevel']\n\nSimulation.prototype.save = function (saveData) {\n\n  for (let i = 0, l = saveProps.length; i < l; i++) {\n    saveData[saveProps[i]] = this[saveProps[i]]\n  }\n\n  this._map.save(saveData)\n  this.evaluation.save(saveData)\n  this._valves.save(saveData)\n  this.budget.save(saveData)\n  this._census.save(saveData)\n}\n\nSimulation.prototype.load = function (saveData) {\n\n  for (let i = 0, l = saveProps.length; i < l; i++) {\n    this[saveProps[i]] = saveData[saveProps[i]] || this[saveProps[i]]\n  }\n\n  this._map.load(saveData)\n  this.evaluation.load(saveData)\n  this._valves.load(saveData)\n  this.budget.load(saveData)\n  this._census.load(saveData)\n}\n\nSimulation.prototype.simTick = function () {\n  this._simFrame()\n  this._updateTime()\n  // TODO Graphs\n}\n\nSimulation.prototype._simFrame = function () {\n  if (this.budget.awaitingValues) return\n\n  // Default to slow speed\n  let threshold = 100\n\n  switch (this._speed) {\n    case Simulation.SPEED_PAUSED:\n      return\n\n    case Simulation.SPEED_SLOW:\n      // We've already set the threshold correctly\n      break\n\n    case Simulation.SPEED_MED:\n      threshold = 50\n      break\n\n    case Simulation.SPEED_FAST:\n      threshold = 10\n      break\n\n    default:\n      console.warn('Unexpected speed (' + this._speed + '): defaulting to slow')\n  }\n\n  const d = new Date().getTime()\n  if (d - this._lastTickTime < threshold) return\n\n  const simData = this._constructSimData()\n  this._simulate(simData)\n  this._lastTickTime = new Date().getTime()\n}\n\nSimulation.prototype._clearCensus = function () {\n  this._census.clearCensus()\n  this._powerManager.clearPowerStack()\n  this.blockMaps.fireStationMap.clear()\n  this.blockMaps.policeStationMap.clear()\n}\n\nSimulation.prototype._constructSimData = function () {\n  return {\n    blockMaps: this.blockMaps,\n    budget: this.budget,\n    census: this._census,\n    cityTime: this._cityTime,\n    disasterManager: this.disasterManager,\n    gameLevel: this._gameLevel,\n    repairManager: this._repairManager,\n    powerManager: this._powerManager,\n    simulator: this,\n    spriteManager: this.spriteManager,\n    trafficManager: this._traffic,\n    valves: this._valves,\n  }\n}\n\nSimulation.prototype.init = function () {\n\n  const simData = this._constructSimData()\n\n  this._mapScanner.mapScan(0, this._map.width, simData)\n  this._powerManager.doPowerScan(this._census)\n\n  BlockMapUtils.pollutionTerrainLandValueScan(\n    this._map,\n    this._census,\n    this.blockMaps\n  )\n  BlockMapUtils.crimeScan(this._census, this.blockMaps)\n  BlockMapUtils.populationDensityScan(this._map, this.blockMaps)\n  BlockMapUtils.fireAnalysis(this.blockMaps)\n}\n\nconst speedPowerScan = [2, 4, 5]\nconst speedPollutionTerrainLandValueScan = [2, 7, 17]\nconst speedCrimeScan = [1, 8, 18]\nconst speedPopulationDensityScan = [1, 9, 19]\nconst speedFireAnalysis = [1, 10, 20]\nconst CENSUS_FREQUENCY_10 = 4\nconst CENSUS_FREQUENCY_120 = CENSUS_FREQUENCY_10 * 10\nconst TAX_FREQUENCY = 48\n\nconst simulate = function (simData) {\n  this._phaseCycle &= 15\n  const speedIndex = this._speed - 1\n\n  switch (this._phaseCycle) {\n    case 0:\n      if (++this._simCycle > 1023) this._simCycle = 0\n\n      this._cityTime++\n\n      if ((this._simCycle & 1) === 0) {\n        this._valves.setValves(this._gameLevel, this._census, this.budget)\n      }\n\n      this._clearCensus()\n      break\n\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n      this._mapScanner.mapScan(\n        ((this._phaseCycle - 1) * this._map.width) / 8,\n        (this._phaseCycle * this._map.width) / 8,\n        simData\n      )\n      break\n\n    case 9:\n      if (this._cityTime % CENSUS_FREQUENCY_10 === 0) {\n        this._census.take10Census(this.budget)\n      }\n\n      if (this._cityTime % CENSUS_FREQUENCY_120 === 0) {\n        this._census.take120Census(this.budget)\n      }\n\n      if (this._cityTime % TAX_FREQUENCY === 0) {\n        this.budget.collectTax(this._gameLevel, this._census)\n        this.evaluation.cityEvaluation(simData)\n      }\n\n      break\n\n    case 10:\n      if (this._simCycle % 5 === 0) { BlockMapUtils.neutraliseRateOfGrowthMap(simData.blockMaps) }\n\n      BlockMapUtils.neutraliseTrafficMap(this.blockMaps)\n      this._sendMessages()\n      break\n\n    case 11:\n      if (this._simCycle % speedPowerScan[speedIndex] === 0) { this._powerManager.doPowerScan(this._census) }\n      break\n\n    case 12:\n      if (this._simCycle % speedPollutionTerrainLandValueScan[speedIndex] === 0) {\n        BlockMapUtils.pollutionTerrainLandValueScan(\n          this._map,\n          this._census,\n          this.blockMaps\n        )\n      }\n      break\n\n    case 13:\n      if (this._simCycle % speedCrimeScan[speedIndex] === 0) { BlockMapUtils.crimeScan(this._census, this.blockMaps) }\n      break\n\n    case 14:\n      if (this._simCycle % speedPopulationDensityScan[speedIndex] === 0) { BlockMapUtils.populationDensityScan(this._map, this.blockMaps) }\n      break\n\n    case 15:\n      if (this._simCycle % speedFireAnalysis[speedIndex] === 0) { BlockMapUtils.fireAnalysis(this.blockMaps) }\n\n      this.disasterManager.doDisasters(this._census)\n      break\n  }\n\n  // Go on the the next phase.\n  this._phaseCycle = (this._phaseCycle + 1) & 15\n}\n\nSimulation.prototype._simulate = function (simData) {\n  // This is actually a wrapper function that will only be called once, to perform the initial\n  // evaluation. Once that has completed, it will supplant itself with the standard \"simulate\"\n  // procedure defined above\n  this.evaluation.cityEvaluation(simData)\n  this._simulate = simulate\n  this._simulate(simData)\n}\n\nSimulation.prototype._wrapMessage = function (message, data) {\n  this._emitEvent(Messages.FRONT_END_MESSAGE, { subject: message, data })\n}\n\nSimulation.prototype._sendMessages = function () {\n  this._checkGrowth()\n\n  const totalZonePop =\n    this._census.resZonePop + this._census.comZonePop + this._census.indZonePop\n  const powerPop = this._census.nuclearPowerPop + this._census.coalPowerPop\n\n  switch (this._cityTime & 63) {\n    case 1:\n      if (Math.floor(totalZonePop / 4) >= this._census.resZonePop) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_MORE_RESIDENTIAL,\n        })\n      }\n      break\n\n    case 5:\n      if (Math.floor(totalZonePop / 8) >= this._census.comZonePop) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_MORE_COMMERCIAL,\n        })\n      }\n      break\n\n    case 10:\n      if (Math.floor(totalZonePop / 8) >= this._census.indZonePop) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_MORE_INDUSTRIAL,\n        })\n      }\n      break\n\n    case 14:\n      if (totalZonePop > 10 && totalZonePop * 2 > this._census.roadTotal) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_MORE_ROADS,\n        })\n      }\n      break\n\n    case 18:\n      if (totalZonePop > 50 && totalZonePop > this._census.railTotal) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_MORE_RAILS,\n        })\n      }\n      break\n\n    case 22:\n      if (totalZonePop > 10 && powerPop === 0) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_ELECTRICITY,\n        })\n      }\n      break\n\n    case 26:\n      if (this._census.resPop > 500 && this._census.stadiumPop === 0) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_STADIUM,\n        })\n        this._valves.resCap = true\n      } else {\n        this._valves.resCap = false\n      }\n      break\n\n    case 28:\n      if (this._census.indPop > 70 && this._census.seaportPop === 0) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_SEAPORT,\n        })\n        this._valves.indCap = true\n      } else {\n        this._valves.indCap = false\n      }\n      break\n\n    case 30:\n      if (this._census.comPop > 100 && this._census.airportPop === 0) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_AIRPORT,\n        })\n        this._valves.comCap = true\n      } else {\n        this._valves.comCap = false\n      }\n      break\n\n    case 32:\n      var zoneCount =\n        this._census.unpoweredZoneCount + this._census.poweredZoneCount\n      if (zoneCount > 0) {\n        if (this._census.poweredZoneCount / zoneCount < 0.7 && powerPop > 0) {\n          const d = new Date()\n          if (\n            this._lastPowerMessage === null\n            || d - this._lastPowerMessage > 1000 * 60 * 2\n          ) {\n            this._emitEvent(Messages.FRONT_END_MESSAGE, {\n              subject: Messages.BLACKOUTS_REPORTED,\n            })\n            this._lastPowerMessage = d\n          }\n        }\n      }\n      break\n\n    case 35:\n      if (this._census.pollutionAverage > 60) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.HIGH_POLLUTION,\n          data: { x: this._map.pollutionMaxX, y: this._map.pollutionMaxY },\n        })\n      }\n      break\n\n    case 42:\n      if (this._census.crimeAverage > 100) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.HIGH_CRIME,\n        })\n      }\n      break\n\n    case 45:\n      if (this._census.totalPop > 60 && this._census.fireStationPop === 0) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_FIRE_STATION,\n        })\n      }\n      break\n\n    case 48:\n      if (this._census.totalPop > 60 && this._census.policeStationPop === 0) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.NEED_POLICE_STATION,\n        })\n      }\n      break\n\n    case 51:\n      if (this.budget.cityTax > 12) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.TAX_TOO_HIGH,\n        })\n      }\n      break\n\n    case 54:\n      if (\n        this.budget.roadEffect\n        < Math.floor((5 * this.budget.MAX_ROAD_EFFECT) / 8)\n        && this._census.roadTotal > 30\n      ) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.ROAD_NEEDS_FUNDING,\n        })\n      }\n      break\n\n    case 57:\n      if (\n        this.budget.fireEffect\n        < Math.floor((7 * this.budget.MAX_FIRE_STATION_EFFECT) / 10)\n        && this._census.totalPop > 20\n      ) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.FIRE_STATION_NEEDS_FUNDING,\n        })\n      }\n      break\n\n    case 60:\n      if (\n        this.budget.policeEffect\n        < Math.floor((7 * this.budget.MAX_POLICE_STATION_EFFECT) / 10)\n        && this._census.totalPop > 20\n      ) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.POLICE_NEEDS_FUNDING,\n        })\n      }\n      break\n\n    case 63:\n      if (this._census.trafficAverage > 60) {\n        this._emitEvent(Messages.FRONT_END_MESSAGE, {\n          subject: Messages.TRAFFIC_JAMS,\n        })\n      }\n      break\n  }\n}\n\nSimulation.prototype._checkGrowth = function () {\n  if ((this._cityTime & 3) !== 0) return\n\n  let message = ''\n  const cityPop = this.evaluation.getPopulation(this._census)\n\n  if (cityPop !== this._cityPopLast) {\n    const lastClass = this.evaluation.getCityClass(this._cityPopLast)\n    const newClass = this.evaluation.getCityClass(cityPop)\n\n    if (lastClass !== newClass) {\n      switch (newClass) {\n        case Evaluation.CC_VILLAGE:\n          // Don't mention it.\n          break\n\n        case Evaluation.CC_TOWN:\n          message = Messages.REACHED_TOWN\n          break\n\n        case Evaluation.CC_CITY:\n          message = Messages.REACHED_CITY\n          break\n\n        case Evaluation.CC_CAPITAL:\n          message = Messages.REACHED_CAPITAL\n          break\n\n        case Evaluation.CC_METROPOLIS:\n          message = Messages.REACHED_METROPOLIS\n          break\n\n        case Evaluation.CC_MEGALOPOLIS:\n          message = Messages.REACHED_MEGALOPOLIS\n          break\n\n        default:\n          break\n      }\n    }\n  }\n\n  if (message !== '' && message !== this._messageLast) {\n    this._emitEvent(Messages.FRONT_END_MESSAGE, { subject: message })\n    this._messageLast = message\n  }\n\n  this._cityPopLast = cityPop\n}\n\nSimulation.prototype._onValveChange = function () {\n  this._resLast = this._valves.resValve\n  this._comLast = this._valves.comValve\n  this._indLast = this._valves.indValve\n\n  this._emitEvent(Messages.VALVES_UPDATED, {\n    residential: this._valves.resValve,\n    commercial: this._valves.comValve,\n    industrial: this._valves.indValve,\n  })\n}\n\nSimulation.prototype.getDate = function () {\n  const year = Math.floor(this._cityTime / 48) + this._startingYear\n  const month = Math.floor(this._cityTime % 48) >> 2\n  return { month, year }\n}\n\nSimulation.prototype._setYear = function (year) {\n  if (year < this._startingYear) year = this._startingYear\n\n  year = year - this._startingYear - this._cityTime / 48\n  this._cityTime += year * 48\n  this._updateTime()\n}\n\nSimulation.prototype._updateTime = function () {\n  const megalinium = 1000000\n  const cityYear = Math.floor(this._cityTime / 48) + this._startingYear\n  const cityMonth = Math.floor(this._cityTime % 48) >> 2\n\n  if (cityYear >= megalinium) {\n    this.setYear(startingYear)\n    return\n  }\n\n  if (this._cityYearLast !== cityYear || this._cityMonthLast !== cityMonth) {\n    this._cityYearLast = cityYear\n    this._cityMonthLast = cityMonth\n    this._emitEvent(Messages.DATE_UPDATED, { month: cityMonth, year: cityYear })\n  }\n}\n\nObject.defineProperties(Simulation, {\n  LEVEL_EASY: MiscUtils.makeConstantDescriptor(0),\n  LEVEL_MED: MiscUtils.makeConstantDescriptor(1),\n  LEVEL_HARD: MiscUtils.makeConstantDescriptor(2),\n  SPEED_PAUSED: MiscUtils.makeConstantDescriptor(0),\n  SPEED_SLOW: MiscUtils.makeConstantDescriptor(1),\n  SPEED_MED: MiscUtils.makeConstantDescriptor(2),\n  SPEED_FAST: MiscUtils.makeConstantDescriptor(3),\n})\n\nexport { Simulation }\n","import { MiscUtils } from './utils'\n\n// A very thin wrapper around localStorage, in case we wish to move to some other storage mechanism\n// (such as indexedDB) in the future\n\nconst getSavedGame = function () {\n  let savedGame = window.localStorage.getItem(this.KEY)\n\n  if (savedGame !== null) {\n    savedGame = JSON.parse(savedGame)\n\n    if (savedGame.version !== this.CURRENT_VERSION) { this.transitionOldSave(savedGame) }\n\n    // Flag as a saved game for Game/Simulation etc...\n    savedGame.isSavedGame = true\n  }\n\n  return savedGame\n}\n\nconst saveGame = function (gameData) {\n  gameData.version = this.CURRENT_VERSION\n  gameData = JSON.stringify(gameData)\n\n  window.localStorage.setItem(this.KEY, gameData)\n}\n\nconst clear = function() {\n  window.localStorage.removeItem(this.KEY)\n}\nconst transitionOldSave = function (savedGame) {\n  switch (savedGame.version) {\n    case 1:\n      savedGame.everClicked = false\n\n    /* falls through */\n    case 2:\n      savedGame.pollutionMaxX = Math.floor(savedGame.width / 2)\n      savedGame.pollutionMaxY = Math.floor(savedGame.height / 2)\n      savedGame.cityCentreX = Math.floor(savedGame.width / 2)\n      savedGame.cityCentreY = Math.floor(savedGame.height / 2)\n\n      break\n\n    default:\n      throw new Error('Unknown save version!')\n  }\n}\n\nconst Storage = {\n  getSavedGame,\n  saveGame,\n  clear,\n  transitionOldSave,\n}\n\nObject.defineProperty(\n  Storage,\n  'CURRENT_VERSION',\n  MiscUtils.makeConstantDescriptor(3)\n)\nObject.defineProperty(\n  Storage,\n  'KEY',\n  MiscUtils.makeConstantDescriptor('micropolisJSGame')\n)\nObject.defineProperty(\n  Storage,\n  'canStore',\n  MiscUtils.makeConstantDescriptor(window.localStorage !== undefined)\n)\n\nexport { Storage }\n","import { Tile } from '../tiles/tile'\n\nfunction WorldEffects(map) {\n  this._map = map\n  this._data = {}\n}\n\nconst toKey = function (x, y) {\n  return [x, y].join(',')\n}\n\nconst fromKey = function (k) {\n  k = k.split(',')\n  return {\n    x: k[0] - 0,\n    y: k[1] - 0,\n    toString: function () {\n      return 'World effect coord: (' + k[0] + ', ' + k[1] + ')'\n    },\n  }\n}\n\nWorldEffects.prototype.clear = function () {\n  this._data = []\n}\n\nWorldEffects.prototype.getTile = function (x, y) {\n  const key = toKey(x, y)\n  let tile = this._data[key]\n  if (tile === undefined) tile = this._map.getTile(x, y)\n  return tile\n}\n\nWorldEffects.prototype.getTileValue = function (x, y) {\n  return this.getTile(x, y).getValue()\n}\n\nWorldEffects.prototype.setTile = function (x, y, value, flags) {\n  if (flags !== undefined && value instanceof Tile) { throw new Error('Flags supplied with already defined tile') }\n\n  if (!this._map.testBounds(x, y)) {\n    throw new Error(\n      'WorldEffects setTile called with invalid bounds ' + x + ', ' + y\n    )\n  }\n\n  if (flags === undefined && !(value instanceof Tile)) value = new Tile(value)\n  else if (flags !== undefined) value = new Tile(value, flags)\n\n  const key = toKey(x, y)\n  this._data[key] = value\n}\n\nWorldEffects.prototype.apply = function () {\n  const keys = Object.keys(this._data)\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const coords = fromKey(keys[i])\n    this._map.setTo(coords, this._data[keys[i]])\n  }\n}\n\nexport { WorldEffects }\n","import { MiscUtils } from '../utils'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { DIRT, HBRIDGE, LASTTINYEXP, TINYEXP } from '../tiles/tileValues'\nimport { WorldEffects } from '../stats/worldEffects'\n\nconst init = function (cost, map, shouldAutoBulldoze, isDraggable) {\n  isDraggable = isDraggable || false\n  Object.defineProperty(\n    this,\n    'toolCost',\n    MiscUtils.makeConstantDescriptor(cost)\n  )\n  this.result = null\n  this.isDraggable = isDraggable\n  this._shouldAutoBulldoze = shouldAutoBulldoze\n  this._map = map\n  this._worldEffects = new WorldEffects(map)\n  this._applicationCost = 0\n}\n\nconst clear = function () {\n  this._applicationCost = 0\n  this._worldEffects.clear()\n}\n\nconst addCost = function (cost) {\n  this._applicationCost += cost\n}\n\nconst doAutoBulldoze = function (x, y) {\n  let tile = this._worldEffects.getTile(x, y)\n  if (tile.isBulldozable()) {\n    tile = TileUtils.normalizeRoad(tile.getValue())\n    if (\n      (tile >= TINYEXP && tile <= LASTTINYEXP)\n      || (tile < HBRIDGE && tile !== DIRT)\n    ) {\n      this.addCost(1)\n      this._worldEffects.setTile(x, y, DIRT)\n    }\n  }\n}\n\nconst apply = function (budget) {\n  this._worldEffects.apply()\n  budget.spend(this._applicationCost)\n  this.clear()\n}\n\nconst modifyIfEnoughFunding = function (budget) {\n  if (this.result !== this.TOOLRESULT_OK) {\n    this.clear()\n    return false\n  }\n\n  if (budget.totalFunds < this._applicationCost) {\n    this.result = this.TOOLRESULT_NO_MONEY\n    this.clear()\n    return false\n  }\n\n  apply.call(this, budget)\n  this.clear()\n  return true\n}\n\nconst TOOLRESULT_OK = 0\nconst TOOLRESULT_FAILED = 1\nconst TOOLRESULT_NO_MONEY = 2\nconst TOOLRESULT_NEEDS_BULLDOZE = 3\n\nconst BaseToolConstructor = {\n  addCost,\n  autoBulldoze: true,\n  bulldozerCost: 1,\n  clear,\n  doAutoBulldoze,\n  init,\n  modifyIfEnoughFunding,\n  TOOLRESULT_OK,\n  TOOLRESULT_FAILED,\n  TOOLRESULT_NO_MONEY,\n  TOOLRESULT_NEEDS_BULLDOZE,\n}\n\nconst BaseTool = {\n  makeTool,\n  setAutoBulldoze: function (value) {\n    BaseToolConstructor.autoBulldoze = value\n  },\n  getAutoBulldoze: function () {\n    return BaseToolConstructor.autoBulldoze\n  },\n  save,\n  load,\n}\n\nfunction save(saveData) {\n  saveData.autoBulldoze = BaseToolConstructor.autoBulldoze\n}\n\nfunction load(saveData) {\n  BaseTool.autoBulldoze = saveData.autoBulldoze\n}\n\nfunction makeTool(toolConstructor) {\n  toolConstructor.prototype = Object.create(BaseToolConstructor)\n  return toolConstructor\n}\n\nexport { BaseTool }\n","import { EventEmitter } from '../eventEmitter'\nimport { MiscUtils } from '../utils'\n\nconst ModalWindow = function (constructorFunction, focusID) {\n  focusID = focusID ? MiscUtils.normaliseDOMid(focusID) : null\n\n  const newConstructor = function (opacityLayerID, windowID) {\n    this._opacityLayer = MiscUtils.normaliseDOMid(opacityLayerID)\n    this._windowID = MiscUtils.normaliseDOMid(windowID)\n    constructorFunction.call(this)\n  }\n\n  newConstructor.prototype._toggleDisplay = function () {\n    let opacityLayer = $(this._opacityLayer)\n    opacityLayer = opacityLayer.length === 0 ? null : opacityLayer\n    if (opacityLayer === null) { throw new Error('Node ' + this._opacityLayer + ' not found') }\n\n    let modalWindow = $(this._windowID)\n    modalWindow = modalWindow.length === 0 ? null : modalWindow\n    if (modalWindow === null) { throw new Error('Node ' + this._windowID + ' not found') }\n\n    opacityLayer.toggle()\n    modalWindow.toggle()\n\n    if (focusID !== null) $(focusID).focus()\n    else $(this._windowID + ' input[type=submit]').focus()\n  }\n\n  return EventEmitter(newConstructor)\n}\n\nexport { ModalWindow }\n","import { BUDGET_WINDOW_CLOSED } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { ModalWindow } from './modalWindow'\n\nvar BudgetWindow = ModalWindow(function () {\n  $(budgetCancelID).on('click', cancel.bind(this))\n  $(budgetResetID).on('click', resetItems.bind(this))\n  $(budgetFormID).on('submit', submit.bind(this))\n})\n\nvar dataKeys = [\n  'roadMaintenanceBudget',\n  'fireMaintenanceBudget',\n  'policeMaintenanceBudget',\n]\nvar spendKeys = ['roadRate', 'fireRate', 'policeRate']\n\nvar budgetResetID = '#budgetReset'\nvar budgetCancelID = '#budgetCancel'\nvar budgetFormID = '#budgetForm'\nvar budgetOKID = '#budgetOK'\n\nvar setSpendRangeText = function (element, percentage, totalSpend) {\n  var labelID = element + 'Label'\n  var cash = Math.floor(totalSpend * (percentage / 100))\n  var text = [percentage, '% of $', totalSpend, ' = $', cash].join('')\n  $(MiscUtils.normaliseDOMid(labelID)).text(text)\n}\n\nvar onFundingUpdate = function (elementID, e) {\n  var element = $(MiscUtils.normaliseDOMid(elementID))[0]\n  var percentage = element.value - 0\n  var dataSource = element.getAttribute('data-source')\n  setSpendRangeText(elementID, percentage, this[dataSource])\n}\n\nvar onTaxUpdate = function (e) {\n  var elem = $('#taxRateLabel')[0]\n  var sourceElem = $('#taxRate')[0]\n  $(elem).text(['Tax rate: ', sourceElem.value, '%'].join(''))\n}\n\nvar resetItems = function (e) {\n  for (var i = 0; i < spendKeys.length; i++) {\n    var original = this['original' + spendKeys[i]]\n    $(MiscUtils.normaliseDOMid(spendKeys[i]))[0].value = original\n    setSpendRangeText(spendKeys[i], original, this[dataKeys[i]])\n  }\n  $('#taxRate')[0].value = this.originaltaxRate\n  onTaxUpdate()\n\n  e.preventDefault()\n}\n\nBudgetWindow.prototype.close = function (data) {\n  data = data || { cancelled: true }\n  this._emitEvent(BUDGET_WINDOW_CLOSED, data)\n  this._toggleDisplay()\n}\n\nvar cancel = function (e) {\n  e.preventDefault()\n  this.close({ cancelled: true })\n}\n\nvar submit = function (e) {\n  e.preventDefault()\n\n  // Get element values\n  var roadPercent = $('#roadRate')[0].value\n  var firePercent = $('#fireRate')[0].value\n  var policePercent = $('#policeRate')[0].value\n  var taxPercent = $('#taxRate')[0].value\n\n  var data = {\n    cancelled: false,\n    roadPercent: roadPercent,\n    firePercent: firePercent,\n    policePercent: policePercent,\n    taxPercent: taxPercent,\n    e: e,\n    original: e.type,\n  }\n  this.close(data)\n}\n\nBudgetWindow.prototype.open = function (budgetData) {\n  var i, elem\n\n  // Store max funding levels\n  for (i = 0; i < dataKeys.length; i++) {\n    if (budgetData[dataKeys[i]] === undefined)\n      throw new Error('Missing budget data (' + dataKeys[i] + ')')\n    this[dataKeys[i]] = budgetData[dataKeys[i]]\n  }\n\n  // Update form elements with percentages, and set up listeners\n  for (i = 0; i < spendKeys.length; i++) {\n    if (budgetData[spendKeys[i]] === undefined)\n      throw new Error('Missing budget data (' + spendKeys[i] + ')')\n\n    elem = spendKeys[i]\n    this['original' + elem] = budgetData[elem]\n    setSpendRangeText(elem, budgetData[spendKeys[i]], this[dataKeys[i]])\n    elem = $(MiscUtils.normaliseDOMid(elem))\n    elem.on('change', onFundingUpdate.bind(this, spendKeys[i]))\n    elem = elem[0]\n    elem.value = budgetData[spendKeys[i]]\n  }\n\n  if (budgetData.taxRate === undefined)\n    throw new Error('Missing budget data (taxRate)')\n\n  this.originalTaxRate = budgetData.taxRate\n  elem = $('#taxRate')\n  elem.on('change', onTaxUpdate)\n  elem = elem[0]\n  elem.value = budgetData.taxRate\n  onTaxUpdate()\n\n  // Update static parts\n  var previousFunds = budgetData.totalFunds\n  if (previousFunds === undefined)\n    throw new Error('Missing budget data (previousFunds)')\n\n  var taxesCollected = budgetData.taxesCollected\n  if (taxesCollected === undefined)\n    throw new Error('Missing budget data (taxesCollected)')\n\n  var cashFlow =\n    taxesCollected -\n    this.roadMaintenanceBudget -\n    this.fireMaintenanceBudget -\n    this.policeMaintenanceBudget\n  var currentFunds = previousFunds + cashFlow\n  $('#taxesCollected').text('$' + taxesCollected)\n  $('#cashFlow').text((cashFlow < 0 ? '-$' : '$') + cashFlow)\n  $('#previousFunds').text((previousFunds < 0 ? '-$' : '$') + previousFunds)\n  $('#currentFunds').text('$' + currentFunds)\n\n  this._toggleDisplay()\n}\n\nexport { BudgetWindow }\n","import { DEBUG_WINDOW_CLOSED } from '../messages'\nimport { ModalWindow } from './modalWindow'\nimport { MiscUtils } from '../utils'\n\nconst DebugWindow = ModalWindow(function () {\n  $(debugCancelID).on('click', cancel.bind(this))\n  $(debugFormID).on('submit', submit.bind(this))\n})\n\nvar debugCancelID = '#debugCancel'\nvar debugFormID = '#debugForm'\nconst debugOKID = '#debugOK'\n\nDebugWindow.prototype.close = function (actions) {\n  actions = actions || []\n  this._emitEvent(DEBUG_WINDOW_CLOSED, actions)\n  this._toggleDisplay()\n}\n\nvar cancel = function (e) {\n  e.preventDefault()\n  this.close([])\n}\n\nvar submit = function (e) {\n  e.preventDefault()\n\n  const actions = []\n\n  // Get element values\n  const shouldAdd = $('.debugAdd:checked').val()\n  if (shouldAdd === 'true') { actions.push({ action: DebugWindow.ADD_FUNDS, data: {} }) }\n\n  this.close(actions)\n}\n\nDebugWindow.prototype.open = function () {\n  this._toggleDisplay()\n}\n\nconst defineAction = (function () {\n  let uid = 0\n\n  return function (name) {\n    Object.defineProperty(\n      DebugWindow,\n      name,\n      MiscUtils.makeConstantDescriptor(uid)\n    )\n    uid += 1\n  }\n})()\n\ndefineAction('ADD_FUNDS')\n\nexport { DebugWindow }\n","import { DISASTER_WINDOW_CLOSED } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { ModalWindow } from './modalWindow'\n\nvar disasterSelectID = '#disasterSelect'\nvar disasterCancelID = '#disasterCancel'\nvar disasterOKID = '#disasterOK'\nvar disasterFormID = '#disasterForm'\n\nvar DisasterWindow = ModalWindow(function () {\n  $(disasterFormID).on('submit', submit.bind(this))\n  $(disasterCancelID).on('click', cancel.bind(this))\n}, disasterSelectID)\n\nDisasterWindow.prototype.close = function (disaster) {\n  disaster = disaster || DisasterWindow.DISASTER_NONE\n  this._toggleDisplay()\n  this._emitEvent(DISASTER_WINDOW_CLOSED, disaster)\n}\n\nvar cancel = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nvar submit = function (e) {\n  e.preventDefault()\n\n  // Get element values\n  var requestedDisaster = $(disasterSelectID)[0].value\n  this.close(requestedDisaster)\n}\n\nDisasterWindow.prototype.open = function () {\n  var i\n\n  // Ensure options have right values\n  $('#disasterNone').attr('value', DisasterWindow.DISASTER_NONE)\n  $('#disasterMonster').attr('value', DisasterWindow.DISASTER_MONSTER)\n  $('#disasterFire').attr('value', DisasterWindow.DISASTER_FIRE)\n  $('#disasterFlood').attr('value', DisasterWindow.DISASTER_FLOOD)\n  $('#disasterCrash').attr('value', DisasterWindow.DISASTER_CRASH)\n  $('#disasterMeltdown').attr('value', DisasterWindow.DISASTER_MELTDOWN)\n  $('#disasterTornado').attr('value', DisasterWindow.DISASTER_TORNADO)\n\n  this._toggleDisplay()\n}\n\nObject.defineProperties(DisasterWindow, {\n  DISASTER_NONE: MiscUtils.makeConstantDescriptor('None'),\n  DISASTER_MONSTER: MiscUtils.makeConstantDescriptor('Monster'),\n  DISASTER_FIRE: MiscUtils.makeConstantDescriptor('Fire'),\n  DISASTER_FLOOD: MiscUtils.makeConstantDescriptor('Flood'),\n  DISASTER_CRASH: MiscUtils.makeConstantDescriptor('Crash'),\n  DISASTER_MELTDOWN: MiscUtils.makeConstantDescriptor('Meltdown'),\n  DISASTER_TORNADO: MiscUtils.makeConstantDescriptor('Tornado'),\n})\n\nexport { DisasterWindow }\n","import { Evaluation } from '../stats/evaluation'\nimport * as Messages from './index'\nimport { Simulation } from '../simulation'\n\n// TODO Some kind of rudimentary L20N based on navigator.language?\n\n// Query tool strings\nconst densityStrings = ['Low', 'Medium', 'High', 'Very High']\nconst landValueStrings = ['Slum', 'Lower Class', 'Middle Class', 'High']\nconst crimeStrings = ['Safe', 'Light', 'Moderate', 'Dangerous']\nconst pollutionStrings = ['None', 'Moderate', 'Heavy', 'Very Heavy']\nconst rateStrings = ['Declining', 'Stable', 'Slow Growth', 'Fast Growth']\nconst zoneTypes = [\n  'Clear',\n  'Water',\n  'Trees',\n  'Rubble',\n  'Flood',\n  'Radioactive Waste',\n  'Fire',\n  'Road',\n  'Power',\n  'Rail',\n  'Residential',\n  'Commercial',\n  'Industrial',\n  'Seaport',\n  'Airport',\n  'Coal Power',\n  'Fire Department',\n  'Police Department',\n  'Stadium',\n  'Nuclear Power',\n  'Draw Bridge',\n  'Radar Dish',\n  'Fountain',\n  'Industrial',\n  'Steelers 38  Bears 3',\n  'Draw Bridge',\n  'Ur 238',\n]\n\n// Evaluation window\nconst gameLevel = {}\ngameLevel['' + Simulation.LEVEL_EASY] = 'Easy'\ngameLevel['' + Simulation.LEVEL_MED] = 'Medium'\ngameLevel['' + Simulation.LEVEL_HARD] = 'Hard'\n\nconst cityClass = {}\ncityClass[Evaluation.CC_VILLAGE] = 'VILLAGE'\ncityClass[Evaluation.CC_TOWN] = 'TOWN'\ncityClass[Evaluation.CC_CITY] = 'CITY'\ncityClass[Evaluation.CC_CAPITAL] = 'CAPITAL'\ncityClass[Evaluation.CC_METROPOLIS] = 'METROPOLIS'\ncityClass[Evaluation.CC_MEGALOPOLIS] = 'MEGALOPOLIS'\n\nconst problems = {}\nproblems[Evaluation.CRIME] = 'Crime'\nproblems[Evaluation.POLLUTION] = 'Pollution'\nproblems[Evaluation.HOUSING] = 'Housing'\nproblems[Evaluation.TAXES] = 'Taxes'\nproblems[Evaluation.TRAFFIC] = 'Traffic'\nproblems[Evaluation.UNEMPLOYMENT] = 'Unemployment'\nproblems[Evaluation.FIRE] = 'Fire'\n\n// months\nconst months = [\n  'January', // 'Jan',\n  'February', // 'Feb',\n  'March', // 'Mar',\n  'April', // 'Apr',\n  'May', // 'May',\n  'June', // 'Jun',\n  'July', // 'Jul',\n  'August', // 'Aug',\n  'September', // 'Sep',\n  'October', // 'Oct',\n  'November', // 'Nov',\n  'December', // 'Dec',\n]\n\n// Tool strings\nconst toolMessages = {\n  noMoney: 'Insufficient funds to build that',\n  needsDoze: 'Area must be bulldozed first',\n}\n\n// Message strings\nconst neutralMessages = {}\nneutralMessages[Messages.FIRE_STATION_NEEDS_FUNDING] = true\nneutralMessages[Messages.NEED_AIRPORT] = true\nneutralMessages[Messages.NEED_FIRE_STATION] = true\nneutralMessages[Messages.NEED_ELECTRICITY] = true\nneutralMessages[Messages.NEED_MORE_INDUSTRIAL] = true\nneutralMessages[Messages.NEED_MORE_COMMERCIAL] = true\nneutralMessages[Messages.NEED_MORE_RESIDENTIAL] = true\nneutralMessages[Messages.NEED_MORE_RAILS] = true\nneutralMessages[Messages.NEED_MORE_ROADS] = true\nneutralMessages[Messages.NEED_POLICE_STATION] = true\nneutralMessages[Messages.NEED_SEAPORT] = true\nneutralMessages[Messages.NEED_STADIUM] = true\nneutralMessages[Messages.ROAD_NEEDS_FUNDING] = true\nneutralMessages[Messages.POLICE_NEEDS_FUNDING] = true\nneutralMessages[Messages.WELCOME] = true\n\nconst badMessages = {}\nbadMessages[Messages.BLACKOUTS_REPORTED] = true\nbadMessages[Messages.EARTHQUAKE] = true\nbadMessages[Messages.EXPLOSION_REPORTED] = true\nbadMessages[Messages.FLOODING_REPORTED] = true\nbadMessages[Messages.FIRE_REPORTED] = true\nbadMessages[Messages.HEAVY_TRAFFIC] = true\nbadMessages[Messages.HELICOPTER_CRASHED] = true\nbadMessages[Messages.HIGH_CRIME] = true\nbadMessages[Messages.HIGH_POLLUTION] = true\nbadMessages[Messages.MONSTER_SIGHTED] = true\nbadMessages[Messages.NO_MONEY] = true\nbadMessages[Messages.NOT_ENOUGH_POWER] = true\nbadMessages[Messages.NUCLEAR_MELTDOWN] = true\nbadMessages[Messages.PLANE_CRASHED] = true\nbadMessages[Messages.SHIP_CRASHED] = true\nbadMessages[Messages.TAX_TOO_HIGH] = true\nbadMessages[Messages.TORNADO_SIGHTED] = true\nbadMessages[Messages.TRAFFIC_JAMS] = true\nbadMessages[Messages.TRAIN_CRASHED] = true\n\nconst goodMessages = {}\ngoodMessages[Messages.REACHED_CAPITAL] = true\ngoodMessages[Messages.REACHED_CITY] = true\ngoodMessages[Messages.REACHED_MEGALOPOLIS] = true\ngoodMessages[Messages.REACHED_METROPOLIS] = true\ngoodMessages[Messages.REACHED_TOWN] = true\n\nconst messageText = {}\nmessageText[Messages.FIRE_STATION_NEEDS_FUNDING] =\n  'Fire departments need funding'\nmessageText[Messages.NEED_AIRPORT] = 'Commerce requires an Airport'\nmessageText[Messages.NEED_FIRE_STATION] = 'Citizens demand a Fire Department'\nmessageText[Messages.NEED_ELECTRICITY] = 'Build a Power Plant'\nmessageText[Messages.NEED_MORE_INDUSTRIAL] = 'More industrial zones needed'\nmessageText[Messages.NEED_MORE_COMMERCIAL] = 'More commercial zones needed'\nmessageText[Messages.NEED_MORE_RESIDENTIAL] = 'More residential zones needed'\nmessageText[Messages.NEED_MORE_RAILS] = 'Inadequate rail system'\nmessageText[Messages.NEED_MORE_ROADS] = 'More roads required'\nmessageText[Messages.NEED_POLICE_STATION] =\n  'Citizens demand a Police Department'\nmessageText[Messages.NEED_SEAPORT] = 'Industry requires a Sea Port'\nmessageText[Messages.NEED_STADIUM] = 'Residents demand a Stadium'\nmessageText[Messages.ROAD_NEEDS_FUNDING] =\n  'Roads deteriorating, due to lack of funds'\nmessageText[Messages.POLICE_NEEDS_FUNDING] = 'Police departments need funding'\nmessageText[Messages.WELCOME] = 'Welcome to micropolisJS'\nmessageText[Messages.BLACKOUTS_REPORTED] =\n  'Brownouts, build another Power Plant'\nmessageText[Messages.EARTHQUAKE] = 'Major earthquake reported !!'\nmessageText[Messages.EXPLOSION_REPORTED] = 'Explosion detected '\nmessageText[Messages.FLOODING_REPORTED] = 'Flooding reported !'\nmessageText[Messages.FIRE_REPORTED] = 'Fire reported '\nmessageText[Messages.HEAVY_TRAFFIC] = 'Heavy traffic reported'\nmessageText[Messages.HELICOPTER_CRASHED] = 'A helicopter crashed '\nmessageText[Messages.HIGH_CRIME] = 'Crime very high'\nmessageText[Messages.HIGH_POLLUTION] = 'Pollution very high'\nmessageText[Messages.MONSTER_SIGHTED] = 'A Monster has been sighted !'\nmessageText[Messages.NO_MONEY] = 'YOUR CITY HAS GONE BROKE'\nmessageText[Messages.NOT_ENOUGH_POWER] =\n  'Blackouts reported: insufficient power capacity'\nmessageText[Messages.NUCLEAR_MELTDOWN] = 'A Nuclear Meltdown has occurred !!'\nmessageText[Messages.PLANE_CRASHED] = 'A plane has crashed '\nmessageText[Messages.SHIP_CRASHED] = 'Shipwreck reported '\nmessageText[Messages.TAX_TOO_HIGH] = 'Citizens upset. The tax rate is too high'\nmessageText[Messages.TORNADO_SIGHTED] = 'Tornado reported !'\nmessageText[Messages.TRAFFIC_JAMS] = 'Frequent traffic jams reported'\nmessageText[Messages.TRAIN_CRASHED] = 'A train crashed '\nmessageText[Messages.REACHED_CAPITAL] = 'Population has reached 50,000'\nmessageText[Messages.REACHED_CITY] = 'Population has reached 10,000'\nmessageText[Messages.REACHED_MEGALOPOLIS] = 'Population has reached 500,000'\nmessageText[Messages.REACHED_METROPOLIS] = 'Population has reached 100,000'\nmessageText[Messages.REACHED_TOWN] = 'Population has reached 2,000'\n\nconst Text = {\n  badMessages,\n  cityClass,\n  crimeStrings,\n  densityStrings,\n  gameLevel,\n  goodMessages,\n  landValueStrings,\n  messageText,\n  months,\n  neutralMessages,\n  problems,\n  pollutionStrings,\n  rateStrings,\n  toolMessages,\n  zoneTypes,\n}\n\nexport { Text }\n","import { ModalWindow } from './modalWindow'\nimport { EVAL_WINDOW_CLOSED } from '../messages'\nimport { Text } from '../messages/text'\n\nvar EvaluationWindow = ModalWindow(function () {\n  $(evaluationFormID).on('submit', submit.bind(this))\n})\n\nvar evaluationFormID = '#evalButtons'\nvar evaluationOKID = '#evalOK'\n\nEvaluationWindow.prototype.close = function () {\n  this._emitEvent(EVAL_WINDOW_CLOSED)\n  this._toggleDisplay()\n}\n\nvar submit = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nEvaluationWindow.prototype._populateWindow = function (evaluation) {\n  $('#evalYes').text(evaluation.cityYes)\n  $('#evalNo').text(100 - evaluation.cityYes)\n  for (var i = 0; i < 4; i++) {\n    var problemNo = evaluation.getProblemNumber(i)\n    if (problemNo !== null) {\n      var text = Text.problems[problemNo]\n      $('#evalProb' + (i + 1)).text(text)\n      $('#evalProb' + (i + 1)).show()\n    } else {\n      $('#evalProb' + (i + 1)).hide()\n    }\n  }\n\n  $('#evalPopulation').text(evaluation.cityPop)\n  $('#evalMigration').text(evaluation.cityPopDelta)\n  $('#evalValue').text(evaluation.cityAssessedValue)\n  $('#evalLevel').text(Text.gameLevel[evaluation.gameLevel])\n  $('#evalClass').text(Text.cityClass[evaluation.cityClass])\n  $('#evalScore').text(evaluation.cityScore)\n  $('#evalScoreDelta').text(evaluation.cityScoreDelta)\n}\n\nEvaluationWindow.prototype.open = function (evaluation) {\n  this._populateWindow(evaluation)\n  this._toggleDisplay()\n}\n\nexport { EvaluationWindow }\n","function TileHistory() {\n  this.clear()\n}\n\nconst toKey = function (x, y) {\n  return [x, y].join(',')\n}\n\nTileHistory.prototype.clear = function () {\n  this.data = {}\n}\n\nTileHistory.prototype.getTile = function (x, y) {\n  const key = toKey(x, y)\n  return this.data[key]\n}\n\nTileHistory.prototype.setTile = function (x, y, value) {\n  const key = toKey(x, y)\n  this.data[key] = value\n}\n\nexport { TileHistory }\n","import { ANIMBIT, BIT_MASK, POWERBIT, ZONEBIT } from './tileFlags'\nimport { TileHistory } from './tileHistory'\nimport {\n  LASTTINYEXP,\n  LIGHTNINGBOLT,\n  TILE_COUNT,\n  TILE_INVALID,\n} from './tileValues'\nimport { TileUtils } from './tileUtils'\n\nclass AnimationManager {\n  constructor(map, animationPeriod, blinkPeriod) {\n\n    animationPeriod = animationPeriod || 220 // 250, 50\n    blinkPeriod = blinkPeriod || 600\n\n    this._map = map\n    this.animationPeriod = animationPeriod\n    this.lastAnimation = new Date(1970, 1, 1)\n    this.lastBlink = new Date(1970, 1, 1)\n    this.blinkPeriod = blinkPeriod\n    this.shouldBlink = false\n\n    // When painting we keep track of what frames\n    // have been painted at which map coordinates so we can\n    // consistently display the correct frame even as the\n    // canvas moves\n    this._lastPainted = null\n    this._currentPainted = null\n\n    this._data = []\n    this.initArray()\n    this.registerAnimations()\n  }\n\n\n  initArray() {\n    // Map all tiles to their own value in case we ever\n    // look up a tile that is not animated\n    for (let i = 0; i < TILE_COUNT; i++) this._data[i] = i\n  }\n\n  inSequence(tileValue, lastValue) {\n  // It is important that we use the base value as the starting point\n  // rather than the last painted value: base values often don't recur\n  // in their sequences\n    const seen = [tileValue]\n    let current = this._data[tileValue]\n\n    while (seen.indexOf(current) === -1) {\n      if (current === lastValue) return true\n\n      seen.push(current)\n      current = this._data[current]\n    }\n    return false\n  }\n\n  // Takes an array of tile values, and overwrites with the correct tile after factoring in animations and\n  // power blinks. offsetX and offsetY represent the offset into the map the tileArray represents; xBound and\n  // yBound note how far to iterate (the idea being that GameCanvas recycles its tile value array)\n  getTiles(\n    tileValues,\n    offsetX,\n    offsetY,\n    xBound,\n    yBound,\n    isPaused\n  ) {\n    isPaused = isPaused || false\n\n    let shouldChangeAnimation = false\n    const d = new Date()\n\n    let shouldBlink = this.shouldBlink\n    if (d - this.lastBlink > this.blinkPeriod) {\n      shouldBlink = this.shouldBlink = !this.shouldBlink\n      this.lastBlink = d\n    }\n\n    if (!isPaused) {\n      if (d - this.lastAnimation > this.animationPeriod) {\n        shouldChangeAnimation = true\n        this.lastAnimation = d\n      }\n    }\n\n    const newPainted =\n    this._currentPainted === null ? new TileHistory() : this._currentPainted\n\n    for (let y = 0; y < yBound; y++) {\n      for (let x = 0; x < xBound; x++) {\n        const mapX = x + offsetX\n        const mapY = y + offsetY\n        const index = y * xBound + x\n\n        if (\n          mapX < 0\n        || mapX >= this._map.width\n        || mapY < 0\n        || mapY >= this._map.height\n        ) { continue }\n\n        const tile = tileValues[index]\n        if (tile === TILE_INVALID) continue\n\n        if (shouldBlink && tile & ZONEBIT && !(tile & POWERBIT)) {\n          tileValues[index] = LIGHTNINGBOLT\n          continue\n        }\n\n        if (!(tile & ANIMBIT)) {\n          tileValues[index] = tile & BIT_MASK\n          continue\n        }\n\n        const tileValue = tile & BIT_MASK\n        let newTile = TILE_INVALID\n        var last\n        if (this._lastPainted) last = this._lastPainted.getTile(x, y)\n\n        if (shouldChangeAnimation) {\n        // Have we painted any of this sequence before? If so, paint the next tile\n          if (last && this.inSequence(tileValue, last)) {\n          // To ensure demolition explosions are animated smoothly, we adjust the map here when we have run to the\n          // end of the animation. We would otherwise have to wait on MapScan running and picking up the explosion\n          // tile, which may not happen for several frames\n            if (last === LASTTINYEXP) {\n              this._map.setTo(mapX, mapY, TileUtils.randomRubble())\n              newTile = this._map.getTileValue(mapX, mapY)\n            } else {\n              newTile = this._data[last]\n            }\n          } else {\n          // Either we haven't painted anything here before, or the last tile painted\n          // there belongs to a different tile's animation sequence\n            newTile = this._data[tileValue]\n          }\n        } else {\n        // Have we painted any of this sequence before? If so, paint the same tile\n          if (last && this.inSequence(tileValue, last)) newTile = last\n        }\n\n        if (newTile === TILE_INVALID) {\n          tileValues[index] = tileValue\n          continue\n        }\n\n        tileValues[index] = newTile\n        newPainted.setTile(x, y, newTile)\n      }\n    }\n\n    // Rotate tile histories\n    const temp = this._lastPainted\n    this._lastPainted = newPainted\n\n    if (temp !== null) temp.clear()\n    this._currentPainted = temp\n  }\n\n  registerSingleAnimation(arr) {\n    for (let i = 1; i < arr.length; i++) this._data[arr[i - 1]] = arr[i]\n  }\n\n  registerAnimations() {\n    this.registerSingleAnimation([56, 57, 58, 59, 60, 61, 62, 63, 56])\n    this.registerSingleAnimation([80, 128, 112, 96, 80])\n    this.registerSingleAnimation([81, 129, 113, 97, 81])\n    this.registerSingleAnimation([82, 130, 114, 98, 82])\n    this.registerSingleAnimation([83, 131, 115, 99, 83])\n    this.registerSingleAnimation([84, 132, 116, 100, 84])\n    this.registerSingleAnimation([85, 133, 117, 101, 85])\n    this.registerSingleAnimation([86, 134, 118, 102, 86])\n    this.registerSingleAnimation([87, 135, 119, 103, 87])\n    this.registerSingleAnimation([88, 136, 120, 104, 88])\n    this.registerSingleAnimation([89, 137, 121, 105, 89])\n    this.registerSingleAnimation([90, 138, 122, 106, 90])\n    this.registerSingleAnimation([91, 139, 123, 107, 91])\n    this.registerSingleAnimation([92, 140, 124, 108, 92])\n    this.registerSingleAnimation([93, 141, 125, 109, 93])\n    this.registerSingleAnimation([94, 142, 126, 110, 94])\n    this.registerSingleAnimation([95, 143, 127, 111, 95])\n    this.registerSingleAnimation([144, 192, 176, 160, 144])\n    this.registerSingleAnimation([145, 193, 177, 161, 145])\n    this.registerSingleAnimation([146, 194, 178, 162, 146])\n    this.registerSingleAnimation([147, 195, 179, 163, 147])\n    this.registerSingleAnimation([148, 196, 180, 164, 148])\n    this.registerSingleAnimation([149, 197, 181, 165, 149])\n    this.registerSingleAnimation([150, 198, 182, 166, 150])\n    this.registerSingleAnimation([151, 199, 183, 167, 151])\n    this.registerSingleAnimation([152, 200, 184, 168, 152])\n    this.registerSingleAnimation([153, 201, 185, 169, 153])\n    this.registerSingleAnimation([154, 202, 186, 170, 154])\n    this.registerSingleAnimation([155, 203, 187, 171, 155])\n    this.registerSingleAnimation([156, 204, 188, 172, 156])\n    this.registerSingleAnimation([157, 205, 189, 173, 157])\n    this.registerSingleAnimation([158, 206, 190, 174, 158])\n    this.registerSingleAnimation([159, 207, 191, 175, 159])\n    this.registerSingleAnimation([\n      621, 852, 853, 854, 855, 856, 857, 858, 859, 852,\n    ])\n    this.registerSingleAnimation([641, 884, 885, 886, 887, 884])\n    this.registerSingleAnimation([644, 888, 889, 890, 891, 888])\n    this.registerSingleAnimation([649, 892, 893, 894, 895, 892])\n    this.registerSingleAnimation([650, 896, 897, 898, 899, 896])\n    this.registerSingleAnimation([676, 900, 901, 902, 903, 900])\n    this.registerSingleAnimation([677, 904, 905, 906, 907, 904])\n    this.registerSingleAnimation([686, 908, 909, 910, 911, 908])\n    this.registerSingleAnimation([689, 912, 913, 914, 915, 912])\n    this.registerSingleAnimation([747, 916, 917, 918, 919, 916])\n    this.registerSingleAnimation([748, 920, 921, 922, 923, 920])\n    this.registerSingleAnimation([751, 924, 925, 926, 927, 924])\n    this.registerSingleAnimation([752, 928, 929, 930, 931, 928])\n    this.registerSingleAnimation([820, 952, 953, 954, 955, 952])\n    this.registerSingleAnimation([832, 833, 834, 835, 836, 837, 838, 839, 832])\n    this.registerSingleAnimation([840, 841, 842, 843, 840])\n    this.registerSingleAnimation([844, 845, 846, 847, 848, 849, 850, 851, 844])\n    this.registerSingleAnimation([860, 861, 862, 863, 864, 865, 866, 867])\n    this.registerSingleAnimation([932, 933, 934, 935, 936, 937, 938, 939, 932])\n    this.registerSingleAnimation([940, 941, 942, 943, 944, 945, 946, 947, 940])\n  }\n}\n\nexport { AnimationManager }\n","const MouseBox = {\n  draw: function (c, pos, width, height, options) {\n    const lineWidth = options.lineWidth || 3.0\n    const strokeStyle = options.colour || 'yellow'\n    const shouldOutline =\n      ('outline' in options && options.outline === true) || false\n\n    let startModifier = -1\n    let endModifier = 1\n    if (!shouldOutline) {\n      startModifier = 1\n      endModifier = -1\n    }\n\n    const startX = pos.x + (startModifier * lineWidth) / 2\n    width = width + endModifier * lineWidth\n    const startY = pos.y + (startModifier * lineWidth) / 2\n    height = height + endModifier * lineWidth\n\n    const ctx = c.getContext('2d')\n    ctx.lineWidth = lineWidth\n    ctx.strokeStyle = strokeStyle\n    ctx.strokeRect(startX, startY, width, height)\n  },\n}\n\nexport { MouseBox }\n","import { AnimationManager } from './tiles/animationManager'\nimport { GameMap } from './map/gameMap'\nimport { MiscUtils } from './utils'\nimport { MouseBox } from './mouseBox'\nimport { Position } from './map/position'\nimport { TileSet } from './tiles/tileSet'\nimport { TILE_INVALID } from './tiles/tileValues'\n\nclass GameCanvas {\n\n  static DEFAULT_ID = 'microcity-canvas'\n\n  constructor(id, parentNode, zoomRatio = 1.4) {\n\n    // if (!(this instanceof GameCanvas)) { return new GameCanvas(id, parentNode, width, height) }\n\n    if (arguments.length < 1) {\n      throw new Error('Attempt to construct a GameCanvas with no parameters')\n    }\n\n    // Argument shuffling\n    if (parentNode === undefined) {\n    // No ID supplied\n      parentNode = id\n      id = GameCanvas.DEFAULT_ID\n    }\n\n    if (typeof parentNode === 'string') {\n      const orig = parentNode\n      parentNode = $(MiscUtils.normaliseDOMid(parentNode))\n      parentNode = parentNode.length === 0 ? null : parentNode[0]\n      if (parentNode === null) throw new Error('Node ' + orig + ' not found')\n    }\n\n    this.parentNode = parentNode\n    this.zoomRatio = zoomRatio\n\n    this._canvas = document.createElement('canvas')\n    this._canvas.id = id\n    this.ctx = this._canvas.getContext('2d')\n\n    // The canvas is assumed to fill its container on-screen\n    const rect = parentNode.getBoundingClientRect()\n\n    this._canvas.width = rect.width\n    this._canvas.height = rect.height\n\n    this._canvas.style.margin = '0'\n    this._canvas.style.padding = '0'\n    this._canvas.style.transform = `scale(${zoomRatio})`\n    this._canvas.style.imageRendering = 'pixelated'\n\n    this._pendingTileSet = null\n\n    // Remove any existing element with the same id\n    const current = document.getElementById(id)\n    if (current !== null) {\n      if (current.parentNode === parentNode) {\n        parentNode.replaceChild(this._canvas, current)\n      } else throw new Error('ID ' + id + ' already exists in document!')\n    } else parentNode.appendChild(this._canvas)\n\n    this.ready = false\n  }\n\n  init(\n    map,\n    tileSet,\n    spriteSheet,\n    animationManager\n  ) {\n\n    if (arguments.length < 3) {\n      throw new Error(\n        'GameCanvas constructor called with too few arguments '\n        + [].toString.apply(arguments)\n      )\n    }\n\n    if (!tileSet.isValid) throw new Error('TileSet not ready!')\n\n    this._spriteSheet = spriteSheet\n    this._tileSet = tileSet\n    const w = this._tileSet.tileWidth\n\n    this._map = map\n    this.animationManager = animationManager || new AnimationManager(map)\n\n    if (this._canvas.width < w || this._canvas.height < w) {\n      throw new Error('Canvas too small!')\n    }\n\n    // Whether to allow off-map scrolling\n    this._allowScrolling = true\n\n    this.reset()\n\n    const onResize = function (e) {\n      this._pendingDimensionChange = true\n    }.bind(this)\n\n    // Recompute canvas dimensions on resize\n    window.addEventListener('resize', onResize, false)\n  }\n\n  reset(map) {\n\n    if (map) this._map = map\n    // An array indexed by tile offset containing the tileValue last painted there\n    this._lastPaintedTiles = null\n    this._currentPaintedTiles = [] // for future use\n\n    // Last time we painted, the canvas was this many tiles wide and tall\n    this._lastPaintedWidth = -1\n    this._lastPaintedHeight = -1\n\n    // Last time we painted, the canvas was this wide and tall in pixels (determines whether we\n    // can safely call putImageData)\n    this._lastCanvasWidth = -1\n    this._lastCanvasHeight = -1\n\n    // After painting tiles, we store the image data here before painting sprites and mousebox\n    this._lastCanvasData = null\n\n    this._calculateDimensions()\n\n    // Have the dimensions changed since the last paint?\n    this._pendingDimensionChange = false\n\n    // Order is important here. ready must be set before the call to centreOn below\n    this.ready = true\n    this.centreOn(\n      Math.floor(this._map.width / 2),\n      Math.floor(this._map.height / 2)\n    )\n\n    this.paint(null, null)\n  }\n\n  setZoom(zoomRatio) {\n    this.zoomRatio = zoomRatio\n    this._canvas.style.transform = `scale(${zoomRatio})`\n    this.reset()\n  }\n\n  zoomIn() {\n    let zoomRatio = this.zoomRatio\n    if (zoomRatio >= 1.7) return\n    zoomRatio += 0.2\n    this.setZoom(zoomRatio)\n  }\n\n  zoomOut() {\n    let zoomRatio = this.zoomRatio\n    if (zoomRatio <= 1.1) return // TODO: Below 1 zoom\n    zoomRatio -= 0.2\n    this.setZoom(zoomRatio)\n  }\n\n  _calculateDimensions(force) {\n\n    force = force || false\n\n    // The canvas is assumed to fill its container on-screen\n    const canvasWidth = this.canvasWidth =\n      this._canvas.parentNode.clientWidth\n    const canvasHeight = this.canvasHeight =\n      this._canvas.parentNode.clientHeight\n\n    if (\n      canvasHeight === this._lastCanvasHeight\n    && canvasWidth === this._lastCanvasWidth\n    && !force\n    ) { return }\n\n    this._canvas.width = canvasWidth\n    this._canvas.height = canvasHeight\n\n    const w = this._tileSet.tileWidth\n\n    // How many tiles fit?\n    this._wholeTilesInViewX = Math.floor(canvasWidth / w)\n    this._wholeTilesInViewY = Math.floor(canvasHeight / w)\n    this._totalTilesInViewX = Math.ceil(canvasWidth / w)\n    this._totalTilesInViewY = Math.ceil(canvasHeight / w)\n\n    if (this._allowScrolling) {\n\n      // The min/max properties denote how far we will let the canvas' origin move: the map\n      // should be visible in at least half the canvas\n\n      this.minX = 0 // - Math.ceil(Math.floor(canvasWidth / w) / 2)\n      this.maxX = this._map.width - 1\n      // - this._wholeTilesInViewX\n      - Math.ceil(Math.floor(canvasWidth / w) / 2) // Original\n      // Subtract half of canvas based on zoomed tile\n      - Math.floor(Math.floor(canvasWidth / (w * this.zoomRatio)) / 2)\n\n      this.minY = 0 // - Math.ceil(Math.floor(canvasHeight / w) / 2)\n      this.maxY = this._map.height - 1\n      // - this._wholeTilesInViewY\n      - Math.ceil(Math.floor(canvasHeight / w) / 2) // Original\n      // Subtract half of canvas based on zoomed tile\n      - Math.floor(Math.floor(canvasHeight / (w * this.zoomRatio)) / 2)\n\n      // console.log('max', [this.maxX, this.maxY])\n\n    } else {\n\n      this.minX = 0\n      this.minY = 0\n      this.maxX = this._map.width - this._totalTilesInViewX\n      this.maxY = this._map.height - this._totalTilesInViewY\n    }\n\n    this._pendingDimensionChange = true\n  }\n\n  // NOTE: Canvas must be visible when this is called\n  disallowOffMap() {\n    this._allowScrolling = false\n    this._lastPaintedTiles = null\n    this._calculateDimensions(true)\n  }\n\n  moveNorth() {\n    if (!this.ready) return\n    if (this._originY > this.minY) this._originY--\n  }\n\n  moveEast() {\n    if (!this.ready) return\n    if (this._originX < this.maxX) this._originX++\n  }\n\n  moveSouth() {\n    if (!this.ready) return\n    if (this._originY < this.maxY) this._originY++\n  }\n\n  moveWest() {\n    if (!this.ready) return\n    if (this._originX > this.minX) this._originX--\n  }\n\n  moveTo(x, y) {\n    if (arguments.length < 1) { throw new Error('GameCanvas moveTo called with no arguments') }\n\n    if (!this.ready) return\n\n    if (x < this.minX || x > this.maxX || y < this.minY || y > this.maxY) { throw new Error('Coordinates out of bounds') }\n\n    this._originX = x\n    this._originY = y\n  }\n\n  centreOn(x, y) {\n    if (arguments.length < 1) { throw new Error('GameCanvas centreOn called with no arguments') }\n\n    if (!this.ready) throw new Error('Not ready!')\n\n    if (y === undefined) {\n      y = x.y\n      x = x.x\n    }\n\n    // XXX Need to fix so that centres on best point if bounds fall outside\n    // XXX min/max\n    let originX = Math.floor(x) - Math.ceil(this._wholeTilesInViewX / 2)\n    let originY = Math.floor(y) - Math.ceil(this._wholeTilesInViewY / 2)\n\n    if (originX > this.maxX) originX = this.maxX\n    if (originX < this.minX) originX = this.minX\n    if (originY > this.maxY) originY = this.maxY\n    if (originY < this.minY) originY = this.minY\n\n    this._originX = originX\n    this._originY = originY\n  }\n\n  getTileOrigin() {\n    const e = new Error('Not ready!')\n\n    if (!this.ready) throw e\n\n    return { x: this._originX, y: this._originY }\n  }\n\n  getMaxTile() {\n    const e = new Error('Not ready!')\n\n    if (!this.ready) throw e\n\n    return {\n      x: this._originX + this._totalTilesInViewX - 1,\n      y: this._originY + this._totalTilesInViewY - 1,\n    }\n  }\n\n  canvasCoordinateToTileOffset(x, y) {\n    if (arguments.length < 2) {\n      throw new Error(\n        'GameCanvas canvasCoordinateToTileOffset called with too few arguments '\n        + [].toString.apply(arguments)\n      )\n    }\n\n    if (!this.ready) throw new Error('Not ready!')\n\n    return {\n      x: Math.floor(x / this._tileSet.tileWidth / this.zoomRatio),\n      y: Math.floor(y / this._tileSet.tileWidth / this.zoomRatio),\n    }\n  }\n\n  canvasCoordinateToTileCoordinate(x, y) {\n    if (arguments.length < 2) {\n      throw new Error(\n        'GameCanvas canvasCoordinateToTileCoordinate called with too few arguments '\n        + [].toString.apply(arguments)\n      )\n    }\n\n    if (!this.ready) throw new Error('Not ready!')\n\n    const relativeWidth = this.canvasWidth * this.zoomRatio\n    const relativeHeight = this.canvasHeight * this.zoomRatio\n    if (x >= relativeWidth || y >= relativeHeight) return null\n\n    const tileX = this._originX + Math.floor(x / this._tileSet.tileWidth / this.zoomRatio)\n    const tileY = this._originY + Math.floor(y / this._tileSet.tileWidth / this.zoomRatio)\n\n    // console.log([x, y], [tileX, tileY])\n\n    return {\n      x: tileX,\n      y: tileY,\n    }\n  }\n\n  canvasCoordinateToPosition(x, y) {\n    if (arguments.length < 2) {\n      throw new Error(\n        'GameCanvas canvasCoordinateToPosition called with too few arguments '\n        + [].toString.apply(arguments)\n      )\n    }\n\n    if (!this.ready) throw new Error('Not ready!')\n\n    const relativeWidth = this.canvasWidth * this.zoomRatio\n    const relativeHeight = this.canvasHeight * this.zoomRatio\n    if (x >= relativeWidth || y >= relativeHeight) return null\n\n    x = this._originX + Math.floor(x / this._tileSet.tileWidth / this.zoomRatio)\n    y = this._originY + Math.floor(y / this._tileSet.tileWidth / this.zoomRatio)\n\n    if (x < 0 || x >= this._map.width || y < 0 || y >= this._map.height) { return null }\n\n    return new Position(x, y)\n  }\n\n  positionToCanvasCoordinate(p) {\n    if (arguments.length < 1) {\n      throw new Error(\n        'GameCanvas positionToCanvasCoordinate called with too few arguments '\n        + [].toString.apply(arguments)\n      )\n    }\n\n    return this.tileToCanvasCoordinate(p)\n  }\n\n  tileToCanvasCoordinate(x, y) {\n    if (arguments.length < 1) {\n      throw new Error(\n        'GameCanvas tileToCanvasCoordinate  called with too few arguments '\n        + [].toString.apply(arguments)\n      )\n    }\n\n    if (!this.ready) throw new Error('Not ready!')\n\n    if (y === undefined) {\n      y = x.y\n      x = x.x\n    }\n\n    if (\n      x === undefined\n    || y === undefined\n    || x < this.minX\n    || y < this.minY\n    || x > this.maxX + this._totalTilesInViewX - 1\n    || y > this.maxY + this._totalTilesInViewY - 1\n    ) { throw e }\n\n    if (\n      x < this._originX\n    || x >= this._originX + this._totalTilesInViewX\n    || y < this._originY\n    || y >= this._originY + this._totalTilesInViewY\n    ) { return null }\n\n    return {\n      x: (x - this._originX) * this._tileSet.tileWidth * this.zoomRatio,\n      y: (y - this._originY) * this._tileSet.tileWidth * this.zoomRatio,\n    }\n  }\n\n  changeTileSet(tileSet) {\n    if (!this.ready) throw new Error('Not ready!')\n\n    if (!tileSet.isValid) throw new Error('new tileset not loaded')\n\n    this._pendingTileSet = tileSet\n  }\n\n  _screenshot(onlyVisible) {\n    if (onlyVisible) return this._canvas.toDataURL()\n\n    const tempCanvas = document.createElement('canvas')\n    tempCanvas.width = this._map.width * this._tileSet.tileWidth\n    //* this.zoomRatio\n    tempCanvas.height = this._map.height * this._tileSet.tileWidth\n    //* this.zoomRatio\n\n    for (let x = 0; x < this._map.width; x++) {\n      for (let y = 0; y < this._map.height; y++) {\n        this._paintOne(this.ctx, this._map.getTileValue(x, y), x, y)\n      }\n    }\n    return tempCanvas.toDataURL()\n  }\n\n  screenshotMap() {\n    return this._screenshot(false)\n  }\n\n  screenshotVisible() {\n    return this._screenshot(true)\n  }\n\n  shoogle() {\n  // TODO Earthquakes\n  }\n\n  _processSprites(ctx, spriteList) {\n\n    const spriteDamage = []\n    const tileWidth = this._tileSet.tileWidth\n\n    for (let i = 0, l = spriteList.length; i < l; i++) {\n      const sprite = spriteList[i]\n      try {\n        ctx.drawImage(\n          this._spriteSheet,\n          (sprite.frame - 1) * 48,\n          (sprite.type - 1) * 48,\n          sprite.width,\n          sprite.width,\n          sprite.x + sprite.xOffset - this._originX * 16,\n          sprite.y + sprite.yOffset - this._originY * 16,\n          sprite.width,\n          sprite.width\n        )\n      } catch (e) {\n      // throw new Error\n        console.warn(\n          'Failed to draw sprite '\n          + sprite.type\n          + ' frame '\n          + sprite.frame\n          + ' at '\n          + sprite.x\n          + ', '\n          + sprite.y\n        )\n        continue\n      }\n\n      // sprite values are in pixels\n      spriteDamage.push({\n        x: Math.floor(\n          (sprite.x + sprite.xOffset - this._originX * 16) / tileWidth\n        ),\n        xBound: Math.ceil(\n          (sprite.x + sprite.xOffset + sprite.width - this._originX * 16)\n          / tileWidth\n        ),\n        y: Math.floor(\n          (sprite.y + sprite.yOffset - this._originY * 16) / tileWidth\n        ),\n        yBound: Math.ceil(\n          (sprite.y + sprite.yOffset + sprite.height - this._originY * 16)\n          / tileWidth\n        ),\n      })\n    }\n\n    return spriteDamage\n  }\n\n  // Draws a mouse outline around the selected tiles. The mouse object is assumed to contain x and y properties which\n  // express the coordinate of the top-left of the box in terms of the number of tiles from the top left. It should\n  // also contain a width and height that are again expressed in terms of the number of tiles. The colour property\n  // naturally defines the colour of the painted box.\n  _processMouse(mouse) {\n\n    const damage = { x: 0, xBound: 0, y: 0, yBound: 0 }\n\n    if (mouse.width === 0 || mouse.height === 0) return\n\n    // For outlines bigger than 2x2 (in either dimension) assume the mouse is offset by\n    // one tile\n    let mouseX = mouse.x\n    let mouseY = mouse.y\n    const mouseWidth = mouse.width\n    const mouseHeight = mouse.height\n    const options = { colour: mouse.colour, outline: true }\n\n    if (mouseWidth > 2) mouseX -= 1\n    if (mouseHeight > 2) mouseY -= 1\n\n    const offMap =\n      (this._originX + mouseX < 0\n        && this._originX + mouseX + mouseWidth <= 0)\n      || (this._originY + mouseY < 0\n        && this._originY + mouseY + mouseHeight <= 0)\n      || this._originX + mouseX >= this._map.width\n      || this._originY + mouseY >= this._map.height\n\n    if (offMap) {\n      damage.x = damage.xBound = mouseX\n      damage.y = damage.yBound = mouseY\n      return damage\n    }\n\n    const pos = {\n      x: mouseX * this._tileSet.tileWidth,\n      y: mouseY * this._tileSet.tileWidth,\n    }\n    const width = mouseWidth * this._tileSet.tileWidth\n    const height = mouseHeight * this._tileSet.tileWidth\n\n    MouseBox.draw(this._canvas, pos, width, height, options)\n\n    // Return an object representing tiles that were damaged that will need redrawn\n    // Note that we must take an extra tile either side to account for the outline\n    damage.x = mouseX - 1\n    damage.xBound = mouseX + mouseWidth + 2\n    damage.y = mouseY - 1\n    damage.yBound = mouseY + mouseWidth + 2\n    return damage\n  }\n\n\n  _paintVoid(ctx, x, y) {\n    const w = this._tileSet.tileWidth\n    ctx.fillStyle = 'black'\n    ctx.fillRect(x * w, y * w, w, w)\n  }\n\n  _paintOne(ctx, tileVal, x, y) {\n    if (tileVal === TILE_INVALID) {\n      this._paintVoid(ctx, x, y)\n      return\n    }\n\n    const src = this._tileSet[tileVal]\n    try {\n      ctx.drawImage(\n        src,\n        x * this._tileSet.tileWidth,\n        y * this._tileSet.tileWidth\n      )\n    } catch (e) {\n      const mapX = this._originX + x\n      const mapY = this._originY + y\n      throw new Error(\n        'Failed to draw tile '\n        + tileVal\n        + ' at '\n        + x\n        + ', '\n        + y\n        + ' (map '\n        + mapX\n        + ', '\n        + mapY\n        + ' tile '\n        + (this._map.testBounds(mapX, mapY)\n          ? this._map.getTileValue(mapX, mapY)\n          : '?? (Out of bounds)')\n        + ')'\n      )\n    }\n  }\n\n  _paintTiles(ctx, paintData) {\n    let x, y, row, index\n    const lastPaintedTiles = this._lastPaintedTiles\n\n    const width = this._totalTilesInViewX\n    const height = this._totalTilesInViewY\n\n    if (lastPaintedTiles !== null) {\n    // We have painted the canvas before. There are 3 possibilities:\n    //  - The canvas is exactly the same size as last time we painted\n    //  - The canvas has grown\n    //  - The canvas has shrunk\n    //\n    // In any case, we want to find the minimal area that was onscreen last paint\n    // and this paint, and iterate over those tiles, repainting where necessary\n      const xBound = Math.min(this._lastPaintedWidth, width)\n      const yBound = Math.min(this._lastPaintedHeight, height)\n\n      // Loop over the common area that we painted last time. Compare the current value against what was there last time\n      for (y = 0; y < yBound; y++) {\n        for (x = 0; x < xBound; x++) {\n          index = y * xBound + x\n          if (lastPaintedTiles[index] === paintData[index]) continue\n\n          // Tile is different: repaint\n          this._paintOne(ctx, paintData[index], x, y)\n        }\n      }\n\n      // Do we have more tiles than before? Paint the extra width and/or the extra height\n      if (width > this._lastPaintedWidth) {\n        for (y = 0; y < height; y++) {\n          for (x = this._lastPaintedWidth; x < width; x++) {\n            index = y * width + x\n            this._paintOne(ctx, paintData[index], x, y)\n          }\n        }\n      }\n\n      if (height > this._lastPaintedHeight) {\n        for (y = this._lastPaintedHeight; y < height; y++) {\n          for (x = 0; x < width; x++) {\n            index = y * width + x\n            this._paintOne(ctx, paintData[index], x, y)\n          }\n        }\n      }\n    } else {\n    // Full paint\n      for (y = 0; y < height; y++) {\n        for (x = 0; x < width; x++) {\n          index = y * width + x\n          this._paintOne(ctx, paintData[index], x, y)\n        }\n      }\n    }\n\n    // Stash data\n    this._lastPaintedWidth = width\n    this._lastPaintedHeight = height\n\n    // Rotate tile data\n    const temp = this._lastPaintedTiles\n    this._lastPaintedTiles = paintData\n    this._currentPaintedTiles = temp\n  }\n\n  paint(mouse, sprites, isPaused) {\n\n    let i, l, x, y, row, damaged, xBound, yBound, index\n\n    if (!this.ready) {\n    // throw new Error('Not ready!')\n      return\n    }\n\n    let lastPaintedTiles = this._lastPaintedTiles\n\n    // Recompute our dimensions if there has been a resize since last paint\n    if (this._pendingDimensionChange || this._pendingTileSet) {\n\n      this._calculateDimensions()\n      this._pendingDimensionChange = false\n\n      // Change tileSet if necessary\n      if (this._pendingTileSet !== null) this._tileSet = this._pendingTileSet\n\n      // If the dimensions or tileset has changed, set each entry in lastPaintedTiles to a bogus value to force a\n      // repaint. Note: we use -2 as our bogus value; -1 would paint the black void\n      if (\n        this._pendingTileSet\n        || this.canvasWidth !== this._lastCanvasWidth\n        || this.canvasHeight !== this._lastCanvasHeight\n      ) {\n\n        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n\n        for (\n          y = 0, l = lastPaintedTiles !== null ? lastPaintedTiles.length : 0;\n          y < l;\n          y++\n        ) { lastPaintedTiles[y] = -2 }\n\n      }\n\n      this._pendingTileSet = null\n    }\n\n    const paintWidth = this._totalTilesInViewX\n    const paintHeight = this._totalTilesInViewY\n\n    // Fill an array with the values we need to paint\n    const tileValues = this._map.getTileValuesForPainting(\n      this._originX,\n      this._originY,\n      paintWidth,\n      paintHeight,\n      this._currentPaintedTiles\n    )\n\n    // Adjust for animations\n    this.animationManager.getTiles(\n      tileValues,\n      this._originX,\n      this._originY,\n      paintWidth,\n      paintHeight,\n      isPaused\n    )\n\n    this._paintTiles(this.ctx, tileValues)\n    // The _paintTiles call updates this._lastPaintedTiles. Update our cached copy\n    lastPaintedTiles = this._lastPaintedTiles\n\n    // Stash various values for next paint\n    this._lastCanvasWidth = this.canvasWidth\n    this._lastCanvasHeight = this.canvasHeight\n\n    if (!mouse && !sprites) {\n      return\n    }\n\n    if (mouse) {\n\n      damaged = this._processMouse(mouse)\n\n      for (\n        y = Math.max(0, damaged.y),\n        yBound = Math.min(paintHeight, damaged.yBound);\n        y < yBound;\n        y++\n      ) {\n        for (\n          x = Math.max(0, damaged.x),\n          xBound = Math.min(paintWidth, damaged.xBound);\n          x < xBound;\n          x++\n        ) {\n          index = [y * paintWidth + x]\n          // Note: we can't use TILE_INVALID (-1) as that in some sense is a valid tile for the void!\n          lastPaintedTiles[index] = -2\n        }\n      }\n    }\n\n    if (sprites) {\n\n      damaged = this._processSprites(this.ctx, sprites)\n\n      for (i = 0, l = damaged.length; i < l; i++) {\n        const damagedArea = damaged[i]\n        for (\n          y = Math.max(0, damagedArea.y),\n          yBound = Math.min(damagedArea.yBound, paintHeight);\n          y < yBound;\n          y++\n        ) {\n          for (\n            x = Math.max(0, damagedArea.x),\n            xBound = Math.min(damagedArea.xBound, paintWidth);\n            x < xBound;\n            x++\n          ) {\n            index = [y * paintWidth + x]\n            this._lastPaintedTiles[index] = -2\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexport { GameCanvas }\n","import * as Messages from '../messages'\nimport { MiscUtils } from '../utils'\nimport { Text } from '../messages/text'\n\nconst InfoBar = function (classification, population, score, funds, date, name) {\n  const classificationSelector = MiscUtils.normaliseDOMid(classification)\n  const populationSelector = MiscUtils.normaliseDOMid(population)\n  const scoreSelector = MiscUtils.normaliseDOMid(score)\n  const fundsSelector = MiscUtils.normaliseDOMid(funds)\n  const dateSelector = MiscUtils.normaliseDOMid(date)\n  const nameSelector = MiscUtils.normaliseDOMid(name)\n\n  const $classificationSelector = $(classificationSelector)\n  const $populationSelector = $(populationSelector)\n  const $scoreSelector = $(scoreSelector)\n  const $fundsSelector = $(fundsSelector)\n  const $dateSelector = $(dateSelector)\n  const $nameSelector = $(nameSelector)\n\n  return function (dataSource, initialValues) {\n\n    $classificationSelector.text(initialValues.classification)\n    $populationSelector.text(initialValues.population)\n    $scoreSelector.text(initialValues.score)\n    $fundsSelector.text(initialValues.funds)\n    $dateSelector.text(\n      [Text.months[initialValues.date.month], initialValues.date.year].join(' ')\n    )\n    $nameSelector.text(initialValues.name)\n\n    // Add the various listeners\n    dataSource.addEventListener(\n      Messages.CLASSIFICATION_UPDATED,\n      function (classification) {\n        $classificationSelector.text(classification)\n      }\n    )\n\n    dataSource.addEventListener(\n      Messages.POPULATION_UPDATED,\n      function (population) {\n        $populationSelector.text(population)\n      }\n    )\n\n    dataSource.addEventListener(Messages.SCORE_UPDATED, function (score) {\n      $scoreSelector.text(score)\n    })\n\n    dataSource.addEventListener(Messages.FUNDS_CHANGED, function (funds) {\n      $fundsSelector.text(funds)\n    })\n\n    dataSource.addEventListener(Messages.DATE_UPDATED, function (date) {\n      $dateSelector.text(\n        `Year ${date.year} ${Text.months[date.month]}`\n        // [Text.months[date.month], date.year].join(', Year '))\n      )\n    })\n  }\n}\n\nexport { InfoBar }\n","import { BLBNCNBIT, BULLBIT, BURNBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nconst RoadTable = [\n  TileValues.ROADS,\n  TileValues.ROADS2,\n  TileValues.ROADS,\n  TileValues.ROADS3,\n  TileValues.ROADS2,\n  TileValues.ROADS2,\n  TileValues.ROADS4,\n  TileValues.ROADS8,\n  TileValues.ROADS,\n  TileValues.ROADS6,\n  TileValues.ROADS,\n  TileValues.ROADS7,\n  TileValues.ROADS5,\n  TileValues.ROADS10,\n  TileValues.ROADS9,\n  TileValues.INTERSECTION,\n]\n\nconst RailTable = [\n  TileValues.LHRAIL,\n  TileValues.LVRAIL,\n  TileValues.LHRAIL,\n  TileValues.LVRAIL2,\n  TileValues.LVRAIL,\n  TileValues.LVRAIL,\n  TileValues.LVRAIL3,\n  TileValues.LVRAIL7,\n  TileValues.LHRAIL,\n  TileValues.LVRAIL5,\n  TileValues.LHRAIL,\n  TileValues.LVRAIL6,\n  TileValues.LVRAIL4,\n  TileValues.LVRAIL9,\n  TileValues.LVRAIL8,\n  TileValues.LVRAIL10,\n]\n\nconst WireTable = [\n  TileValues.LHPOWER,\n  TileValues.LVPOWER,\n  TileValues.LHPOWER,\n  TileValues.LVPOWER2,\n  TileValues.LVPOWER,\n  TileValues.LVPOWER,\n  TileValues.LVPOWER3,\n  TileValues.LVPOWER7,\n  TileValues.LHPOWER,\n  TileValues.LVPOWER5,\n  TileValues.LHPOWER,\n  TileValues.LVPOWER6,\n  TileValues.LVPOWER4,\n  TileValues.LVPOWER9,\n  TileValues.LVPOWER8,\n  TileValues.LVPOWER10,\n]\n\nconst fixSingle = function (x, y) {\n  let adjTile = 0\n  let tile = this._worldEffects.getTile(x, y)\n\n  tile = TileUtils.normalizeRoad(tile)\n\n  if (tile >= TileValues.ROADS && tile <= TileValues.INTERSECTION) {\n    if (y > 0) {\n      tile = this._worldEffects.getTileValue(x, y - 1)\n      tile = TileUtils.normalizeRoad(tile)\n\n      if (\n        (tile === TileValues.HRAILROAD\n          || (tile >= TileValues.ROADBASE && tile <= TileValues.VROADPOWER))\n        && tile !== TileValues.HROADPOWER\n        && tile !== TileValues.VRAILROAD\n        && tile !== TileValues.ROADBASE\n      ) { adjTile |= 1 }\n    }\n\n    if (x < this._map.width - 1) {\n      tile = this._worldEffects.getTileValue(x + 1, y)\n      tile = TileUtils.normalizeRoad(tile)\n\n      if (\n        (tile === TileValues.VRAILROAD\n          || (tile >= TileValues.ROADBASE && tile <= TileValues.VROADPOWER))\n        && tile !== TileValues.VROADPOWER\n        && tile !== TileValues.HRAILROAD\n        && tile !== TileValues.VBRIDGE\n      ) { adjTile |= 2 }\n    }\n\n    if (y < this._map.height - 1) {\n      tile = this._worldEffects.getTileValue(x, y + 1)\n      tile = TileUtils.normalizeRoad(tile)\n\n      if (\n        (tile === TileValues.HRAILROAD\n          || (tile >= TileValues.ROADBASE && tile <= TileValues.VROADPOWER))\n        && tile !== TileValues.HROADPOWER\n        && tile !== TileValues.VRAILROAD\n        && tile !== TileValues.ROADBASE\n      ) { adjTile |= 4 }\n    }\n\n    if (x > 0) {\n      tile = this._worldEffects.getTileValue(x - 1, y)\n      tile = TileUtils.normalizeRoad(tile)\n\n      if (\n        (tile === TileValues.VRAILROAD\n          || (tile >= TileValues.ROADBASE && tile <= TileValues.VROADPOWER))\n        && tile !== TileValues.VROADPOWER\n        && tile !== TileValues.HRAILROAD\n        && tile !== TileValues.VBRIDGE\n      ) { adjTile |= 8 }\n    }\n\n    this._worldEffects.setTile(x, y, RoadTable[adjTile], BULLBIT | BURNBIT)\n    return\n  }\n\n  if (tile >= TileValues.LHRAIL && tile <= TileValues.LVRAIL10) {\n    if (y > 0) {\n      tile = this._worldEffects.getTileValue(x, y - 1)\n      tile = TileUtils.normalizeRoad(tile)\n      if (\n        tile >= TileValues.RAILHPOWERV\n        && tile <= TileValues.VRAILROAD\n        && tile !== TileValues.RAILHPOWERV\n        && tile !== TileValues.HRAILROAD\n        && tile !== TileValues.HRAIL\n      ) { adjTile |= 1 }\n    }\n\n    if (x < this._map.width - 1) {\n      tile = this._worldEffects.getTileValue(x + 1, y)\n      tile = TileUtils.normalizeRoad(tile)\n      if (\n        tile >= TileValues.RAILHPOWERV\n        && tile <= TileValues.VRAILROAD\n        && tile !== TileValues.RAILVPOWERH\n        && tile !== TileValues.VRAILROAD\n        && tile !== TileValues.VRAIL\n      ) { adjTile |= 2 }\n    }\n\n    if (y < this._map.height - 1) {\n      tile = this._worldEffects.getTileValue(x, y + 1)\n      tile = TileUtils.normalizeRoad(tile)\n      if (\n        tile >= TileValues.RAILHPOWERV\n        && tile <= TileValues.VRAILROAD\n        && tile !== TileValues.RAILHPOWERV\n        && tile !== TileValues.HRAILROAD\n        && tile !== TileValues.HRAIL\n      ) { adjTile |= 4 }\n    }\n\n    if (x > 0) {\n      tile = this._worldEffects.getTileValue(x - 1, y)\n      tile = TileUtils.normalizeRoad(tile)\n      if (\n        tile >= TileValues.RAILHPOWERV\n        && tile <= TileValues.VRAILROAD\n        && tile !== TileValues.RAILVPOWERH\n        && tile !== TileValues.VRAILROAD\n        && tile !== TileValues.VRAIL\n      ) { adjTile |= 8 }\n    }\n\n    this._worldEffects.setTile(x, y, RailTable[adjTile], BULLBIT | BURNBIT)\n    return\n  }\n\n  if (tile >= TileValues.LHPOWER && tile <= TileValues.LVPOWER10) {\n    if (y > 0) {\n      tile = this._worldEffects.getTile(x, y - 1)\n      if (tile.isConductive()) {\n        tile = tile.getValue()\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile !== TileValues.VPOWER\n          && tile !== TileValues.VROADPOWER\n          && tile !== TileValues.RAILVPOWERH\n        ) { adjTile |= 1 }\n      }\n    }\n\n    if (x < this._map.width - 1) {\n      tile = this._worldEffects.getTile(x + 1, y)\n      if (tile.isConductive()) {\n        tile = tile.getValue()\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile !== TileValues.HPOWER\n          && tile !== TileValues.HROADPOWER\n          && tile !== TileValues.RAILHPOWERV\n        ) { adjTile |= 2 }\n      }\n    }\n\n    if (y < this._map.height - 1) {\n      tile = this._worldEffects.getTile(x, y + 1)\n      if (tile.isConductive()) {\n        tile = tile.getValue()\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile !== TileValues.VPOWER\n          && tile !== TileValues.VROADPOWER\n          && tile !== TileValues.RAILVPOWERH\n        ) { adjTile |= 4 }\n      }\n    }\n\n    if (x > 0) {\n      tile = this._worldEffects.getTile(x - 1, y)\n      if (tile.isConductive()) {\n        tile = tile.getValue()\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile !== TileValues.HPOWER\n          && tile !== TileValues.HROADPOWER\n          && tile !== TileValues.RAILHPOWERV\n        ) { adjTile |= 8 }\n      }\n    }\n\n    this._worldEffects.setTile(x, y, WireTable[adjTile], BLBNCNBIT)\n\n  }\n}\n\nconst checkZoneConnections = function (x, y) {\n  this.fixSingle(x, y)\n\n  if (y > 0) this.fixSingle(x, y - 1)\n\n  if (x < this._map.width - 1) this.fixSingle(x + 1, y)\n\n  if (y < this._map.height - 1) this.fixSingle(x, y + 1)\n\n  if (x > 0) this.fixSingle(x - 1, y)\n}\n\nconst checkBorder = function (x, y, size) {\n  // Adjust to top left tile\n  x = x - 1\n  y = y - 1\n\n  let i\n\n  for (i = 0; i < size; i++) this.fixZone(x + i, y - 1)\n\n  for (i = 0; i < size; i++) this.fixZone(x - 1, y + i)\n\n  for (i = 0; i < size; i++) this.fixZone(x + i, y + size)\n\n  for (i = 0; i < size; i++) this.fixZone(x + size, y + i)\n}\n\n// Note that this differs in style from BaseTool. After BaseTool has been called\n// on an implementation, we have the following prototype chain:\n//   toolConstructor -> {<prototype: empty object>} -> BaseToolImpl\n// Following that idiom again would lead to difficulties regarding where to interpose\n// the Connector implementation in the prototype chain, as really the BaseTool implementation\n// and the Connector implementation should be singleton objects. Instead, we just add the required\n// functions to the newly minted prototype\nconst Connector = function (toolConstructor) {\n  toolConstructor.prototype.checkZoneConnections = checkZoneConnections\n  toolConstructor.prototype.fixSingle = fixSingle\n  toolConstructor.prototype.checkBorder = checkBorder\n  return toolConstructor\n}\n\nexport { Connector }\n","import { BaseTool } from './baseTool'\nimport { Connector } from './connector'\n\n// Take a tool constructor, make it inherit from BaseTool, and add\n// the various connection related functions\nconst makeTool = BaseTool.makeTool\nconst ConnectingTool = function (toolConstructor) {\n  return Connector(makeTool(toolConstructor))\n}\n\nexport { ConnectingTool }\n","import { ConnectingTool } from './connectingTool'\nimport { ANIMBIT, BNCNBIT, ZONEBIT } from '../tiles/tileFlags'\nimport { DIRT } from '../tiles/tileValues'\nimport { TileUtils } from '../tiles/tileUtils'\n\nconst BuildingTool = ConnectingTool(function (\n  cost,\n  centreTile,\n  map,\n  size,\n  animated\n) {\n  this.init(cost, map, false)\n  this.centreTile = centreTile\n  this.size = size\n  this.animated = animated\n})\n\nBuildingTool.prototype.putBuilding = function (leftX, topY) {\n  let posX, posY, tileValue, tileFlags\n  let baseTile = this.centreTile - this.size - 1\n\n  for (let dy = 0; dy < this.size; dy++) {\n    posY = topY + dy\n\n    for (let dx = 0; dx < this.size; dx++) {\n      posX = leftX + dx\n      tileValue = baseTile\n      tileFlags = BNCNBIT\n\n      if (dx === 1) {\n        if (dy === 1) tileFlags |= ZONEBIT\n        else if (dy === 2 && this.animated) tileFlags |= ANIMBIT\n      }\n\n      this._worldEffects.setTile(posX, posY, tileValue, tileFlags)\n\n      baseTile++\n    }\n  }\n}\n\nBuildingTool.prototype.prepareBuildingSite = function (leftX, topY) {\n  // Check that the entire site is on the map\n  if (leftX < 0 || leftX + this.size > this._map.width) { return this.TOOLRESULT_FAILED }\n\n  if (topY < 0 || topY + this.size > this._map.height) { return this.TOOLRESULT_FAILED }\n\n  let posX, posY, tileValue\n\n  // Check whether the tiles are clear\n  for (let dy = 0; dy < this.size; dy++) {\n    posY = topY + dy\n\n    for (let dx = 0; dx < this.size; dx++) {\n      posX = leftX + dx\n\n      tileValue = this._worldEffects.getTileValue(posX, posY)\n\n      if (tileValue === DIRT) continue\n\n      if (!this.autoBulldoze) {\n        // No TileValues.DIRT and no bull-dozer => not buildable\n        return this.TOOLRESULT_NEEDS_BULLDOZE\n      }\n\n      if (!TileUtils.canBulldoze(tileValue)) {\n        // tilevalue cannot be auto-bulldozed\n        return this.TOOLRESULT_NEEDS_BULLDOZE\n      }\n\n      this._worldEffects.setTile(posX, posY, DIRT)\n      this.addCost(this.bulldozerCost)\n    }\n  }\n\n  return this.TOOLRESULT_OK\n}\n\nBuildingTool.prototype.buildBuilding = function (x, y) {\n  // Correct to top left\n  x--\n  y--\n\n  const prepareResult = this.prepareBuildingSite(x, y)\n  if (prepareResult !== this.TOOLRESULT_OK) return prepareResult\n\n  this.addCost(this.toolCost)\n\n  this.putBuilding(x, y)\n\n  this.checkBorder(x, y)\n\n  return this.TOOLRESULT_OK\n}\n\nBuildingTool.prototype.doTool = function (x, y, blockMaps) {\n  this.result = this.buildBuilding(x, y)\n}\n\nexport { BuildingTool }\n","import { ConnectingTool } from './connectingTool'\nimport { EventEmitter } from '../eventEmitter'\nimport { SOUND_EXPLOSIONLOW, SOUND_EXPLOSIONHIGH } from '../messages'\nimport { Random } from '../random'\nimport { ANIMBIT, BULLBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\nimport { ZoneUtils } from '../zones/zoneUtils'\n\nconst BulldozerTool = EventEmitter(\n  ConnectingTool(function (map) {\n    this.init(10, map, true, true)\n  })\n)\n\nBulldozerTool.prototype.putRubble = function (x, y, size) {\n  for (let xx = x; xx < x + size; xx++) {\n    for (let yy = y; yy < y + size; yy++) {\n      if (this._map.testBounds(xx, yy)) {\n        const tile = this._worldEffects.getTileValue(xx, yy)\n        if (tile != TileValues.RADTILE && tile != TileValues.DIRT) {\n          this._worldEffects.setTile(\n            xx,\n            yy,\n            TileValues.TINYEXP + Random.getRandom(2),\n            ANIMBIT | BULLBIT\n          )\n        }\n      }\n    }\n  }\n}\n\nBulldozerTool.prototype.layDoze = function (x, y) {\n  let tile = this._worldEffects.getTile(x, y)\n\n  if (!tile.isBulldozable()) return this.TOOLRESULT_FAILED\n\n  tile = tile.getValue()\n  tile = TileUtils.normalizeRoad(tile)\n\n  switch (tile) {\n    case TileValues.HBRIDGE:\n    case TileValues.VBRIDGE:\n    case TileValues.BRWV:\n    case TileValues.BRWH:\n    case TileValues.HBRDG0:\n    case TileValues.HBRDG1:\n    case TileValues.HBRDG2:\n    case TileValues.HBRDG3:\n    case TileValues.VBRDG0:\n    case TileValues.VBRDG1:\n    case TileValues.VBRDG2:\n    case TileValues.VBRDG3:\n    case TileValues.HPOWER:\n    case TileValues.VPOWER:\n    case TileValues.HRAIL:\n    case TileValues.VRAIL:\n      this._worldEffects.setTile(x, y, TileValues.RIVER)\n      break\n\n    default:\n      this._worldEffects.setTile(x, y, TileValues.DIRT)\n      break\n  }\n\n  this.addCost(1)\n\n  return this.TOOLRESULT_OK\n}\n\nBulldozerTool.prototype.doTool = function (x, y, blockMaps) {\n  if (!this._map.testBounds(x, y)) this.result = this.TOOLRESULT_FAILED\n\n  const tile = this._worldEffects.getTile(x, y)\n  const tileValue = tile.getValue()\n\n  let zoneSize = 0\n  let deltaX\n  let deltaY\n\n  if (tile.isZone()) {\n    zoneSize = ZoneUtils.checkZoneSize(tileValue)\n    deltaX = 0\n    deltaY = 0\n  } else {\n    const result = ZoneUtils.checkBigZone(tileValue)\n    zoneSize = result.zoneSize\n    deltaX = result.deltaX\n    deltaY = result.deltaY\n  }\n\n  if (zoneSize > 0) {\n    this.addCost(this.bulldozerCost)\n\n    const dozeX = x\n    const dozeY = y\n    const centerX = x + deltaX\n    const centerY = y + deltaY\n\n    switch (zoneSize) {\n      case 3:\n        this._emitEvent(SOUND_EXPLOSIONHIGH)\n        this.putRubble(centerX - 1, centerY - 1, 3)\n        break\n\n      case 4:\n        this._emitEvent(SOUND_EXPLOSIONLOW)\n        this.putRubble(centerX - 1, centerY - 1, 4)\n        break\n\n      case 6:\n        this._emitEvent(SOUND_EXPLOSIONHIGH)\n        this._emitEvent(SOUND_EXPLOSIONLOW)\n        this.putRubble(centerX - 1, centerY - 1, 6)\n        break\n    }\n\n    this.result = this.TOOLRESULT_OK\n  } else {\n    let toolResult\n    if (\n      tileValue === TileValues.RIVER\n      || tileValue === TileValues.REDGE\n      || tileValue === TileValues.CHANNEL\n    ) {\n      toolResult = this.layDoze(x, y)\n\n      if (tileValue !== this._worldEffects.getTileValue(x, y)) this.addCost(5)\n    } else {\n      toolResult = this.layDoze(x, y)\n      this.checkZoneConnections(x, y)\n    }\n\n    this.result = toolResult\n  }\n}\n\nexport { BulldozerTool }\n","import { BaseTool } from './baseTool'\nimport { Random } from '../random'\nimport { ANIMBIT, BULLBIT, BURNBIT, CONDBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport { DIRT, FOUNTAIN, WOODS2 } from '../tiles/tileValues'\n\nconst makeTool = BaseTool.makeTool\nconst ParkTool = makeTool(function (map) {\n  this.init(10, map, true, true)\n})\n\nParkTool.prototype.doTool = function (x, y, blockMaps) {\n\n  this.doAutoBulldoze(x, y)\n\n  if (this._worldEffects.getTileValue(x, y) !== DIRT) {\n    this.result = this.TOOLRESULT_NEEDS_BULLDOZE\n    return\n  }\n\n  const value = Random.getRandom(4)\n  let tileFlags = BURNBIT | BULLBIT\n  let tileValue\n\n  if (value === 4) {\n    tileValue = FOUNTAIN\n    tileFlags |= ANIMBIT\n  } else {\n    tileValue = value + WOODS2\n  }\n\n  this._worldEffects.setTile(x, y, tileValue, tileFlags)\n  this.addCost(10)\n  this.result = this.TOOLRESULT_OK\n}\n\nexport { ParkTool }\n","import { ConnectingTool } from './connectingTool'\nimport { BULLBIT, BURNBIT, CONDBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nconst RailTool = ConnectingTool(function (map) {\n  this.init(20, map, true, true)\n})\n\nRailTool.prototype.layRail = function (x, y) {\n  this.doAutoBulldoze(x, y)\n  let tile = this._worldEffects.getTileValue(x, y)\n  tile = TileUtils.normalizeRoad(tile)\n  let cost = this.toolCost\n\n  switch (tile) {\n    case TileValues.DIRT:\n      this._worldEffects.setTile(x, y, TileValues.LHRAIL, BULLBIT | BURNBIT)\n      break\n\n    case TileValues.RIVER:\n    case TileValues.REDGE:\n    case TileValues.CHANNEL:\n      cost = 100\n\n      if (x < this._map.width - 1) {\n        tile = this._worldEffects.getTileValue(x + 1, y)\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile == TileValues.RAILHPOWERV\n          || tile == TileValues.HRAIL\n          || (tile >= TileValues.LHRAIL && tile <= TileValues.HRAILROAD)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.HRAIL, BULLBIT)\n          break\n        }\n      }\n\n      if (x > 0) {\n        tile = this._worldEffects.getTileValue(x - 1, y)\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile == TileValues.RAILHPOWERV\n          || tile == TileValues.HRAIL\n          || (tile > TileValues.VRAIL && tile < TileValues.VRAILROAD)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.HRAIL, BULLBIT)\n          break\n        }\n      }\n\n      if (y < this._map.height - 1) {\n        tile = this._worldEffects.getTileValue(x, y + 1)\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile == TileValues.RAILVPOWERH\n          || tile == TileValues.VRAILROAD\n          || (tile > TileValues.HRAIL && tile < TileValues.HRAILROAD)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.VRAIL, BULLBIT)\n          break\n        }\n      }\n\n      if (y > 0) {\n        tile = this._worldEffects.getTileValue(x, y - 1)\n        tile = TileUtils.normalizeRoad(tile)\n        if (\n          tile == TileValues.RAILVPOWERH\n          || tile == TileValues.VRAILROAD\n          || (tile > TileValues.HRAIL && tile < TileValues.HRAILROAD)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.VRAIL, BULLBIT)\n          break\n        }\n      }\n\n      return this.TOOLRESULT_FAILED\n\n    case TileValues.LHPOWER:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.RAILVPOWERH,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.LVPOWER:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.RAILHPOWERV,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.ROADS:\n      this._worldEffects.setTile(x, y, TileValues.VRAILROAD, BURNBIT | BULLBIT)\n      break\n\n    case TileValues.ROADS2:\n      this._worldEffects.setTile(x, y, TileValues.HRAILROAD, BURNBIT | BULLBIT)\n      break\n\n    default:\n      return this.TOOLRESULT_FAILED\n  }\n\n  this.addCost(cost)\n  this.checkZoneConnections(x, y)\n  return this.TOOLRESULT_OK\n}\n\nRailTool.prototype.doTool = function (x, y, blockMaps) {\n  this.result = this.layRail(x, y)\n}\n\nexport { RailTool }\n","import { ConnectingTool } from './connectingTool'\nimport { BULLBIT, BURNBIT, CONDBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nconst RoadTool = ConnectingTool(function (map) {\n  this.init(10, map, true, true)\n})\n\nRoadTool.prototype.layRoad = function (x, y) {\n  this.doAutoBulldoze(x, y)\n  let tile = this._worldEffects.getTileValue(x, y)\n  let cost = this.toolCost\n\n  switch (tile) {\n    case TileValues.DIRT:\n      this._worldEffects.setTile(x, y, TileValues.ROADS, BULLBIT | BURNBIT)\n      break\n\n    case TileValues.RIVER:\n    case TileValues.REDGE:\n    case TileValues.CHANNEL:\n      cost = 50\n\n      if (x < this._map.width - 1) {\n        tile = this._worldEffects.getTileValue(x + 1, y)\n        tile = TileUtils.normalizeRoad(tile)\n\n        if (\n          tile === TileValues.VRAILROAD\n          || tile === TileValues.HBRIDGE\n          || (tile >= TileValues.ROADS && tile <= TileValues.HROADPOWER)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.HBRIDGE, BULLBIT)\n          break\n        }\n      }\n\n      if (x > 0) {\n        tile = this._worldEffects.getTileValue(x - 1, y)\n        tile = TileUtils.normalizeRoad(tile)\n\n        if (\n          tile === TileValues.VRAILROAD\n          || tile === TileValues.HBRIDGE\n          || (tile >= TileValues.ROADS && tile <= TileValues.INTERSECTION)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.HBRIDGE, BULLBIT)\n          break\n        }\n      }\n\n      if (y < this._map.height - 1) {\n        tile = this._worldEffects.getTileValue(x, y + 1)\n        tile = TileUtils.normalizeRoad(tile)\n\n        if (\n          tile === TileValues.HRAILROAD\n          || tile === TileValues.VROADPOWER\n          || (tile >= TileValues.VBRIDGE && tile <= TileValues.INTERSECTION)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.VBRIDGE, BULLBIT)\n          break\n        }\n      }\n\n      if (y > 0) {\n        tile = this._worldEffects.getTileValue(x, y - 1)\n        tile = TileUtils.normalizeRoad(tile)\n\n        if (\n          tile === TileValues.HRAILROAD\n          || tile === TileValues.VROADPOWER\n          || (tile >= TileValues.VBRIDGE && tile <= TileValues.INTERSECTION)\n        ) {\n          this._worldEffects.setTile(x, y, TileValues.VBRIDGE, BULLBIT)\n          break\n        }\n      }\n\n      return this.TOOLRESULT_FAILED\n\n    case TileValues.LHPOWER:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.VROADPOWER,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.LVPOWER:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.HROADPOWER,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.LHRAIL:\n      this._worldEffects.setTile(x, y, TileValues.HRAILROAD, BURNBIT | BULLBIT)\n      break\n\n    case TileValues.LVRAIL:\n      this._worldEffects.setTile(x, y, TileValues.VRAILROAD, BURNBIT | BULLBIT)\n      break\n\n    default:\n      return this.TOOLRESULT_FAILED\n  }\n\n  this.addCost(cost)\n  this.checkZoneConnections(x, y)\n  return this.TOOLRESULT_OK\n}\n\nRoadTool.prototype.doTool = function (x, y, blockMaps) {\n  this.result = this.layRoad(x, y)\n}\n\nexport { RoadTool }\n","import { BaseTool } from './baseTool'\nimport { Config } from '../config'\nimport { EventEmitter } from '../eventEmitter'\nimport { QUERY_WINDOW_NEEDED } from '../messages'\nimport { Text } from '../messages/text'\nimport * as TileValues from '../tiles/tileValues'\n\nconst makeTool = BaseTool.makeTool\nconst QueryTool = EventEmitter(\n  makeTool(function (map) {\n    this.init(0, map, false, false)\n  })\n)\n\nQueryTool.prototype.classifyPopulationDensity = function (x, y, blockMaps) {\n  let density = blockMaps.populationDensityMap.worldGet(x, y)\n  if (Config.debug || Config.queryDebug) $('#queryDensityRaw').text(density)\n  density = density >> 6\n  density = density & 3\n  $('#queryDensity').text(Text.densityStrings[density])\n}\n\nQueryTool.prototype.classifyLandValue = function (x, y, blockMaps) {\n  const landValue = blockMaps.landValueMap.worldGet(x, y)\n  if (Config.debug || Config.queryDebug) $('#queryLandValueRaw').text(landValue)\n\n  let i = 0\n  if (landValue >= 150) i = 3\n  else if (landValue >= 80) i = 2\n  else if (landValue >= 30) i = 1\n\n  const text = Text.landValueStrings[i]\n  $('#queryLandValue').text(text)\n}\n\nQueryTool.prototype.classifyCrime = function (x, y, blockMaps) {\n  let crime = blockMaps.crimeRateMap.worldGet(x, y)\n  if (Config.debug || Config.queryDebug) $('#queryCrimeRaw').text(crime)\n  crime = crime >> 6\n  crime = crime & 3\n  $('#queryCrime').text(Text.crimeStrings[crime])\n}\n\nQueryTool.prototype.classifyPollution = function (x, y, blockMaps) {\n  let pollution = blockMaps.pollutionDensityMap.worldGet(x, y)\n  if (Config.debug || Config.queryDebug) $('#queryPollutionRaw').text(pollution)\n  pollution = pollution >> 6\n  pollution = pollution & 3\n  $('#queryPollution').text(Text.pollutionStrings[pollution])\n}\n\nQueryTool.prototype.classifyRateOfGrowth = function (x, y, blockMaps) {\n  let rate = blockMaps.rateOfGrowthMap.worldGet(x, y)\n  if (Config.debug || Config.queryDebug) $('#queryRateRaw').text(rate)\n  rate = rate >> 6\n  rate = rate & 3\n  $('#queryRate').text(Text.rateStrings[rate])\n}\n\nQueryTool.prototype.classifyDebug = function (x, y, blockMaps) {\n  if (!Config.debug && !Config.queryDebug) return\n  $('#queryFireStationRaw').text(blockMaps.fireStationMap.worldGet(x, y))\n  $('#queryFireStationEffectRaw').text(\n    blockMaps.fireStationEffectMap.worldGet(x, y)\n  )\n  $('#queryPoliceStationRaw').text(blockMaps.policeStationMap.worldGet(x, y))\n  $('#queryPoliceStationEffectRaw').text(\n    blockMaps.policeStationEffectMap.worldGet(x, y)\n  )\n  $('#queryTerrainDensityRaw').text(blockMaps.terrainDensityMap.worldGet(x, y))\n  $('#queryTrafficDensityRaw').text(blockMaps.trafficDensityMap.worldGet(x, y))\n  $('#queryComRateRaw').text(blockMaps.cityCentreDistScoreMap.worldGet(x, y))\n}\n\nQueryTool.prototype.classifyZone = function (x, y) {\n  const baseTiles = [\n    TileValues.DIRT,\n    TileValues.RIVER,\n    TileValues.TREEBASE,\n    TileValues.RUBBLE,\n    TileValues.FLOOD,\n    TileValues.RADTILE,\n    TileValues.FIRE,\n    TileValues.ROADBASE,\n    TileValues.POWERBASE,\n    TileValues.RAILBASE,\n    TileValues.RESBASE,\n    TileValues.COMBASE,\n    TileValues.INDBASE,\n    TileValues.PORTBASE,\n    TileValues.AIRPORTBASE,\n    TileValues.COALBASE,\n    TileValues.FIRESTBASE,\n    TileValues.POLICESTBASE,\n    TileValues.STADIUMBASE,\n    TileValues.NUCLEARBASE,\n    TileValues.HBRDG0,\n    TileValues.RADAR0,\n    TileValues.FOUNTAIN,\n    TileValues.INDBASE2,\n    TileValues.FOOTBALLGAME1,\n    TileValues.VBRDG0,\n    952,\n  ]\n\n  let tileValue = this._map.getTileValue(x, y)\n  if (\n    tileValue >= TileValues.COALSMOKE1\n    && tileValue < TileValues.FOOTBALLGAME1\n  ) { tileValue = TileValues.COALBASE }\n\n  let index, l\n  for (index = 0, l = baseTiles.length - 1; index < l; index++) {\n    if (tileValue < baseTiles[index + 1]) break\n  }\n\n  $('#queryZoneType').text(Text.zoneTypes[index])\n}\n\nQueryTool.prototype.doTool = function (x, y, blockMaps) {\n  let text = 'Position (' + x + ', ' + y + ')'\n  text += ' TileValue: ' + this._map.getTileValue(x, y)\n\n  if (Config.debug || Config.queryDebug) {\n    const tile = this._map.getTile(x, y)\n    $('#queryTile').text([x, y].join(', '))\n    $('#queryTileValue').text(tile.getValue())\n    $('#queryTileBurnable').text(tile.isCombustible() ? '\\u2714' : '\\u2718')\n    $('#queryTileBulldozable').text(tile.isBulldozable() ? '\\u2714' : '\\u2718')\n    $('#queryTileCond').text(tile.isConductive() ? '\\u2714' : '\\u2718')\n    $('#queryTileAnim').text(tile.isAnimated() ? '\\u2714' : '\\u2718')\n    $('#queryTilePowered').text(tile.isPowered() ? '\\u2714' : '\\u2718')\n    $('#queryTileZone').text(tile.isZone() ? '\\u2714' : '\\u2718')\n  }\n\n  this.classifyZone(x, y)\n  this.classifyPopulationDensity(x, y, blockMaps)\n  this.classifyLandValue(x, y, blockMaps)\n  this.classifyCrime(x, y, blockMaps)\n  this.classifyPollution(x, y, blockMaps)\n  this.classifyRateOfGrowth(x, y, blockMaps)\n  this.classifyDebug(x, y, blockMaps)\n\n  this._emitEvent(QUERY_WINDOW_NEEDED)\n\n  this.result = this.TOOLRESULT_OK\n}\n\nexport { QueryTool }\n","import { ConnectingTool } from './connectingTool'\nimport { CONDBIT, BURNBIT, BULLBIT } from '../tiles/tileFlags'\nimport { TileUtils } from '../tiles/tileUtils'\nimport * as TileValues from '../tiles/tileValues'\n\nconst WireTool = ConnectingTool(function (map) {\n  this.init(5, map, true, true)\n})\n\nWireTool.prototype.layWire = function (x, y) {\n  this.doAutoBulldoze(x, y)\n  let cost = this.toolCost\n\n  let tile = this._worldEffects.getTileValue(x, y)\n  tile = TileUtils.normalizeRoad(tile)\n\n  switch (tile) {\n    case TileValues.DIRT:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.LHPOWER,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.RIVER:\n    case TileValues.REDGE:\n    case TileValues.CHANNEL:\n      cost = 25\n\n      if (x < this._map.width - 1) {\n        tile = this._worldEffects.getTile(x + 1, y)\n        if (tile.isConductive()) {\n          tile = tile.getValue()\n          tile = TileUtils.normalizeRoad(tile)\n          if (\n            tile != TileValues.HROADPOWER\n            && tile != TileValues.RAILHPOWERV\n            && tile != TileValues.HPOWER\n          ) {\n            this._worldEffects.setTile(\n              x,\n              y,\n              TileValues.VPOWER,\n              CONDBIT | BULLBIT\n            )\n            break\n          }\n        }\n      }\n\n      if (x > 0) {\n        tile = this._worldEffects.getTile(x - 1, y)\n        if (tile.isConductive()) {\n          tile = tile.getValue()\n          tile = TileUtils.normalizeRoad(tile)\n          if (\n            tile != TileValues.HROADPOWER\n            && tile != TileValues.RAILHPOWERV\n            && tile != TileValues.HPOWER\n          ) {\n            this._worldEffects.setTile(\n              x,\n              y,\n              TileValues.VPOWER,\n              CONDBIT | BULLBIT\n            )\n            break\n          }\n        }\n      }\n\n      if (y < this._map.height - 1) {\n        tile = this._worldEffects.getTile(x, y + 1)\n        if (tile.isConductive()) {\n          tile = tile.getValue()\n          tile = TileUtils.normalizeRoad(tile)\n          if (\n            tile != TileValues.VROADPOWER\n            && tile != TileValues.RAILVPOWERH\n            && tile != TileValues.VPOWER\n          ) {\n            this._worldEffects.setTile(\n              x,\n              y,\n              TileValues.HPOWER,\n              CONDBIT | BULLBIT\n            )\n            break\n          }\n        }\n      }\n\n      if (y > 0) {\n        tile = this._worldEffects.getTile(x, y - 1)\n        if (tile.isConductive()) {\n          tile = tile.getValue()\n          tile = TileUtils.normalizeRoad(tile)\n          if (\n            tile != TileValues.VROADPOWER\n            && tile != TileValues.RAILVPOWERH\n            && tile != TileValues.VPOWER\n          ) {\n            this._worldEffects.setTile(\n              x,\n              y,\n              TileValues.HPOWER,\n              CONDBIT | BULLBIT\n            )\n            break\n          }\n        }\n      }\n\n      return this.TOOLRESULT_FAILED\n\n    case TileValues.ROADS:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.HROADPOWER,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.ROADS2:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.VROADPOWER,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.LHRAIL:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.RAILHPOWERV,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    case TileValues.LVRAIL:\n      this._worldEffects.setTile(\n        x,\n        y,\n        TileValues.RAILVPOWERH,\n        CONDBIT | BURNBIT | BULLBIT\n      )\n      break\n\n    default:\n      return this.TOOLRESULT_FAILED\n  }\n\n  this.addCost(cost)\n  this.checkZoneConnections(x, y)\n  return this.TOOLRESULT_OK\n}\n\nWireTool.prototype.doTool = function (x, y, blockMaps) {\n  this.result = this.layWire(x, y)\n}\n\nexport { WireTool }\n","import { BuildingTool } from './buildingTool'\nimport { BulldozerTool } from './bulldozerTool'\nimport { EventEmitter } from '../eventEmitter'\nimport { QUERY_WINDOW_NEEDED } from '../messages'\nimport { MiscUtils } from '../utils'\nimport { ParkTool } from './parkTool'\nimport { RailTool } from './railTool'\nimport { RoadTool } from './roadTool'\nimport { QueryTool } from './queryTool'\nimport * as TileValues from '../tiles/tileValues'\nimport { WireTool } from './wireTool'\n\nfunction GameTools(map) {\n  const tools = EventEmitter({\n    airport: new BuildingTool(10000, TileValues.AIRPORT, map, 6, false),\n    bulldozer: new BulldozerTool(map),\n    coal: new BuildingTool(3000, TileValues.POWERPLANT, map, 4, false),\n    commercial: new BuildingTool(100, TileValues.COMCLR, map, 3, false),\n    fire: new BuildingTool(500, TileValues.FIRESTATION, map, 3, false),\n    industrial: new BuildingTool(100, TileValues.INDCLR, map, 3, false),\n    nuclear: new BuildingTool(5000, TileValues.NUCLEAR, map, 4, true),\n    park: new ParkTool(map),\n    police: new BuildingTool(500, TileValues.POLICESTATION, map, 3, false),\n    port: new BuildingTool(3000, TileValues.PORT, map, 4, false),\n    rail: new RailTool(map),\n    residential: new BuildingTool(100, TileValues.FREEZ, map, 3, false),\n    road: new RoadTool(map),\n    query: new QueryTool(map),\n    stadium: new BuildingTool(5000, TileValues.STADIUM, map, 4, false),\n    wire: new WireTool(map),\n  })\n\n  tools.query.addEventListener(\n    QUERY_WINDOW_NEEDED,\n    MiscUtils.reflectEvent.bind(tools, QUERY_WINDOW_NEEDED)\n  )\n\n  return tools\n}\n\nexport { GameTools }\n","import { EventEmitter } from './eventEmitter'\nimport { GameCanvas } from './gameCanvas'\nimport { GameTools } from './tools/gameTools'\nimport * as Messages from './messages'\nimport { MiscUtils } from './utils'\n\nconst canvasID = '#' + GameCanvas.DEFAULT_ID\nconst toolOutputID = '#toolOutput'\n\nconst InputStatus = EventEmitter(function (map, tileWidth) {\n  this.gameTools = GameTools(map)\n\n  this.gameTools.addEventListener(\n    Messages.QUERY_WINDOW_NEEDED,\n    MiscUtils.reflectEvent.bind(this, Messages.QUERY_WINDOW_NEEDED)\n  )\n\n  this.canvasID = MiscUtils.normaliseDOMid(canvasID)\n\n  this._tileWidth = tileWidth\n\n  // Keyboard Movement\n  this.up = false\n  this.down = false\n  this.left = false\n  this.right = false\n  this.escape = false\n\n  // Mouse movement\n  this.mouseX = -1\n  this.mouseY = -1\n\n  // Mouse drags\n  this._dragging = false\n  this._lastdragX = -1\n  this._lastdragY = -1\n\n  // Tool buttons\n  this.toolName = null\n  this.currentTool = null\n  this.toolWidth = 0\n  this.toolColour = ''\n\n  this.$canvas = $(this.canvasID)\n\n  // Add the listeners\n  $(document).keydown(keyDownHandler.bind(this))\n  $(document).keyup(keyUpHandler.bind(this))\n\n  this.getRelativeCoordinates = getRelativeCoordinates.bind(this)\n  this.$canvas.on('mouseenter', mouseEnterHandler.bind(this))\n  this.$canvas.on('mouseleave', mouseLeaveHandler.bind(this))\n\n  this.mouseDownHandler = mouseDownHandler.bind(this)\n  this.mouseMoveHandler = mouseMoveHandler.bind(this)\n  this.mouseUpHandler = mouseUpHandler.bind(this)\n  this.canvasClickHandler = canvasClickHandler.bind(this)\n\n  $('.toolButton').click(toolButtonHandler.bind(this))\n  $('#budgetRequest').click(budgetHandler.bind(this))\n  $('#evalRequest').click(evalHandler.bind(this))\n  $('#disasterRequest').click(disasterHandler.bind(this))\n  $('#pauseRequest').click(this.speedChangeHandler.bind(this))\n  $('#screenshotRequest').click(screenshotHandler.bind(this))\n  $('#settingsRequest').click(settingsHandler.bind(this))\n  $('#saveRequest').click(saveHandler.bind(this))\n  $('#debugRequest').click(debugHandler.bind(this))\n})\n\nfunction keyDownHandler(e) {\n  let handled = false\n\n  switch (e.keyCode) {\n    case 38:\n    case 87:\n      this.up = true\n      handled = true\n      break\n\n    case 40:\n    case 83:\n      this.down = true\n      handled = true\n      break\n\n    case 39:\n    case 68:\n      this.right = true\n      handled = true\n      break\n\n    case 37:\n    case 65:\n      this.left = true\n      handled = true\n      break\n\n    case 27:\n      this.escape = true\n      handled = true\n  }\n\n  if (handled) e.preventDefault()\n}\n\nfunction keyUpHandler(e) {\n  switch (e.keyCode) {\n    case 38:\n    case 87:\n      this.up = false\n      break\n\n    case 40:\n    case 83:\n      this.down = false\n      break\n\n    case 39:\n    case 68:\n      this.right = false\n      break\n\n    case 37:\n    case 65:\n      this.left = false\n      break\n\n    case 27:\n      this.escape = false\n  }\n}\n\nfunction getRelativeCoordinates(e) {\n  const cRect = document.querySelector(this.canvasID).getBoundingClientRect()\n  return { x: e.clientX - cRect.left, y: e.clientY - cRect.top }\n}\n\nfunction mouseEnterHandler(e) {\n  if (this.currentTool == null) return\n\n  this.$canvas.on('mousemove', this.mouseMoveHandler)\n\n  if (this.currentTool.isDraggable) { this.$canvas.on('mousedown', this.mouseDownHandler) } else this.$canvas.on('click', this.canvasClickHandler)\n}\n\nfunction mouseDownHandler(e) {\n  if (e.which !== 1 || e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) return\n\n  const coords = this.getRelativeCoordinates(e)\n  this.mouseX = coords.x\n  this.mouseY = coords.y\n\n  this._dragging = true\n  this._emitEvent(Messages.TOOL_CLICKED, { x: this.mouseX, y: this.mouseY })\n\n  this._lastDragX = Math.floor(this.mouseX / this._tileWidth)\n  this._lastDragY = Math.floor(this.mouseY / this._tileWidth)\n\n  this.$canvas.on('mouseup', this.mouseUpHandler)\n  e.preventDefault()\n}\n\nfunction mouseUpHandler(e) {\n  this._dragging = false\n  this._lastDragX = -1\n  this._lastDragY = -1\n  this.$canvas.off('mouseup')\n  e.preventDefault()\n}\n\nfunction mouseLeaveHandler(e) {\n  this.$canvas.off('mousedown')\n  this.$canvas.off('mousemove')\n  this.$canvas.off('mouseup')\n\n  // Watch out: we might have been mid-drag\n  if (this._dragging) {\n    this._dragging = false\n    this._lastDragX = -1\n    this._lastDragY = -1\n  }\n\n  this.$canvas.off('click')\n\n  this.mouseX = -1\n  this.mouseY = -1\n}\n\nfunction mouseMoveHandler(e) {\n  const coords = this.getRelativeCoordinates(e)\n  this.mouseX = coords.x\n  this.mouseY = coords.y\n\n  if (this._dragging) {\n    // XXX Work up how to patch up the path for fast mouse moves. My first attempt was too slow, and ended up missing\n    // mouseUp events\n    const x = Math.floor(this.mouseX / this._tileWidth)\n    const y = Math.floor(this.mouseY / this._tileWidth)\n\n    const lastX = this._lastDragX\n    const lastY = this._lastDragY\n    if (x !== lastX || y !== lastY) {\n      this._emitEvent(Messages.TOOL_CLICKED, { x: this.mouseX, y: this.mouseY })\n      this._lastDragX = x\n      this._lastDragY = y\n    }\n  }\n}\n\nfunction canvasClickHandler(e) {\n  if (\n    e.which !== 1\n    || e.shiftKey\n    || e.altKey\n    || e.ctrlKey\n    || e.metaKey\n    || this.mouseX === -1\n    || this._mouseY === -1\n    || this._dragging\n  ) { return }\n\n  this._emitEvent(Messages.TOOL_CLICKED, { x: this.mouseX, y: this.mouseY })\n  e.preventDefault()\n}\n\nfunction toolButtonHandler(e) {\n\n  // Remove highlight from last tool button\n  $('.selected').each(function () {\n    this.classList.remove('selected')\n    this.classList.add('unselected')\n    // $(this).removeClass('selected')\n    // $(this).addClass('unselected')\n  })\n\n  let el = e.target\n  let $el = $(el)\n\n  if (el.tagName.toLowerCase()==='img') {\n    el = el.parentNode // button\n    $el = $(el)\n  }\n\n  // Add highlight\n  $el.removeClass('unselected')\n  $el.addClass('selected')\n\n  this.toolName = $el.attr('data-tool')\n  this.toolWidth = $el.attr('data-size')\n  this.currentTool = this.gameTools[this.toolName]\n\n  this.toolColour = '' // $el.attr('data-colour')\n\n  // $(toolOutputID).html('Tools')\n\n  if (this.toolName !== 'query') {\n    this.$canvas.removeClass('helpPointer')\n    this.$canvas.addClass('pointer')\n  } else {\n    this.$canvas.removeClass('pointer')\n    this.$canvas.addClass('helpPointer')\n  }\n\n  e.preventDefault()\n}\n\nInputStatus.prototype.speedChangeHandler = function (e) {\n  const requestedSpeed = $('#pauseRequest').text()\n  const newRequest = requestedSpeed === 'Pause' ? 'Play' : 'Pause'\n  $('#pauseRequest').text(newRequest)\n  this._emitEvent(Messages.SPEED_CHANGE, requestedSpeed)\n}\n\nInputStatus.prototype.clearTool = function () {\n  if (this.toolName === 'query') {\n    this.$canvas.removeClass('helpPointer')\n    this.$canvas.addClass('pointer')\n  }\n\n  this.currentTool = null\n  this.toolWidth = 0\n  this.toolColour = ''\n  $('.selected').removeClass('selected')\n}\n\nconst makeHandler = function (message) {\n  const m = Messages[message]\n\n  return function (e) {\n    this._emitEvent(m)\n  }\n}\n\nvar budgetHandler = makeHandler('BUDGET_REQUESTED')\nvar debugHandler = makeHandler('DEBUG_WINDOW_REQUESTED')\nvar disasterHandler = makeHandler('DISASTER_REQUESTED')\nvar evalHandler = makeHandler('EVAL_REQUESTED')\nvar screenshotHandler = makeHandler('SCREENSHOT_WINDOW_REQUESTED')\nvar settingsHandler = makeHandler('SETTINGS_WINDOW_REQUESTED')\nvar saveHandler = makeHandler('SAVE_REQUESTED')\n\nexport { InputStatus }\n","import { MiscUtils } from '../utils'\nimport { Text } from '../messages/text'\n\nconst TIMEOUT_SECS = 30\n\nconst close = function (e) {\n  if (e) e.preventDefault()\n\n  if (this._element.is(':visible')) this._element.toggle()\n}\n\nconst handleClick = function (e) {\n  e.preventDefault()\n\n  if (this._x === -1 || this._y === -1) return\n\n  this._map.centreOn(this._x, this._y)\n}\n\nfunction Notification(element, map, initialText) {\n  element = MiscUtils.normaliseDOMid(element)\n\n  this._map = map\n  this._element = $(element)\n  this._timeout = null\n\n  this._handleClick = handleClick.bind(this)\n\n  // The position to centre on when the link is clicked\n  this._x = -1\n  this._y = -1\n\n  this._element.click(this._handleClick)\n  this.close = close.bind(this)\n\n  if (this._element.is(':visible')) this._element.toggle()\n}\n\nNotification.prototype._displayLink = function (text, x, y) {\n  if (this._timeout !== null) {\n    window.clearTimeout(this._timeout)\n    this._timeout = null\n  }\n\n  this._element.text(text)\n\n  this._x = x\n  this._y = y\n\n  this._element.addClass('pointer')\n\n  if (!this._element.is(':visible')) this._element.toggle()\n\n  this._timeout = window.setTimeout(\n    function () {\n      this._timeout = null\n      this.close()\n    }.bind(this),\n    TIMEOUT_SECS * 1000\n  )\n}\n\nNotification.prototype._displayText = function (text, x, y) {\n  if (this._timeout !== null) {\n    window.clearTimeout(this._timeout)\n    this._timeout = null\n  }\n\n  this._element.removeClass('pointer')\n  this._element.text(text)\n  this._x = -1\n  this._y = -1\n\n  if (!this._element.is(':visible')) this._element.toggle()\n\n  this._timeout = window.setTimeout(\n    function () {\n      this._timeout = null\n      this.close()\n    }.bind(this),\n    TIMEOUT_SECS * 1000\n  )\n}\n\nNotification.prototype.createMessage = function (message) {\n  if (\n    message.hasOwnProperty('data')\n    && message.data !== undefined\n    && message.data.hasOwnProperty('x')\n    && message.data.hasOwnProperty('y')\n  ) {\n    this._displayLink(\n      Text.messageText[message.subject],\n      message.data.x,\n      message.data.y\n    )\n    return\n  }\n\n  this._displayText(Text.messageText[message.subject])\n}\n\nNotification.prototype.badNews = function (message) {\n  this._element.removeClass('neutral')\n  this._element.removeClass('good')\n  this._element.addClass('bad')\n  this.createMessage(message)\n}\n\nNotification.prototype.goodNews = function (message) {\n  this._element.removeClass('neutral')\n  this._element.removeClass('bad')\n  this._element.addClass('good')\n  this.createMessage(message)\n}\n\nNotification.prototype.news = function (message) {\n  this._element.removeClass('good')\n  this._element.removeClass('bad')\n  this._element.addClass('neutral')\n  this.createMessage(message)\n}\n\nexport { Notification }\n","import { Config } from '../config'\nimport { QUERY_WINDOW_CLOSED } from '../messages'\nimport { ModalWindow } from './modalWindow'\nimport { MiscUtils } from '../utils'\n\nconst QueryWindow = ModalWindow(function () {\n  this._debugToggled = false\n  $(queryFormID).on('submit', submit.bind(this))\n})\n\nvar queryFormID = '#queryForm'\nconst queryOKID = '#queryOK'\n\nvar submit = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nQueryWindow.prototype.close = function () {\n  this._toggleDisplay()\n  this._emitEvent(QUERY_WINDOW_CLOSED)\n}\n\nQueryWindow.prototype.open = function () {\n  if ((Config.debug || Config.queryDebug) && !this._debugToggled) {\n    this._debugToggled = true\n    $('.queryDebug').removeClass('hidden')\n  }\n\n  this._toggleDisplay()\n  $(queryOKID).focus()\n}\n\nexport { QueryWindow }\n","import { VALVES_UPDATED } from '../messages'\nimport { MiscUtils } from '../utils'\n\nfunction RCI(parentNode, eventSource, id) {\n\n  if (arguments.length < 2) {\n    throw new Error(\n      'RCI constructor called with too few arguments '\n        + [].toString.apply(arguments)\n    )\n  }\n\n  if (id === undefined) id = RCI.DEFAULT_ID\n\n  if (typeof parentNode === 'string') {\n    const orig = parentNode\n    parentNode = $(MiscUtils.normaliseDOMid(parentNode))\n    parentNode = parentNode.length === 0 ? null : parentNode[0]\n    if (parentNode === null) throw new Error('Node ' + orig + ' not found')\n  }\n\n  // Each bar is 1 unit of padding wide, and there are 2 units\n  // of padding between the 3 bars. There are 2 units of padding\n  // either side. So 9 units of padding total\n  // Each bar can be at most bucket rectangles tall, but we multiply\n  // that by 2 as we can have positive and negative directions. There\n  // should be 1 unit of padding either side. The text box in the middle\n  // is 1 unit of padding\n  this._padding = 3 // 3 rectangles in each bit of padding\n  this._buckets = 10 // 0.2000 is scaled in to 10 buckets\n  this._rectSize = 5 // Each rect is 5px\n  this._scale = Math.floor(2000 / this._buckets)\n\n  this._canvas = $('<canvas></canvas>', { id })[0]\n\n  // Remove any existing element with the same id\n  const elems = $(MiscUtils.normaliseDOMid(id))\n  const current = elems.length > 0 ? elems[0] : null\n  if (current !== null) {\n    if (current.parentNode === parentNode) { parentNode.replaceChild(this._canvas, current) } else throw new Error('ID ' + id + ' already exists in document!')\n  } else parentNode.appendChild(this._canvas)\n\n  // We might be created before our container has appeared on screen\n  this._initialisedBounds = false\n\n  eventSource.addEventListener(VALVES_UPDATED, this.update.bind(this))\n}\n\nRCI.prototype._clear = function (ctx) {\n  ctx.clearRect(0, 0, this._canvas.width, this._canvas.height)\n}\n\nRCI.prototype._drawRect = function (ctx) {\n  // The rect is inset by one unit of padding\n  const boxLeft = this._padding * this._rectSize\n  // and is the length of a bar plus a unit of padding down\n  const boxTop = (this._buckets + this._padding) * this._rectSize\n  // It must accomodate 3 bars, 2 bits of internal padding\n  // with padding either side\n  const boxWidth = 7 * this._padding * this._rectSize\n  const boxHeight = this._padding * this._rectSize\n\n  ctx.fillStyle = 'rgb(192, 192, 192)'\n  ctx.fillRect(boxLeft, boxTop, boxWidth, boxHeight)\n}\n\nRCI.prototype._drawValue = function (ctx, index, value) {\n  // Need to scale com and ind\n  if (index > 1) value = Math.floor((2000 / 1500) * value)\n\n  const colours = ['rgb(0,255,0)', 'rgb(0, 0, 139)', 'rgb(255, 255, 0)']\n  const barHeightRect = Math.floor(Math.abs(value) / this._scale)\n  const barStartY =\n    value >= 0\n      ? this._buckets + this._padding - barHeightRect\n      : this._buckets + 2 * this._padding\n  const barStartX = 2 * this._padding + index * 2 * this._padding\n\n  ctx.fillStyle = colours[index]\n  ctx.fillRect(\n    barStartX * this._rectSize,\n    barStartY * this._rectSize,\n    this._padding * this._rectSize,\n    barHeightRect * this._rectSize\n  )\n}\n\nRCI.prototype._drawLabel = function (ctx, index) {\n  const labels = ['R', 'C', 'I']\n  const textLeft =\n    2 * this._padding\n    + index * 2 * this._padding\n    + Math.floor(this._padding / 2)\n\n  ctx.font = 'normal xx-small sans-serif'\n  ctx.fillStyle = 'rgb(0, 0, 0)'\n  ctx.textBaseline = 'bottom'\n  ctx.fillText(\n    labels[index],\n    textLeft * this._rectSize,\n    (this._buckets + 2 * this._padding) * this._rectSize\n  )\n}\n\nRCI.prototype.update = function (data) {\n  if (!this._initialised) {\n    // The canvas is assumed to fill its container on-screen\n    const rect = this._canvas.parentNode.getBoundingClientRect()\n    this._canvas.width = rect.width\n    this._canvas.height = rect.height\n    this._canvas.style.margin = '0'\n    this._canvas.style.padding = '0'\n    this._intialised = true\n  }\n\n  const ctx = this._canvas.getContext('2d')\n  this._clear(ctx)\n  this._drawRect(ctx)\n\n  const values = [data.residential, data.commercial, data.industrial]\n  for (let i = 0; i < 3; i++) {\n    this._drawValue(ctx, i, values[i])\n    this._drawLabel(ctx, i)\n  }\n}\n\nObject.defineProperty(\n  RCI,\n  'DEFAULT_ID',\n  MiscUtils.makeConstantDescriptor('RCICanvas')\n)\n\nexport { RCI }\n","import { SAVE_WINDOW_CLOSED } from '../messages'\nimport { ModalWindow } from './modalWindow'\n\nconst saveFormID = '#saveForm'\nconst saveOKID = '#saveOK'\n\nconst submit = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nconst SaveWindow = ModalWindow(function () {\n  $(saveFormID).on('submit', submit.bind(this))\n})\n\nSaveWindow.prototype.close = function () {\n  this._toggleDisplay()\n  this._emitEvent(SAVE_WINDOW_CLOSED)\n}\n\nSaveWindow.prototype.open = function () {\n  this._toggleDisplay()\n  $(saveOKID).focus()\n}\n\nexport { SaveWindow }\n","import { SCREENSHOT_LINK_CLOSED } from '../messages'\nimport { ModalWindow } from './modalWindow'\nimport { MiscUtils } from './utils'\n\nconst screenshotLinkFormID = '#screenshotLinkForm'\nconst screenshotLinkOKID = '#screenshotLinkOK'\nconst screenshotLinkID = '#screenshotLink'\n\nconst cancel = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nconst submit = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nconst ScreenshotLinkWindow = ModalWindow(function () {\n  $(screenshotLinkFormID).on('submit', submit.bind(this))\n})\n\nScreenshotLinkWindow.prototype.close = function () {\n  this._toggleDisplay()\n  this._emitEvent(SCREENSHOT_LINK_CLOSED)\n}\n\nScreenshotLinkWindow.prototype.open = function (screenshotLink) {\n  $(screenshotLinkID).attr('href', screenshotLink)\n  this._toggleDisplay()\n}\n\nexport { ScreenshotLinkWindow }\n","import { SCREENSHOT_WINDOW_CLOSED } from '../messages'\nimport { ModalWindow } from '../windows/modalWindow'\nimport { MiscUtils } from '../utils'\n\nconst ScreenshotWindow = ModalWindow(function () {\n  $(screenshotCancelID).on('click', cancel.bind(this))\n  $(screenshotFormID).on('submit', submit.bind(this))\n})\n\nvar screenshotCancelID = '#screenshotCancel'\nvar screenshotFormID = '#screenshotForm'\nconst screenshotOKID = '#screenshotOK'\n\nScreenshotWindow.prototype.close = function (action) {\n  action = action || null\n\n  this._toggleDisplay()\n  this._emitEvent(SCREENSHOT_WINDOW_CLOSED, action)\n}\n\nvar cancel = function (e) {\n  e.preventDefault()\n  this.close(null)\n}\n\nvar submit = function (e) {\n  e.preventDefault()\n\n  let action = null\n\n  // Get choice\n  const screenshotType = $('.screenshotType:checked').val()\n  if (screenshotType === 'visible') action = ScreenshotWindow.SCREENSHOT_VISIBLE\n  else action = ScreenshotWindow.SCREENSHOT_ALL\n\n  this.close(action)\n}\n\nScreenshotWindow.prototype.open = function (screenshotData) {\n  this._toggleDisplay()\n}\n\nconst defineAction = (function () {\n  let uid = 1\n\n  return function (name) {\n    Object.defineProperty(\n      ScreenshotWindow,\n      name,\n      MiscUtils.makeConstantDescriptor(uid)\n    )\n    uid += 1\n  }\n})()\n\ndefineAction('SCREENSHOT_VISIBLE')\ndefineAction('SCREENSHOT_ALL')\n\nexport { ScreenshotWindow }\n","import { SETTINGS_WINDOW_CLOSED } from '../messages'\nimport { ModalWindow } from './modalWindow'\nimport { MiscUtils } from '../utils'\nimport { Simulation } from '../simulation'\n\nconst settingsCancelID = '#settingsCancel'\nconst settingsFormID = '#settingsForm'\nconst settingsOKID = '#settingsOK'\nconst autoBudgetYesID = '#autoBudgetYes'\nconst autoBudgetNoID = '#autoBudgetNo'\nconst autoBulldozeYesID = '#autoBulldozeYes'\nconst autoBulldozeNoID = '#autoBulldozeNo'\nconst speedSlowID = '#speedSlow'\nconst speedMedID = '#speedMed'\nconst speedFastID = '#speedFast'\nconst disastersYesID = '#disastersYes'\nconst disastersNoID = '#disastersNo'\n\nconst cancel = function (e) {\n  e.preventDefault()\n  this.close([])\n}\n\nconst submit = function (e) {\n  e.preventDefault()\n\n  const actions = []\n\n  let shouldAutoBudget = $('.autoBudgetSetting:checked').val()\n  if (shouldAutoBudget === 'true') shouldAutoBudget = true\n  else shouldAutoBudget = false\n  actions.push({ action: SettingsWindow.AUTOBUDGET, data: shouldAutoBudget })\n\n  let shouldAutoBulldoze = $('.autoBulldozeSetting:checked').val()\n  if (shouldAutoBulldoze === 'true') shouldAutoBulldoze = true\n  else shouldAutoBulldoze = false\n  actions.push({\n    action: SettingsWindow.AUTOBULLDOZE,\n    data: shouldAutoBulldoze,\n  })\n\n  const speed = $('.speedSetting:checked').val() - 0\n  actions.push({ action: SettingsWindow.SPEED, data: speed })\n\n  let shouldEnableDisasters = $('.enableDisastersSetting:checked').val()\n  if (shouldEnableDisasters === 'true') shouldEnableDisasters = true\n  else shouldEnableDisasters = false\n  actions.push({\n    action: SettingsWindow.DISASTERS_CHANGED,\n    data: shouldEnableDisasters,\n  })\n\n  this.close(actions)\n}\n\n\nconst SettingsWindow = ModalWindow(function () {\n  $(settingsCancelID).on('click', cancel.bind(this))\n  $(settingsFormID).on('submit', submit.bind(this))\n})\n\nSettingsWindow.prototype.close = function (actions) {\n  actions = actions || []\n  this._emitEvent(SETTINGS_WINDOW_CLOSED, actions)\n  this._toggleDisplay()\n}\n\nSettingsWindow.prototype.open = function (settingsData) {\n  if (settingsData.autoBudget) $(autoBudgetYesID).prop('checked', true)\n  else $(autoBudgetNoID).prop('checked', true)\n\n  if (settingsData.autoBulldoze) $(autoBulldozeYesID).prop('checked', true)\n  else $(autoBulldozeNoID).prop('checked', true)\n\n  if (settingsData.speed === Simulation.SPEED_SLOW) { $(speedSlowID).prop('checked', true) } else if (settingsData.speed === Simulation.SPEED_MED) { $(speedMedID).prop('checked', true) } else $(speedFastID).prop('checked', true)\n\n  if (settingsData.disasters) $(disastersYesID).prop('checked', true)\n  else $(disastersNoID).prop('checked', true)\n\n  this._toggleDisplay()\n}\n\nconst defineAction = (function () {\n  let uid = 0\n\n  return function (name) {\n    Object.defineProperty(\n      SettingsWindow,\n      name,\n      MiscUtils.makeConstantDescriptor(uid)\n    )\n    uid += 1\n  }\n})()\n\ndefineAction('AUTOBUDGET')\ndefineAction('AUTOBULLDOZE')\ndefineAction('SPEED')\ndefineAction('DISASTERS_CHANGED')\n\nexport { SettingsWindow }\n","import { TOUCH_WINDOW_CLOSED } from '../messages'\nimport { ModalWindow } from './modalWindow'\n\nconst touchFormID = '#touchForm'\nconst touchOKID = '#touchOK'\n\nconst submit = function (e) {\n  e.preventDefault()\n  this.close()\n}\n\nconst TouchWarnWindow = ModalWindow(function () {\n  $(touchFormID).on('submit', submit.bind(this))\n})\n\nTouchWarnWindow.prototype.close = function () {\n  this._toggleDisplay()\n  this._emitEvent(TOUCH_WINDOW_CLOSED)\n}\n\nTouchWarnWindow.prototype.open = function () {\n  this._toggleDisplay()\n  $(touchOKID).focus()\n}\n\nexport { TouchWarnWindow }\n","import { BaseTool } from './tools/baseTool'\nimport { BudgetWindow } from './windows/budgetWindow'\nimport { Config } from './config'\nimport { CongratsWindow } from './windows/congratsWindow'\nimport { DebugWindow } from './windows/debugWindow'\nimport { DisasterWindow } from './windows/disasterWindow'\nimport { EvaluationWindow } from './windows/evaluationWindow'\nimport { GameCanvas } from './gameCanvas'\nimport { GameMap } from './map/gameMap'\nimport { InfoBar } from './windows/infoBar'\nimport { InputStatus } from './inputStatus'\nimport { MapGenerator } from './map/mapGenerator'\nimport { MonsterTV } from './monsterTV'\n// import { NagWindow } from './nagWindow'\nimport { Notification } from './windows/notification'\nimport { QueryWindow } from './windows/queryWindow'\nimport { Random } from './random'\nimport { RCI } from './windows/rci'\nimport { SaveWindow } from './windows/saveWindow'\nimport { ScreenshotLinkWindow } from './windows/screenshotLinkWindow'\nimport { ScreenshotWindow } from './windows/screenshotWindow'\nimport { SettingsWindow } from './windows/settingsWindow'\nimport { Simulation } from './simulation'\nimport { Storage } from './storage'\nimport { Text } from './messages/text'\nimport { TileSet } from './tiles/tileSet'\nimport { TouchWarnWindow } from './windows/touchWarnWindow'\nimport * as Messages from './messages'\n\nlet ticks = 0\n\nfunction tick() {\n\n  ticks++\n\n  this.handleInput()\n\n  if (this.dialogOpen) {\n    window.setTimeout(this.tick, 0)\n    return\n  }\n\n  if (!this.simulation.isPaused()) {\n    // Run the sim\n    this.simulation.simTick()\n  }\n\n  // Run this even when paused: you can still build when paused\n  this.mouse = this.calculateMouseForPaint()\n\n  window.setTimeout(this.tick, this.tickDuration)\n}\n\nfunction commonAnimate() {\n  if (this.dialogShowing) {\n    nextFrame(this.animate)\n    return\n  }\n\n  // Every two ticks, animate spites like train, airplane, boat\n  if (!this.isPaused && ticks % 2 === 1) {\n    this.simulation.spriteManager.moveObjects(\n      this.simulation._constructSimData()\n    )\n  }\n\n  const sprites = this.calculateSpritesForPaint(this.gameCanvas)\n  this.gameCanvas.paint(this.mouse, sprites, this.isPaused)\n\n  // sprites = this.calculateSpritesForPaint(this.monsterTV.canvas)\n  // this.monsterTV.paint(sprites, this.isPaused)\n\n  nextFrame(this.animate)\n}\n\nconst debugAnimate = function () {\n  const date = new Date()\n  const elapsed = Math.floor((date - this.animStart) / 1000)\n\n  if (elapsed > this.lastElapsed && this.frameCount > 0) {\n    $('#fpsValue').text(Math.floor(this.frameCount / elapsed))\n    this.lastElapsed = elapsed\n  }\n\n  this.frameCount++\n  this.commonAnimate()\n}\n\nconst disasterTimeout = 20 * 1000\n\nconst tileNames = [\n  // 'asia',\n  'classic',\n  'earth',\n  'future',\n  // 'medieval',\n  'moon',\n  // 'snow',\n  // 'wild-west'\n]\n\nconst tileSetCache = {}\n\nlet tileSetImage\n\n\n// Will be bound on construction\nconst touchListener = function (e) {\n  window.removeEventListener('touchstart', this.touchListener, false)\n  this._openWindow = 'touchWindow'\n  this.dialogOpen = true\n  this.touchWindow.open()\n}\n\nconst nextFrame =\n  window.requestAnimationFrame\n  || window.mozRequestAnimationFrame\n  || window.webkitRequestAnimationFrame\n\n\nfunction makeWindowOpenHandler(winName, customFn) {\n  customFn = customFn || null\n\n  return function () {\n    if (this.dialogOpen) {\n      console.warn(\n        'Request made to open ' + winName + ' window. There is a dialog open!'\n      )\n      return\n    }\n\n    this.dialogOpen = true\n    this._openWindow = winName + 'Window'\n    const win = winName + 'Window'\n    let data = []\n\n    if (customFn) data = customFn()\n\n    this[win].open.apply(this[win], data)\n  }\n}\n\nclass Game {\n\n  constructor({\n    map: gameMap,\n    tileSet,\n    snowTileSet,\n    spriteSheet,\n    difficulty = 0,\n    name = 'Microcity'\n  }) {\n\n    let savedGame\n\n    if (!gameMap.isSavedGame) {\n      this.gameMap = gameMap\n      savedGame = null\n    } else {\n      // Saved game\n      this.gameMap = new GameMap(\n        gameMap.width,\n        gameMap.height\n      )\n      savedGame = gameMap\n    }\n\n    this.tileSet = tileSet\n    this.spriteSheet = spriteSheet\n    this.defaultSpeed = Simulation.SPEED_MED\n    this.difficulty = difficulty\n    this.simulation = new Simulation(\n      this.gameMap,\n      this.difficulty,\n      this.defaultSpeed,\n      savedGame\n    )\n\n    // Tick duration in milliseconds - originally 0 - see function tick() above\n    this.tickDuration = 30\n\n    this.name = name || 'Microcity'\n    this.everClicked = false\n\n    if (savedGame) this.loadInitial(savedGame)\n\n    this.rci = new RCI('RCIContainer', this.simulation)\n\n    // Note: must init canvas before inputStatus\n    this.gameCanvas = new GameCanvas('canvasContainer')\n    this.gameCanvas.init(this.gameMap, this.tileSet, this.spriteSheet)\n    this.inputStatus = new InputStatus(this.gameMap, tileSet.tileWidth)\n\n    this.dialogOpen = false\n    this._openWindow = null\n    this.mouse = null\n    this.lastCoord = null\n    this.simNeededBudget = false\n    this.isPaused = false\n    this.lastBadMessageTime = null\n\n    const self = this\n\n    // if (!this.everClicked) {\n\n    //   this.nagger = window.setTimeout(function () {\n    //     self.dialogOpen = true\n    //     self._openWindow = 'nagWindow'\n    //     self.nagWindow.open()\n    //   }, 30 * 60 * 1000)\n\n    //   $('.nag').each(function () {\n    //     $(this).click(function (e) {\n    //       if (self.nagger !== null) {\n    //         window.clearTimeout(self.nagger)\n    //         self.nagger = null\n    //         self.everClicked = true\n    //       }\n\n    //       return true\n    //     })\n    //   })\n    // }\n\n    // Initialise monsterTV\n\n    // this.monsterTV = new MonsterTV(\n    //   this.gameMap,\n    //   tileSet,\n    //   spriteSheet,\n    //   this.gameCanvas.animationManager\n    // )\n\n    const opacityLayerID = 'opaque'\n\n    // this.genericDialogClosure = genericDialogClosure.bind(this)\n\n    // Hook up listeners to open/close evaluation window\n    this.handleEvalRequest = makeWindowOpenHandler(\n      'eval',\n      function () {\n        return [this.simulation.evaluation]\n      }.bind(this)\n    )\n\n    this.evalWindow = new EvaluationWindow(opacityLayerID, 'evalWindow')\n    this.evalWindow.addEventListener(\n      Messages.EVAL_WINDOW_CLOSED,\n      this.genericDialogClosure\n    )\n    this.inputStatus.addEventListener(\n      Messages.EVAL_REQUESTED,\n      this.handleEvalRequest.bind(this)\n    )\n\n    // ... and similarly for the budget window\n    this.handleBudgetRequest = makeWindowOpenHandler(\n      'budget',\n      function () {\n        const budgetData = {\n          roadMaintenanceBudget: this.simulation.budget.roadMaintenanceBudget,\n          roadRate: Math.floor(this.simulation.budget.roadPercent * 100),\n          fireMaintenanceBudget: this.simulation.budget.fireMaintenanceBudget,\n          fireRate: Math.floor(this.simulation.budget.firePercent * 100),\n          policeMaintenanceBudget: this.simulation.budget.policeMaintenanceBudget,\n          policeRate: Math.floor(this.simulation.budget.policePercent * 100),\n          taxRate: this.simulation.budget.cityTax,\n          totalFunds: this.simulation.budget.totalFunds,\n          taxesCollected: this.simulation.budget.taxFund,\n        }\n\n        return [budgetData]\n      }.bind(this)\n    )\n\n    this.budgetWindow = new BudgetWindow(opacityLayerID, 'budget')\n    this.budgetWindow.addEventListener(\n      Messages.BUDGET_WINDOW_CLOSED,\n      this.handleBudgetWindowClosure.bind(this)\n    )\n    this.inputStatus.addEventListener(\n      Messages.BUDGET_REQUESTED,\n      this.handleBudgetRequest.bind(this)\n    )\n\n    // ... and also the disaster window\n    this.handleDisasterRequest = makeWindowOpenHandler('disaster')\n    this.disasterWindow = new DisasterWindow(opacityLayerID, 'disasterWindow')\n    this.disasterWindow.addEventListener(\n      Messages.DISASTER_WINDOW_CLOSED,\n      this.handleDisasterWindowClosure.bind(this)\n    )\n    this.inputStatus.addEventListener(\n      Messages.DISASTER_REQUESTED,\n      this.handleDisasterRequest.bind(this)\n    )\n\n    // ... the debug window\n    this.handleDebugRequest = makeWindowOpenHandler('debug')\n    this.debugWindow = new DebugWindow(opacityLayerID, 'debugWindow')\n    this.debugWindow.addEventListener(\n      Messages.DEBUG_WINDOW_CLOSED,\n      this.handleDebugWindowClosure.bind(this)\n    )\n    this.inputStatus.addEventListener(\n      Messages.DEBUG_WINDOW_REQUESTED,\n      this.handleDebugRequest.bind(this)\n    )\n\n\n    // ... the settings window\n    this.handleSettingsRequest = makeWindowOpenHandler(\n      'settings',\n      function () {\n        return [\n          {\n            autoBudget: this.simulation.budget.autoBudget,\n            autoBulldoze: BaseTool.getAutoBulldoze(),\n            speed: this.defaultSpeed,\n            disasters: this.simulation.disasterManager.disastersEnabled,\n          },\n        ]\n      }.bind(this)\n    )\n    this.settingsWindow = new SettingsWindow(opacityLayerID, 'settingsWindow')\n    this.settingsWindow.addEventListener(\n      Messages.SETTINGS_WINDOW_CLOSED,\n      this.handleSettingsWindowClosure.bind(this)\n    )\n    this.inputStatus.addEventListener(\n      Messages.SETTINGS_WINDOW_REQUESTED,\n      this.handleSettingsRequest.bind(this)\n    )\n\n    // ... the screenshot window\n    this.handleScreenshotRequest = makeWindowOpenHandler('screenshot')\n    this.screenshotWindow = new ScreenshotWindow(\n      opacityLayerID,\n      'screenshotWindow'\n    )\n    this.screenshotWindow.addEventListener(\n      Messages.SCREENSHOT_WINDOW_CLOSED,\n      this.handleScreenshotWindowClosure.bind(this)\n    )\n    this.inputStatus.addEventListener(\n      Messages.SCREENSHOT_WINDOW_REQUESTED,\n      this.handleScreenshotRequest.bind(this)\n    )\n\n    // ... the screenshot link window\n    this.screenshotLinkWindow = new ScreenshotLinkWindow(\n      opacityLayerID,\n      'screenshotLinkWindow'\n    )\n    this.screenshotLinkWindow.addEventListener(\n      Messages.SCREENSHOT_LINK_CLOSED,\n      this.genericDialogClosure\n    )\n\n    // ... the save confirmation window\n    this.saveWindow = new SaveWindow(opacityLayerID, 'saveWindow')\n    this.saveWindow.addEventListener(\n      Messages.SAVE_WINDOW_CLOSED,\n      this.genericDialogClosure\n    )\n\n    // // ... the nag confirmation window\n    // this.nagWindow = new NagWindow(opacityLayerID, 'nagWindow')\n    // this.nagWindow.addEventListener(\n    //   Messages.NAG_WINDOW_CLOSED,\n    //   this.genericDialogClosure\n    // )\n\n    // ... the touch warn window\n    this.touchWindow = new TouchWarnWindow(opacityLayerID, 'touchWarnWindow')\n    this.touchWindow.addEventListener(\n      Messages.TOUCH_WINDOW_CLOSED,\n      this.genericDialogClosure\n    )\n\n    // ... and finally the query window\n    this.handleQueryRequest = makeWindowOpenHandler('query')\n    this.queryWindow = new QueryWindow(opacityLayerID, 'queryWindow')\n    this.queryWindow.addEventListener(\n      Messages.QUERY_WINDOW_CLOSED,\n      this.genericDialogClosure\n    )\n    this.inputStatus.addEventListener(\n      Messages.QUERY_WINDOW_NEEDED,\n      this.handleQueryRequest.bind(this)\n    )\n\n    // Listen for clicks on the save button\n    this.inputStatus.addEventListener(\n      Messages.SAVE_REQUESTED,\n      this.handleSave.bind(this)\n    )\n\n    // Front end messages\n    this.simulation.addEventListener(\n      Messages.FRONT_END_MESSAGE,\n      this.processFrontEndMessage.bind(this)\n    )\n\n    // Budget messages\n    this.simulation.addEventListener(\n      Messages.BUDGET_NEEDED,\n      this.handleMandatoryBudget.bind(this)\n    )\n\n    // Tool clicks\n    this.inputStatus.addEventListener(\n      Messages.TOOL_CLICKED,\n      this.handleTool.bind(this)\n    )\n\n    // Pause\n    this.inputStatus.addEventListener(\n      Messages.SPEED_CHANGE,\n      this.handlePause.bind(this)\n    )\n\n    // Date changes\n\n    this.simulation.addEventListener(\n      Messages.DATE_UPDATED, this.onDateChange.bind(this)\n    )\n\n    this.infoBar = InfoBar(\n      'cclass',\n      'population',\n      'score',\n      'funds',\n      'date',\n      'name'\n    )\n\n    this.resetInfoBar()\n\n    this._notificationBar = new Notification(\n      '#notifications',\n      this.gameCanvas\n      // Text.messageText[Messages.WELCOME]\n    )\n\n    // Track when various milestones are first reached\n    this._reachedTown =\n      this._reachedCity =\n      this._reachedCapital =\n      this._reachedMetropolis =\n      this._reacedMegalopolis =\n      false\n\n    // Congrats window\n\n    // this.congratsWindow = new CongratsWindow(opacityLayerID, 'congratsWindow')\n    // this.congratsWindow.addEventListener(\n    //   Messages.CONGRATS_WINDOW_CLOSED,\n    //   this.genericDialogClosure\n    // )\n\n    // Listen for touches, so we can warn tablet users\n    // this.touchListener = touchListener.bind(this)\n    // window.addEventListener('touchstart', this.touchListener, false)\n\n    // Unhide controls\n    // this.revealControls()\n\n    this._notificationBar._element.toggle() // Hide welcome notification\n\n\n    // Select tileset\n\n    const $tileSelect = $('#tilesetSelect')\n    if ($tileSelect.length) {\n      $tileSelect?.on('change', (e) => {\n        const name = e.target.value\n        this.setTileset(name)\n      })\n      if ($tileSelect.val() !== 'classic') $tileSelect.val('classic')\n    }\n\n    /**\n     * Save\n     */\n    const $export = $('#exportButton')\n    $export.on('click', () => {\n\n      const data = {\n        name: this.name,\n        everClicked: this.everClicked\n      }\n      BaseTool.save(data)\n      this.simulation.save(data)\n      Storage.saveGame(data)\n\n      console.log('Save', data)\n\n      const a = document.createElement('a')\n      a.download = 'microcity.json'\n      a.href = 'data:text/json;charset=utf-8,'\n        + encodeURIComponent(JSON.stringify(data))\n      a.click()\n    })\n\n    /**\n     * Load\n     */\n    const $import = $('#importButton')\n    const $importFileInput = $('#importFileInput')\n\n    $import.on('click', (e) => {\n      $importFileInput.click()\n    })\n\n    $importFileInput.on('change', ({ target: { files } }) => {\n      const reader = new FileReader()\n      reader.onload = ({ target: { result } }) => {\n        try {\n\n          const data = JSON.parse(result)\n          const map = MapGenerator(data.width, data.height)\n\n          this.reload(map, data)\n\n        } catch (e) {\n          //\n        }\n      }\n      reader.onerror = e => console.error(e)\n      reader.readAsText(files[0])\n    })\n\n    /**\n     * New game\n     */\n    const $newGame = $('#newGameButton')\n    $newGame.on('click', () => {\n\n      const map = MapGenerator(120, 100)\n      const data = {\n        name: 'Microcity',\n        everClicked: false,\n        map\n      }\n      this.reload(map, data)\n    })\n\n    /**\n     * Zoom\n     */\n    $('#zoomInButton').on('click', () => {\n      this.gameCanvas.zoomIn()\n    })\n    $('#zoomOutButton').on('click', () => {\n      this.gameCanvas.zoomOut()\n    })\n\n\n\n    // Run the sim\n    this.tick = tick.bind(this)\n    this.tick()\n\n    // Paint the map\n    const debug = Config.debug || Config.gameDebug\n    if (debug) {\n      $('#debug').toggle()\n      this.frameCount = 0\n      this.animStart = new Date()\n      this.lastElapsed = -1\n    }\n\n    this.commonAnimate = commonAnimate.bind(this)\n    this.animate = (debug ? debugAnimate : this.commonAnimate).bind(this)\n    this.animate()\n  }\n\n  save() {\n    const data = { name: this.name, everClicked: this.everClicked }\n    BaseTool.save(data)\n    this.simulation.save(data)\n    Storage.saveGame(data)\n  }\n\n  loadInitial(data) {\n    this.name = data.name\n    this.everClicked = data.everClicked\n    BaseTool.load(data)\n    this.simulation.load(data)\n    Storage.saveGame(data)\n  }\n\n  reload(map, data) {\n    this.gameMap = map\n\n    // The order is important\n    this.simulation.reset(map)\n    this.loadInitial(data)\n    this.simulation.init()\n\n    this.gameCanvas.reset(map)\n    this.resetInfoBar()\n  }\n\n  resetInfoBar() {\n    this.infoBar(this.simulation, {\n      classification: this.simulation.evaluation.cityClass,\n      population: this.simulation.evaluation.cityPop,\n      score: this.simulation.evaluation.cityScore,\n      funds: this.simulation.budget.totalFunds,\n      date: this.simulation.getDate(),\n      name: this.name,\n    })  \n  }\n\n  revealControls() {\n\n    $('.initialHidden').each(function (e) {\n      $(this).removeClass('initialHidden')\n    })\n\n    // this._notificationBar.news({ subject: Messages.WELCOME })\n    this.rci.update({ residential: 750, commercial: 750, industrial: 750 })\n  }\n\n  genericDialogClosure() {\n    this.dialogOpen = false\n    this._openWindow = null\n  }\n\n\n  setTileset(name) {\n\n    if (tileSetCache[name]) {\n      this.tileSet = tileSetCache[name]\n      this.gameCanvas.changeTileSet(this.tileSet)\n      return\n    }\n\n    tileSetImage = tileSetImage || document.createElement('img')\n\n    tileSetImage.src = `/images/tiles/${name}.png`\n\n    tileSetImage.onload = () => {\n      this.tileSet = tileSetCache[name] = new TileSet(\n        tileSetImage,\n        () => this.gameCanvas.changeTileSet(this.tileSet),\n        () => delete tileSetCache[name]\n      )\n    }\n  }\n\n\n  onDateChange(date) {\n\n    // if (date.month === 10 && Random.getChance(10))\n    //   this.gameCanvas.changeTileSet(this.snowTileSet)\n    // else if (date.month === 1) this.gameCanvas.changeTileSet(this.tileSet)\n\n    // return\n\n    // if (date.month % 6 === 0) {\n    //   this.setTileset(\n    //     tileNames[Math.round(Math.random() * tileNames.length)]\n    //   )\n    // }\n  }\n\n\n  handleDisasterWindowClosure(request) {\n    this.dialogOpen = false\n\n    if (request === DisasterWindow.DISASTER_NONE) return\n\n    switch (request) {\n      case DisasterWindow.DISASTER_MONSTER:\n        this.simulation.spriteManager.makeMonster()\n        break\n\n      case DisasterWindow.DISASTER_FIRE:\n        this.simulation.disasterManager.makeFire()\n        break\n\n      case DisasterWindow.DISASTER_FLOOD:\n        this.simulation.disasterManager.makeFlood()\n        break\n\n      case DisasterWindow.DISASTER_CRASH:\n        this.simulation.disasterManager.makeCrash()\n        break\n\n      case DisasterWindow.DISASTER_MELTDOWN:\n        this.simulation.disasterManager.makeMeltdown()\n        break\n\n      case DisasterWindow.DISASTER_TORNADO:\n        this.simulation.spriteManager.makeTornado()\n    }\n  }\n\n  handleSettingsWindowClosure(actions) {\n    this.dialogOpen = false\n\n    for (let i = 0, l = actions.length; i < l; i++) {\n      const a = actions[i]\n\n      switch (a.action) {\n        case SettingsWindow.AUTOBUDGET:\n          this.simulation.budget.setAutoBudget(a.data)\n          break\n\n        case SettingsWindow.AUTOBULLDOZE:\n          BaseTool.setAutoBulldoze(a.data)\n          break\n\n        case SettingsWindow.SPEED:\n          this.defaultSpeed = a.data\n          this.simulation.setSpeed(this.defaultSpeed)\n          break\n\n        case SettingsWindow.DISASTERS_CHANGED:\n          this.simulation.disasterManager.disastersEnabled = a.data\n          break\n\n        default:\n          console.warn('Unexpected action', a)\n      }\n    }\n  }\n\n  handleDebugWindowClosure(actions) {\n    this.dialogOpen = false\n\n    for (let i = 0, l = actions.length; i < l; i++) {\n      const a = actions[i]\n\n      switch (a.action) {\n        case DebugWindow.ADD_FUNDS:\n          this.simulation.budget.spend(-1000000)\n          break\n\n        default:\n          console.warn('Unexpected action', a)\n      }\n    }\n  }\n\n  handleScreenshotWindowClosure(action) {\n    this.dialogOpen = false\n\n    if (action === null) return\n\n    let dataURI\n    if (action === ScreenshotWindow.SCREENSHOT_VISIBLE) { dataURI = this.gameCanvas.screenshotVisible() } else if (action === ScreenshotWindow.SCREENSHOT_ALL) { dataURI = this.gameCanvas.screenshotMap() }\n\n    this.dialogOpen = true\n    this._openWindow = 'screenshotLinkWindow'\n    this.screenshotLinkWindow.open(dataURI)\n  }\n\n  handleBudgetWindowClosure(data) {\n    this.dialogOpen = false\n\n    if (!data.cancelled) {\n      this.simulation.budget.roadPercent = data.roadPercent / 100\n      this.simulation.budget.firePercent = data.firePercent / 100\n      this.simulation.budget.policePercent = data.policePercent / 100\n      this.simulation.budget.setTax(data.taxPercent - 0)\n      if (this.simNeededBudget) {\n        this.simulation.budget.doBudgetWindow()\n        this.simNeededBudget = false\n      } else {\n        this.simulation.budget.updateFundEffects()\n      }\n    }\n  }\n\n  handleMandatoryBudget() {\n    this.simNeededBudget = true\n    this.handleBudgetRequest()\n  }\n\n  handleTool(data) {\n\n    const x = data.x\n    const y = data.y\n\n    // Were was the tool clicked?\n    const tileCoords = this.gameCanvas.canvasCoordinateToTileCoordinate(x, y)\n\n    if (tileCoords === null) return\n\n    const tool = this.inputStatus.currentTool\n\n    const budget = this.simulation.budget\n    const evaluation = this.simulation.evaluation\n\n    // do it!\n    tool.doTool(tileCoords.x, tileCoords.y, this.simulation.blockMaps)\n\n    tool.modifyIfEnoughFunding(budget)\n\n    switch (tool.result) {\n      case tool.TOOLRESULT_NEEDS_BULLDOZE:\n        console.log(Text.toolMessages.needsDoze)\n        // $('#toolOutput').text(Text.toolMessages.needsDoze)\n        break\n\n      case tool.TOOLRESULT_NO_MONEY:\n        console.log(Text.toolMessages.noMoney)\n        // $('#toolOutput').text(Text.toolMessages.noMoney)\n        break\n\n      default:\n      // $('#toolOutput').html('Tools')\n    }\n  }\n\n  handleSave() {\n    this.save()\n    this.dialogOpen = true\n    this._openWindow = 'saveWindow'\n    this.saveWindow.open()\n  }\n\n  handlePause() {\n    // XXX Currently only offer pause and run to the user\n    // No real difference among the speeds until we optimise\n    // the sim\n    this.isPaused = !this.isPaused\n\n    if (this.isPaused) this.simulation.setSpeed(Simulation.SPEED_PAUSED)\n    else this.simulation.setSpeed(this.defaultSpeed)\n  }\n\n  handleInput() {\n    if (!this.dialogOpen) {\n\n      // Handle keyboard movement\n\n      if (this.inputStatus.left) this.gameCanvas.moveWest()\n      else if (this.inputStatus.up) this.gameCanvas.moveNorth()\n      else if (this.inputStatus.right) this.gameCanvas.moveEast()\n      else if (this.inputStatus.down) this.gameCanvas.moveSouth()\n    }\n\n    if (this.inputStatus.escape) {\n      // We need to handle escape, as InputStatus won't know what dialogs are showing\n      if (this.dialogOpen) {\n        this.dialogOpen = false\n        this[this._openWindow].close()\n        this._openWindow = null\n      } else this.inputStatus.clearTool()\n    }\n  }\n\n  processFrontEndMessage(message) {\n    const subject = message.subject\n    const d = new Date()\n\n    if (Text.goodMessages[subject] !== undefined) {\n\n      let cMessage = this.name + ' is now a '\n\n      switch (subject) {\n        case Messages.REACHED_CAPITAL:\n          if (!this._reachedCapital) {\n            this._reachedCapital = true\n            cMessage += 'capital!'\n          }\n          break\n\n        case Messages.REACHED_CITY:\n          if (!this._reachedCity) {\n            this._reachedCity = true\n            cMessage += 'city!'\n          }\n          break\n\n        case Messages.REACHED_MEGALOPOLIS:\n          if (!this._reachedMegalopolis) {\n            this._reachedMegalopolis = true\n            cMessage += 'megalopolis!'\n          }\n          break\n\n        case Messages.REACHED_METROPOLIS:\n          if (!this._reachedMetropolis) {\n            this._reachedMetropolis = true\n            cMessage += 'metropolis!'\n          }\n          break\n\n        case Messages.REACHED_TOWN:\n          if (!this._reachedTown) {\n            this._reachedTown = true\n            cMessage += 'town!'\n          }\n          break\n      }\n\n      if (\n        this.lastBadMessageTime === null\n        || d - this.lastBadMessageTime > disasterTimeout\n      ) {\n        this.lastBadMessageTime = null\n        this._notificationBar.goodNews(message)\n        // ./text.ts, messageText[Messages.REACHED_CITY] = 'Population has reached\n      }\n\n      if (cMessage !== this.name + ' is now a ') {\n        console.log('Congratulations', cMessage)\n        //   this.dialogOpen = true\n        //   this._openWindow = 'congratsWindow'\n        //   this.congratsWindow.open(cMessage)\n      }\n\n      return\n    }\n\n    // Show disaster if applicable\n    if (this.monsterTV && message.data) {\n      if (message.data.showable) {\n        this.monsterTV.show(message.data.x, message.data.y)\n      } else if (message.data.trackable) {\n        this.monsterTV.track(message.data.x, message.data.y, message.data.sprite)\n      }\n    }\n\n    if (Text.badMessages[subject] !== undefined) {\n\n      this._notificationBar.badNews(message)\n      if (Messages.DISASTER_MESSAGES.indexOf(message.subject) !== -1) { this.lastBadMessageTime = d }\n      return\n    }\n\n    if (Text.neutralMessages[subject] !== undefined) {\n      if (\n        this.lastBadMessageTime === null\n        || d - this.lastBadMessageTime > disasterTimeout\n      ) {\n        this.lastBadMessageTime = null\n        this._notificationBar.news(message)\n      }\n      return\n    }\n\n    console.warn('Unexpected message: ', subject)\n  }\n\n  calculateMouseForPaint() {\n    // Determine whether we need to draw a tool outline in the\n    // canvas\n    let mouse = null\n\n    if (this.inputStatus.mouseX !== -1 && this.inputStatus.toolWidth > 0) {\n      const tileCoords = this.gameCanvas.canvasCoordinateToTileOffset(\n        this.inputStatus.mouseX,\n        this.inputStatus.mouseY\n      )\n      if (tileCoords !== null) {\n        mouse = {}\n\n        mouse.x = tileCoords.x\n        mouse.y = tileCoords.y\n\n        // The inputStatus fields came from DOM attributes, so will be strings.\n        // Coerce back to numbers.\n        mouse.width = this.inputStatus.toolWidth - 0\n        mouse.height = this.inputStatus.toolWidth - 0\n        mouse.colour = this.inputStatus.toolColour || 'yellow'\n      }\n    }\n\n    return mouse\n  }\n\n  calculateSpritesForPaint(canvas) {\n    const origin = canvas.getTileOrigin()\n    const spriteList = this.simulation.spriteManager.getSpritesInView(\n      origin.x,\n      origin.y,\n      canvas.canvasWidth,\n      canvas.canvasHeight\n    )\n\n    if (spriteList.length === 0) return null\n\n    return spriteList\n  }\n\n}\n\nexport { Game }\n","import { Config } from './config'\nimport { TileSet } from './tiles/tileSet'\nimport { MapGenerator } from './map/mapGenerator'\nimport { Simulation } from './simulation'\nimport { Storage } from './storage'\nimport { Game } from './game'\n\nconst tiles = document.getElementById('tiles')\nconst sprites = document.getElementById('sprites')\n\nfunction createTileSet() {\n  const tileSet = new TileSet(\n    tiles,\n    function onLoad() {\n      function onSpritesReady() {\n        createGame(tileSet, sprites)\n      }\n      if (sprites.complete) {\n        onSpritesReady()\n      } else {\n        sprites.onload = onSpritesReady\n      }\n\n    },\n    function onError() {\n      console.error('Failed to load tileset')\n    }\n  )\n}\n\nif (tiles.complete) createTileSet()\ntiles.onload = createTileSet\n\nfunction createGame(tileSet, spriteSheet) {\n  /**\n   * Map size - TODO: Consolidate constants\n   * @see gameMap.js, mapGenerator.js\n   */\n  const mapWidth = 120 // 120\n  const mapHeight = 100 // 100\n\n  let map = MapGenerator(mapWidth, mapHeight)\n  let savedGame\n\n  if (Storage.canStore && (savedGame = Storage.getSavedGame())) {\n    map = savedGame\n  }\n\n  // Launch a new game\n  const game = new Game({\n    map,\n    tileSet,\n    spriteSheet,\n    difficulty: Simulation.LEVEL_EASY\n  })\n\n  setInterval(function () {\n    Storage.canStore && game.save()\n  }, 3000)\n\n\n\n}"],"names":["__name","__defProp","WEST","Direction.NORTH","Direction.NORTHEAST","Direction.EAST","Direction.SOUTHEAST","Direction.SOUTH","Direction.SOUTHWEST","Direction.WEST","Direction.NORTHWEST","TileFlags.NOFLAGS","TileFlags.ALLBITS","TileFlags.ANIMBIT","TileFlags.BULLBIT","TileFlags.CONDBIT","TileFlags.BURNBIT","TileFlags.POWERBIT","TileFlags.ZONEBIT","TileFlags.BIT_MASK","TileFlags.BIT_START","saveProps","TileValues.FIRSTRIVEDGE","TileValues.LASTRUBBLE","TileValues.POWERBASE","TileValues.TINYEXP","TileValues.LASTTINYEXP","TileValues.COMBASE","TileValues.INDBASE","TileValues.ROADBASE","TileValues.LASTROAD","TileValues.RAILHPOWERV","TileValues.LASTRAIL","TileValues.FIREBASE","TileValues.FLOOD","TileValues.LASTFLOOD","TileValues.PORTBASE","TileValues.RAILBASE","TileValues.RESBASE","TileValues.HOSPITALBASE","TileValues.FIRE","TileValues.RUBBLE","TileValues.POWERPLANT","TileValues.PORT","TileValues.NUCLEAR","TileValues.STADIUM","TileValues.COALSMOKE3","TileValues.AIRPORT","TileValues.LASTPOWERPLANT","TileValues.POLICESTATION","TileValues.CHURCH1BASE","TileValues.CHURCH7LAST","TileValues.LASTPORT","TileValues.COALBASE","TileValues.STADIUMBASE","TileValues.LASTZONE","TileValues.HPOWER","TileValues.VPOWER","TileValues.HRAIL","TileValues.VRAIL","TileValues.BRWH","TileValues.BRWV","TileValues.TREEBASE","TileValues.RIVER","TileValues.RZB","getZonePopulation","growZone","degradeZone","xDelta","yDelta","TileValues.LHTHR","TileValues.HHTHR","TileValues.FREEZ","TileValues.DIRT","TileValues.HOUSE","TileValues.HOSPITAL","TileValues.HTRFBASE","TileValues.LTRFBASE","TileValues.RADTILE","TileValues.LASTIND","Messages.AUTOBUDGET_CHANGED","Messages.FUNDS_CHANGED","Messages.BUDGET_NEEDED","Messages.NO_MONEY","Messages.EARTHQUAKE","Messages.FIRE_REPORTED","TileValues.CHANNEL","TileValues.WATER_HIGH","Messages.FLOODING_REPORTED","TileValues.WOODS5","Messages.NUCLEAR_MELTDOWN","tile","isCallable","TileValues.VBRDG0","TileValues.VBRDG1","TileValues.VBRDG2","TileValues.VBRDG3","TileValues.VBRIDGE","TileValues.HBRDG1","TileValues.HBRDG3","TileValues.HBRDG0","TileValues.HBRDG2","TileValues.HBRIDGE","init","tileDeltaX","tileDeltaY","CANTMOVE","SpriteConstants.SPRITE_MONSTER","SpriteConstants.SPRITE_AIRPLANE","SpriteConstants.SPRITE_HELICOPTER","SpriteConstants.SPRITE_SHIP","SpriteConstants.SPRITE_TRAIN","TileValues.RAILVPOWERH","Messages.CRASHES","Messages.HEAVY_TRAFFIC","SpriteConstants.SPRITE_TORNADO","Messages.TORNADO_SIGHTED","SpriteConstants.SPRITE_EXPLOSION","Messages.MONSTER_SIGHTED","TileValues.RADAR","TileValues.RADAR0","Messages.REACHED_VILLAGE","Messages.NOT_ENOUGH_POWER","Messages.FRONT_END_MESSAGE","Messages.VALVES_UPDATED","Messages.DISASTER_MESSAGES","Messages.NEED_MORE_RESIDENTIAL","Messages.NEED_MORE_COMMERCIAL","Messages.NEED_MORE_INDUSTRIAL","Messages.NEED_MORE_ROADS","Messages.NEED_MORE_RAILS","Messages.NEED_ELECTRICITY","Messages.NEED_STADIUM","Messages.NEED_SEAPORT","Messages.NEED_AIRPORT","Messages.BLACKOUTS_REPORTED","Messages.HIGH_POLLUTION","Messages.HIGH_CRIME","Messages.NEED_FIRE_STATION","Messages.NEED_POLICE_STATION","Messages.TAX_TOO_HIGH","Messages.ROAD_NEEDS_FUNDING","Messages.FIRE_STATION_NEEDS_FUNDING","Messages.POLICE_NEEDS_FUNDING","Messages.TRAFFIC_JAMS","Messages.REACHED_TOWN","Messages.REACHED_CITY","Messages.REACHED_CAPITAL","Messages.REACHED_METROPOLIS","Messages.REACHED_MEGALOPOLIS","Messages.DATE_UPDATED","clear","toKey","makeTool","cancel","submit","defineAction","Messages.WELCOME","Messages.EXPLOSION_REPORTED","Messages.HELICOPTER_CRASHED","Messages.PLANE_CRASHED","Messages.SHIP_CRASHED","Messages.TRAIN_CRASHED","Messages.CLASSIFICATION_UPDATED","Messages.POPULATION_UPDATED","Messages.SCORE_UPDATED","TileValues.ROADS","TileValues.ROADS2","TileValues.ROADS3","TileValues.ROADS4","TileValues.ROADS8","TileValues.ROADS6","TileValues.ROADS7","TileValues.ROADS5","TileValues.ROADS10","TileValues.ROADS9","TileValues.INTERSECTION","TileValues.LHRAIL","TileValues.LVRAIL","TileValues.LVRAIL2","TileValues.LVRAIL3","TileValues.LVRAIL7","TileValues.LVRAIL5","TileValues.LVRAIL6","TileValues.LVRAIL4","TileValues.LVRAIL9","TileValues.LVRAIL8","TileValues.LVRAIL10","TileValues.LHPOWER","TileValues.LVPOWER","TileValues.LVPOWER2","TileValues.LVPOWER3","TileValues.LVPOWER7","TileValues.LVPOWER5","TileValues.LVPOWER6","TileValues.LVPOWER4","TileValues.LVPOWER9","TileValues.LVPOWER8","TileValues.LVPOWER10","TileValues.HRAILROAD","TileValues.VROADPOWER","TileValues.HROADPOWER","TileValues.VRAILROAD","TileValues.REDGE","TileValues.AIRPORTBASE","TileValues.FIRESTBASE","TileValues.POLICESTBASE","TileValues.NUCLEARBASE","TileValues.FOUNTAIN","TileValues.INDBASE2","TileValues.FOOTBALLGAME1","TileValues.COALSMOKE1","TileValues.COMCLR","TileValues.FIRESTATION","TileValues.INDCLR","Messages.QUERY_WINDOW_NEEDED","Messages.TOOL_CLICKED","Messages.SPEED_CHANGE","Messages.EVAL_WINDOW_CLOSED","Messages.EVAL_REQUESTED","Messages.BUDGET_WINDOW_CLOSED","Messages.BUDGET_REQUESTED","Messages.DISASTER_WINDOW_CLOSED","Messages.DISASTER_REQUESTED","Messages.DEBUG_WINDOW_CLOSED","Messages.DEBUG_WINDOW_REQUESTED","Messages.SETTINGS_WINDOW_CLOSED","Messages.SETTINGS_WINDOW_REQUESTED","Messages.SCREENSHOT_WINDOW_CLOSED","Messages.SCREENSHOT_WINDOW_REQUESTED","Messages.SCREENSHOT_LINK_CLOSED","Messages.SAVE_WINDOW_CLOSED","Messages.TOUCH_WINDOW_CLOSED","Messages.QUERY_WINDOW_CLOSED","Messages.SAVE_REQUESTED"],"mappings":"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"}